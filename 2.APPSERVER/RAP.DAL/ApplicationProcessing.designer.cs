#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RAP.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OAKRAP")]
	public partial class ApplicationProcessingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCurrentOnRentStatus(CurrentOnRentStatus instance);
    partial void UpdateCurrentOnRentStatus(CurrentOnRentStatus instance);
    partial void DeleteCurrentOnRentStatus(CurrentOnRentStatus instance);
    partial void InsertPetitionGround(PetitionGround instance);
    partial void UpdatePetitionGround(PetitionGround instance);
    partial void DeletePetitionGround(PetitionGround instance);
    partial void InsertUnitType(UnitType instance);
    partial void UpdateUnitType(UnitType instance);
    partial void DeleteUnitType(UnitType instance);
    partial void InsertTenantPetitionGroundInfo(TenantPetitionGroundInfo instance);
    partial void UpdateTenantPetitionGroundInfo(TenantPetitionGroundInfo instance);
    partial void DeleteTenantPetitionGroundInfo(TenantPetitionGroundInfo instance);
    partial void InsertTenantRentalIncrementInfo(TenantRentalIncrementInfo instance);
    partial void UpdateTenantRentalIncrementInfo(TenantRentalIncrementInfo instance);
    partial void DeleteTenantRentalIncrementInfo(TenantRentalIncrementInfo instance);
    partial void InsertAppealGround(AppealGround instance);
    partial void UpdateAppealGround(AppealGround instance);
    partial void DeleteAppealGround(AppealGround instance);
    partial void InsertTenantAppealGroundInfo(TenantAppealGroundInfo instance);
    partial void UpdateTenantAppealGroundInfo(TenantAppealGroundInfo instance);
    partial void DeleteTenantAppealGroundInfo(TenantAppealGroundInfo instance);
    partial void InsertOwnerPetitionTenantInfo(OwnerPetitionTenantInfo instance);
    partial void UpdateOwnerPetitionTenantInfo(OwnerPetitionTenantInfo instance);
    partial void DeleteOwnerPetitionTenantInfo(OwnerPetitionTenantInfo instance);
    partial void InsertPetitionDetail(PetitionDetail instance);
    partial void UpdatePetitionDetail(PetitionDetail instance);
    partial void DeletePetitionDetail(PetitionDetail instance);
    partial void InsertPetitionCategory(PetitionCategory instance);
    partial void UpdatePetitionCategory(PetitionCategory instance);
    partial void DeletePetitionCategory(PetitionCategory instance);
    partial void InsertOwnerRentIncreaseReasonInfo(OwnerRentIncreaseReasonInfo instance);
    partial void UpdateOwnerRentIncreaseReasonInfo(OwnerRentIncreaseReasonInfo instance);
    partial void DeleteOwnerRentIncreaseReasonInfo(OwnerRentIncreaseReasonInfo instance);
    partial void InsertNumberRangeForUnit(NumberRangeForUnit instance);
    partial void UpdateNumberRangeForUnit(NumberRangeForUnit instance);
    partial void DeleteNumberRangeForUnit(NumberRangeForUnit instance);
    partial void InsertTenantProblemInfo(TenantProblemInfo instance);
    partial void UpdateTenantProblemInfo(TenantProblemInfo instance);
    partial void DeleteTenantProblemInfo(TenantProblemInfo instance);
    partial void InsertTenantLostServiceInfo(TenantLostServiceInfo instance);
    partial void UpdateTenantLostServiceInfo(TenantLostServiceInfo instance);
    partial void DeleteTenantLostServiceInfo(TenantLostServiceInfo instance);
    partial void InsertOwnerPetitionRentalIncrementInfo(OwnerPetitionRentalIncrementInfo instance);
    partial void UpdateOwnerPetitionRentalIncrementInfo(OwnerPetitionRentalIncrementInfo instance);
    partial void DeleteOwnerPetitionRentalIncrementInfo(OwnerPetitionRentalIncrementInfo instance);
    partial void InsertOwnerPetitionInfo(OwnerPetitionInfo instance);
    partial void UpdateOwnerPetitionInfo(OwnerPetitionInfo instance);
    partial void DeleteOwnerPetitionInfo(OwnerPetitionInfo instance);
    partial void InsertOwnerPetitionPageSubmissionStatus(OwnerPetitionPageSubmissionStatus instance);
    partial void UpdateOwnerPetitionPageSubmissionStatus(OwnerPetitionPageSubmissionStatus instance);
    partial void DeleteOwnerPetitionPageSubmissionStatus(OwnerPetitionPageSubmissionStatus instance);
    partial void InsertTenantPetitionPageSubmissionStatus(TenantPetitionPageSubmissionStatus instance);
    partial void UpdateTenantPetitionPageSubmissionStatus(TenantPetitionPageSubmissionStatus instance);
    partial void DeleteTenantPetitionPageSubmissionStatus(TenantPetitionPageSubmissionStatus instance);
    partial void InsertAppealOpposingParty(AppealOpposingParty instance);
    partial void UpdateAppealOpposingParty(AppealOpposingParty instance);
    partial void DeleteAppealOpposingParty(AppealOpposingParty instance);
    partial void InsertTenantAppealDetail(TenantAppealDetail instance);
    partial void UpdateTenantAppealDetail(TenantAppealDetail instance);
    partial void DeleteTenantAppealDetail(TenantAppealDetail instance);
    partial void InsertTenantPetitionInfo(TenantPetitionInfo instance);
    partial void UpdateTenantPetitionInfo(TenantPetitionInfo instance);
    partial void DeleteTenantPetitionInfo(TenantPetitionInfo instance);
    partial void InsertTenantPetitionVerification(TenantPetitionVerification instance);
    partial void UpdateTenantPetitionVerification(TenantPetitionVerification instance);
    partial void DeleteTenantPetitionVerification(TenantPetitionVerification instance);
    partial void InsertTenantResponseExemptContestedInfo(TenantResponseExemptContestedInfo instance);
    partial void UpdateTenantResponseExemptContestedInfo(TenantResponseExemptContestedInfo instance);
    partial void DeleteTenantResponseExemptContestedInfo(TenantResponseExemptContestedInfo instance);
    partial void InsertTenantResponsePageSubmissionStatus(TenantResponsePageSubmissionStatus instance);
    partial void UpdateTenantResponsePageSubmissionStatus(TenantResponsePageSubmissionStatus instance);
    partial void DeleteTenantResponsePageSubmissionStatus(TenantResponsePageSubmissionStatus instance);
    partial void InsertOwnerResponseTenantInfo(OwnerResponseTenantInfo instance);
    partial void UpdateOwnerResponseTenantInfo(OwnerResponseTenantInfo instance);
    partial void DeleteOwnerResponseTenantInfo(OwnerResponseTenantInfo instance);
    partial void InsertOwnerResponseRentalIncrementInfo(OwnerResponseRentalIncrementInfo instance);
    partial void UpdateOwnerResponseRentalIncrementInfo(OwnerResponseRentalIncrementInfo instance);
    partial void DeleteOwnerResponseRentalIncrementInfo(OwnerResponseRentalIncrementInfo instance);
    partial void InsertOwnerResponseRentIncreaseReasonInfo(OwnerResponseRentIncreaseReasonInfo instance);
    partial void UpdateOwnerResponseRentIncreaseReasonInfo(OwnerResponseRentIncreaseReasonInfo instance);
    partial void DeleteOwnerResponseRentIncreaseReasonInfo(OwnerResponseRentIncreaseReasonInfo instance);
    partial void InsertTenantResponseApplicationInfo(TenantResponseApplicationInfo instance);
    partial void UpdateTenantResponseApplicationInfo(TenantResponseApplicationInfo instance);
    partial void DeleteTenantResponseApplicationInfo(TenantResponseApplicationInfo instance);
    partial void InsertTenantResponseRentalIncrementInfo(TenantResponseRentalIncrementInfo instance);
    partial void UpdateTenantResponseRentalIncrementInfo(TenantResponseRentalIncrementInfo instance);
    partial void DeleteTenantResponseRentalIncrementInfo(TenantResponseRentalIncrementInfo instance);
    partial void InsertTenantResponsePageSubmissionStatus1(TenantResponsePageSubmissionStatus1 instance);
    partial void UpdateTenantResponsePageSubmissionStatus1(TenantResponsePageSubmissionStatus1 instance);
    partial void DeleteTenantResponsePageSubmissionStatus1(TenantResponsePageSubmissionStatus1 instance);
    partial void InsertTenantResponseRentalHistory(TenantResponseRentalHistory instance);
    partial void UpdateTenantResponseRentalHistory(TenantResponseRentalHistory instance);
    partial void DeleteTenantResponseRentalHistory(TenantResponseRentalHistory instance);
    partial void InsertTenantResponseVerification(TenantResponseVerification instance);
    partial void UpdateTenantResponseVerification(TenantResponseVerification instance);
    partial void DeleteTenantResponseVerification(TenantResponseVerification instance);
    partial void InsertAppealPageSubmissionStatus(AppealPageSubmissionStatus instance);
    partial void UpdateAppealPageSubmissionStatus(AppealPageSubmissionStatus instance);
    partial void DeleteAppealPageSubmissionStatus(AppealPageSubmissionStatus instance);
    partial void InsertOwnerResponsePropertyInfo(OwnerResponsePropertyInfo instance);
    partial void UpdateOwnerResponsePropertyInfo(OwnerResponsePropertyInfo instance);
    partial void DeleteOwnerResponsePropertyInfo(OwnerResponsePropertyInfo instance);
    partial void InsertOwnerResponseInfo(OwnerResponseInfo instance);
    partial void UpdateOwnerResponseInfo(OwnerResponseInfo instance);
    partial void DeleteOwnerResponseInfo(OwnerResponseInfo instance);
    partial void InsertOwnerResponsePageSubmissionStatus(OwnerResponsePageSubmissionStatus instance);
    partial void UpdateOwnerResponsePageSubmissionStatus(OwnerResponsePageSubmissionStatus instance);
    partial void DeleteOwnerResponsePageSubmissionStatus(OwnerResponsePageSubmissionStatus instance);
    partial void InsertOwnerPetitionPropertyInfo(OwnerPetitionPropertyInfo instance);
    partial void UpdateOwnerPetitionPropertyInfo(OwnerPetitionPropertyInfo instance);
    partial void DeleteOwnerPetitionPropertyInfo(OwnerPetitionPropertyInfo instance);
    partial void InsertOwnerPetitionApplicantInfo(OwnerPetitionApplicantInfo instance);
    partial void UpdateOwnerPetitionApplicantInfo(OwnerPetitionApplicantInfo instance);
    partial void DeleteOwnerPetitionApplicantInfo(OwnerPetitionApplicantInfo instance);
    partial void InsertCaseDetail(CaseDetail instance);
    partial void UpdateCaseDetail(CaseDetail instance);
    partial void DeleteCaseDetail(CaseDetail instance);
    partial void InsertTenantRentalHistory(TenantRentalHistory instance);
    partial void UpdateTenantRentalHistory(TenantRentalHistory instance);
    partial void DeleteTenantRentalHistory(TenantRentalHistory instance);
    partial void InsertServeAppeal(ServeAppeal instance);
    partial void UpdateServeAppeal(ServeAppeal instance);
    partial void DeleteServeAppeal(ServeAppeal instance);
    partial void InsertTenantResponseExemptContestedInfo1(TenantResponseExemptContestedInfo1 instance);
    partial void UpdateTenantResponseExemptContestedInfo1(TenantResponseExemptContestedInfo1 instance);
    partial void DeleteTenantResponseExemptContestedInfo1(TenantResponseExemptContestedInfo1 instance);
    partial void InsertOwnerRentIncreaseReason(OwnerRentIncreaseReason instance);
    partial void UpdateOwnerRentIncreaseReason(OwnerRentIncreaseReason instance);
    partial void DeleteOwnerRentIncreaseReason(OwnerRentIncreaseReason instance);
    partial void InsertOwnerPetitionVerification(OwnerPetitionVerification instance);
    partial void UpdateOwnerPetitionVerification(OwnerPetitionVerification instance);
    partial void DeleteOwnerPetitionVerification(OwnerPetitionVerification instance);
    partial void InsertOwnerResponseApplicantInfo(OwnerResponseApplicantInfo instance);
    partial void UpdateOwnerResponseApplicantInfo(OwnerResponseApplicantInfo instance);
    partial void DeleteOwnerResponseApplicantInfo(OwnerResponseApplicantInfo instance);
    partial void InsertOwnerResponseVerification(OwnerResponseVerification instance);
    partial void UpdateOwnerResponseVerification(OwnerResponseVerification instance);
    partial void DeleteOwnerResponseVerification(OwnerResponseVerification instance);
    #endregion
		
		public ApplicationProcessingDataContext() : 
				base(global::RAP.DAL.Properties.Settings.Default.OAKRAPConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ApplicationProcessingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApplicationProcessingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApplicationProcessingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApplicationProcessingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CurrentOnRentStatus> CurrentOnRentStatus
		{
			get
			{
				return this.GetTable<CurrentOnRentStatus>();
			}
		}
		
		public System.Data.Linq.Table<PetitionGround> PetitionGrounds
		{
			get
			{
				return this.GetTable<PetitionGround>();
			}
		}
		
		public System.Data.Linq.Table<UnitType> UnitTypes
		{
			get
			{
				return this.GetTable<UnitType>();
			}
		}
		
		public System.Data.Linq.Table<TenantPetitionGroundInfo> TenantPetitionGroundInfos
		{
			get
			{
				return this.GetTable<TenantPetitionGroundInfo>();
			}
		}
		
		public System.Data.Linq.Table<TenantRentalIncrementInfo> TenantRentalIncrementInfos
		{
			get
			{
				return this.GetTable<TenantRentalIncrementInfo>();
			}
		}
		
		public System.Data.Linq.Table<AppealGround> AppealGrounds
		{
			get
			{
				return this.GetTable<AppealGround>();
			}
		}
		
		public System.Data.Linq.Table<TenantAppealGroundInfo> TenantAppealGroundInfos
		{
			get
			{
				return this.GetTable<TenantAppealGroundInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionTenantInfo> OwnerPetitionTenantInfos
		{
			get
			{
				return this.GetTable<OwnerPetitionTenantInfo>();
			}
		}
		
		public System.Data.Linq.Table<PetitionDetail> PetitionDetails
		{
			get
			{
				return this.GetTable<PetitionDetail>();
			}
		}
		
		public System.Data.Linq.Table<PetitionCategory> PetitionCategories
		{
			get
			{
				return this.GetTable<PetitionCategory>();
			}
		}
		
		public System.Data.Linq.Table<OwnerRentIncreaseReasonInfo> OwnerRentIncreaseReasonInfos
		{
			get
			{
				return this.GetTable<OwnerRentIncreaseReasonInfo>();
			}
		}
		
		public System.Data.Linq.Table<NumberRangeForUnit> NumberRangeForUnits
		{
			get
			{
				return this.GetTable<NumberRangeForUnit>();
			}
		}
		
		public System.Data.Linq.Table<TenantProblemInfo> TenantProblemInfos
		{
			get
			{
				return this.GetTable<TenantProblemInfo>();
			}
		}
		
		public System.Data.Linq.Table<TenantLostServiceInfo> TenantLostServiceInfos
		{
			get
			{
				return this.GetTable<TenantLostServiceInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionRentalIncrementInfo> OwnerPetitionRentalIncrementInfos
		{
			get
			{
				return this.GetTable<OwnerPetitionRentalIncrementInfo>();
			}
		}
		
		public System.Data.Linq.Table<RAPNoticeStatus> RAPNoticeStatus
		{
			get
			{
				return this.GetTable<RAPNoticeStatus>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionInfo> OwnerPetitionInfos
		{
			get
			{
				return this.GetTable<OwnerPetitionInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionPageSubmissionStatus> OwnerPetitionPageSubmissionStatus
		{
			get
			{
				return this.GetTable<OwnerPetitionPageSubmissionStatus>();
			}
		}
		
		public System.Data.Linq.Table<TenantPetitionPageSubmissionStatus> TenantPetitionPageSubmissionStatus
		{
			get
			{
				return this.GetTable<TenantPetitionPageSubmissionStatus>();
			}
		}
		
		public System.Data.Linq.Table<AppealOpposingParty> AppealOpposingParties
		{
			get
			{
				return this.GetTable<AppealOpposingParty>();
			}
		}
		
		public System.Data.Linq.Table<TenantAppealDetail> TenantAppealDetails
		{
			get
			{
				return this.GetTable<TenantAppealDetail>();
			}
		}
		
		public System.Data.Linq.Table<TenantPetitionInfo> TenantPetitionInfos
		{
			get
			{
				return this.GetTable<TenantPetitionInfo>();
			}
		}
		
		public System.Data.Linq.Table<TenantPetitionVerification> TenantPetitionVerifications
		{
			get
			{
				return this.GetTable<TenantPetitionVerification>();
			}
		}
		
		public System.Data.Linq.Table<TenantResponseExemptContestedInfo> TenantResponseExemptContestedInfos
		{
			get
			{
				return this.GetTable<TenantResponseExemptContestedInfo>();
			}
		}
		
		public System.Data.Linq.Table<TenantResponsePageSubmissionStatus> TenantResponsePageSubmissionStatus
		{
			get
			{
				return this.GetTable<TenantResponsePageSubmissionStatus>();
			}
		}
		
		public System.Data.Linq.Table<OwnerResponseTenantInfo> OwnerResponseTenantInfos
		{
			get
			{
				return this.GetTable<OwnerResponseTenantInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerResponseRentalIncrementInfo> OwnerResponseRentalIncrementInfos
		{
			get
			{
				return this.GetTable<OwnerResponseRentalIncrementInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerResponseRentIncreaseReasonInfo> OwnerResponseRentIncreaseReasonInfos
		{
			get
			{
				return this.GetTable<OwnerResponseRentIncreaseReasonInfo>();
			}
		}
		
		public System.Data.Linq.Table<TenantResponseApplicationInfo> TenantResponseApplicationInfos
		{
			get
			{
				return this.GetTable<TenantResponseApplicationInfo>();
			}
		}
		
		public System.Data.Linq.Table<TenantResponseRentalIncrementInfo> TenantResponseRentalIncrementInfos
		{
			get
			{
				return this.GetTable<TenantResponseRentalIncrementInfo>();
			}
		}
		
		public System.Data.Linq.Table<TenantResponsePageSubmissionStatus1> TenantResponsePageSubmissionStatus1s
		{
			get
			{
				return this.GetTable<TenantResponsePageSubmissionStatus1>();
			}
		}
		
		public System.Data.Linq.Table<TenantResponseRentalHistory> TenantResponseRentalHistories
		{
			get
			{
				return this.GetTable<TenantResponseRentalHistory>();
			}
		}
		
		public System.Data.Linq.Table<TenantResponseVerification> TenantResponseVerifications
		{
			get
			{
				return this.GetTable<TenantResponseVerification>();
			}
		}
		
		public System.Data.Linq.Table<AppealPageSubmissionStatus> AppealPageSubmissionStatus
		{
			get
			{
				return this.GetTable<AppealPageSubmissionStatus>();
			}
		}
		
		public System.Data.Linq.Table<OwnerResponsePropertyInfo> OwnerResponsePropertyInfos
		{
			get
			{
				return this.GetTable<OwnerResponsePropertyInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerResponseInfo> OwnerResponseInfos
		{
			get
			{
				return this.GetTable<OwnerResponseInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerResponsePageSubmissionStatus> OwnerResponsePageSubmissionStatus
		{
			get
			{
				return this.GetTable<OwnerResponsePageSubmissionStatus>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionPropertyInfo> OwnerPetitionPropertyInfos
		{
			get
			{
				return this.GetTable<OwnerPetitionPropertyInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionApplicantInfo> OwnerPetitionApplicantInfos
		{
			get
			{
				return this.GetTable<OwnerPetitionApplicantInfo>();
			}
		}
		
		public System.Data.Linq.Table<CaseDetail> CaseDetails
		{
			get
			{
				return this.GetTable<CaseDetail>();
			}
		}
		
		public System.Data.Linq.Table<TenantRentalHistory> TenantRentalHistories
		{
			get
			{
				return this.GetTable<TenantRentalHistory>();
			}
		}
		
		public System.Data.Linq.Table<ServeAppeal> ServeAppeals
		{
			get
			{
				return this.GetTable<ServeAppeal>();
			}
		}
		
		public System.Data.Linq.Table<TenantResponseExemptContestedInfo1> TenantResponseExemptContestedInfo1s
		{
			get
			{
				return this.GetTable<TenantResponseExemptContestedInfo1>();
			}
		}
		
		public System.Data.Linq.Table<OwnerRentIncreaseReason> OwnerRentIncreaseReasons
		{
			get
			{
				return this.GetTable<OwnerRentIncreaseReason>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionVerification> OwnerPetitionVerifications
		{
			get
			{
				return this.GetTable<OwnerPetitionVerification>();
			}
		}
		
		public System.Data.Linq.Table<OwnerResponseApplicantInfo> OwnerResponseApplicantInfos
		{
			get
			{
				return this.GetTable<OwnerResponseApplicantInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerResponseVerification> OwnerResponseVerifications
		{
			get
			{
				return this.GetTable<OwnerResponseVerification>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentOnRentStatus")]
	public partial class CurrentOnRentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentStatusID;
		
		private string _RentStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentStatusIDChanging(int value);
    partial void OnRentStatusIDChanged();
    partial void OnRentStatusChanging(string value);
    partial void OnRentStatusChanged();
    #endregion
		
		public CurrentOnRentStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentStatusID
		{
			get
			{
				return this._RentStatusID;
			}
			set
			{
				if ((this._RentStatusID != value))
				{
					this.OnRentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._RentStatusID = value;
					this.SendPropertyChanged("RentStatusID");
					this.OnRentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentStatus", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RentStatus
		{
			get
			{
				return this._RentStatus;
			}
			set
			{
				if ((this._RentStatus != value))
				{
					this.OnRentStatusChanging(value);
					this.SendPropertyChanging();
					this._RentStatus = value;
					this.SendPropertyChanged("RentStatus");
					this.OnRentStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PetitionGrounds")]
	public partial class PetitionGround : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PetitionGroundID;
		
		private string _PetitionDescription;
		
		private EntitySet<TenantPetitionGroundInfo> _TenantPetitionGroundInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPetitionGroundIDChanging(int value);
    partial void OnPetitionGroundIDChanged();
    partial void OnPetitionDescriptionChanging(string value);
    partial void OnPetitionDescriptionChanged();
    #endregion
		
		public PetitionGround()
		{
			this._TenantPetitionGroundInfos = new EntitySet<TenantPetitionGroundInfo>(new Action<TenantPetitionGroundInfo>(this.attach_TenantPetitionGroundInfos), new Action<TenantPetitionGroundInfo>(this.detach_TenantPetitionGroundInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionGroundID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PetitionGroundID
		{
			get
			{
				return this._PetitionGroundID;
			}
			set
			{
				if ((this._PetitionGroundID != value))
				{
					this.OnPetitionGroundIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionGroundID = value;
					this.SendPropertyChanged("PetitionGroundID");
					this.OnPetitionGroundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PetitionDescription
		{
			get
			{
				return this._PetitionDescription;
			}
			set
			{
				if ((this._PetitionDescription != value))
				{
					this.OnPetitionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PetitionDescription = value;
					this.SendPropertyChanged("PetitionDescription");
					this.OnPetitionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionGround_TenantPetitionGroundInfo", Storage="_TenantPetitionGroundInfos", ThisKey="PetitionGroundID", OtherKey="PetitionGroundID")]
		public EntitySet<TenantPetitionGroundInfo> TenantPetitionGroundInfos
		{
			get
			{
				return this._TenantPetitionGroundInfos;
			}
			set
			{
				this._TenantPetitionGroundInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TenantPetitionGroundInfos(TenantPetitionGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.PetitionGround = this;
		}
		
		private void detach_TenantPetitionGroundInfos(TenantPetitionGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.PetitionGround = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitType")]
	public partial class UnitType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitTypeID;
		
		private string _Description;
		
		private EntitySet<OwnerResponsePropertyInfo> _OwnerResponsePropertyInfos;
		
		private EntitySet<OwnerPetitionPropertyInfo> _OwnerPetitionPropertyInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitTypeIDChanging(int value);
    partial void OnUnitTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UnitType()
		{
			this._OwnerResponsePropertyInfos = new EntitySet<OwnerResponsePropertyInfo>(new Action<OwnerResponsePropertyInfo>(this.attach_OwnerResponsePropertyInfos), new Action<OwnerResponsePropertyInfo>(this.detach_OwnerResponsePropertyInfos));
			this._OwnerPetitionPropertyInfos = new EntitySet<OwnerPetitionPropertyInfo>(new Action<OwnerPetitionPropertyInfo>(this.attach_OwnerPetitionPropertyInfos), new Action<OwnerPetitionPropertyInfo>(this.detach_OwnerPetitionPropertyInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UnitTypeID
		{
			get
			{
				return this._UnitTypeID;
			}
			set
			{
				if ((this._UnitTypeID != value))
				{
					this.OnUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UnitTypeID = value;
					this.SendPropertyChanged("UnitTypeID");
					this.OnUnitTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitType_OwnerResponsePropertyInfo", Storage="_OwnerResponsePropertyInfos", ThisKey="UnitTypeID", OtherKey="UnitTypeID")]
		public EntitySet<OwnerResponsePropertyInfo> OwnerResponsePropertyInfos
		{
			get
			{
				return this._OwnerResponsePropertyInfos;
			}
			set
			{
				this._OwnerResponsePropertyInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitType_OwnerPetitionPropertyInfo", Storage="_OwnerPetitionPropertyInfos", ThisKey="UnitTypeID", OtherKey="UnitTypeID")]
		public EntitySet<OwnerPetitionPropertyInfo> OwnerPetitionPropertyInfos
		{
			get
			{
				return this._OwnerPetitionPropertyInfos;
			}
			set
			{
				this._OwnerPetitionPropertyInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerResponsePropertyInfos(OwnerResponsePropertyInfo entity)
		{
			this.SendPropertyChanging();
			entity.UnitType = this;
		}
		
		private void detach_OwnerResponsePropertyInfos(OwnerResponsePropertyInfo entity)
		{
			this.SendPropertyChanging();
			entity.UnitType = null;
		}
		
		private void attach_OwnerPetitionPropertyInfos(OwnerPetitionPropertyInfo entity)
		{
			this.SendPropertyChanging();
			entity.UnitType = this;
		}
		
		private void detach_OwnerPetitionPropertyInfos(OwnerPetitionPropertyInfo entity)
		{
			this.SendPropertyChanging();
			entity.UnitType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantPetitionGroundInfo")]
	public partial class TenantPetitionGroundInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantPetitionGroudID;
		
		private int _TenantPetitionID;
		
		private int _PetitionGroundID;
		
		private EntityRef<PetitionGround> _PetitionGround;
		
		private EntityRef<TenantPetitionInfo> _TenantPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantPetitionGroudIDChanging(int value);
    partial void OnTenantPetitionGroudIDChanged();
    partial void OnTenantPetitionIDChanging(int value);
    partial void OnTenantPetitionIDChanged();
    partial void OnPetitionGroundIDChanging(int value);
    partial void OnPetitionGroundIDChanged();
    #endregion
		
		public TenantPetitionGroundInfo()
		{
			this._PetitionGround = default(EntityRef<PetitionGround>);
			this._TenantPetitionInfo = default(EntityRef<TenantPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionGroudID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantPetitionGroudID
		{
			get
			{
				return this._TenantPetitionGroudID;
			}
			set
			{
				if ((this._TenantPetitionGroudID != value))
				{
					this.OnTenantPetitionGroudIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionGroudID = value;
					this.SendPropertyChanged("TenantPetitionGroudID");
					this.OnTenantPetitionGroudIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", DbType="Int NOT NULL")]
		public int TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					if (this._TenantPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionGroundID", DbType="Int NOT NULL")]
		public int PetitionGroundID
		{
			get
			{
				return this._PetitionGroundID;
			}
			set
			{
				if ((this._PetitionGroundID != value))
				{
					if (this._PetitionGround.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetitionGroundIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionGroundID = value;
					this.SendPropertyChanged("PetitionGroundID");
					this.OnPetitionGroundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionGround_TenantPetitionGroundInfo", Storage="_PetitionGround", ThisKey="PetitionGroundID", OtherKey="PetitionGroundID", IsForeignKey=true)]
		public PetitionGround PetitionGround
		{
			get
			{
				return this._PetitionGround.Entity;
			}
			set
			{
				PetitionGround previousValue = this._PetitionGround.Entity;
				if (((previousValue != value) 
							|| (this._PetitionGround.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PetitionGround.Entity = null;
						previousValue.TenantPetitionGroundInfos.Remove(this);
					}
					this._PetitionGround.Entity = value;
					if ((value != null))
					{
						value.TenantPetitionGroundInfos.Add(this);
						this._PetitionGroundID = value.PetitionGroundID;
					}
					else
					{
						this._PetitionGroundID = default(int);
					}
					this.SendPropertyChanged("PetitionGround");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantPetitionGroundInfo", Storage="_TenantPetitionInfo", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID", IsForeignKey=true)]
		public TenantPetitionInfo TenantPetitionInfo
		{
			get
			{
				return this._TenantPetitionInfo.Entity;
			}
			set
			{
				TenantPetitionInfo previousValue = this._TenantPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantPetitionInfo.Entity = null;
						previousValue.TenantPetitionGroundInfos.Remove(this);
					}
					this._TenantPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.TenantPetitionGroundInfos.Add(this);
						this._TenantPetitionID = value.TenantPetitionID;
					}
					else
					{
						this._TenantPetitionID = default(int);
					}
					this.SendPropertyChanged("TenantPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantRentalIncrementInfo")]
	public partial class TenantRentalIncrementInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentalIncreaseInfoID;
		
		private int _TenantPetitionID;
		
		private System.Nullable<bool> _bRentIncreaseNoticeGiven;
		
		private System.Nullable<System.DateTime> _RentIncreaseNoticeDate;
		
		private System.Nullable<System.DateTime> _RentIncreaseEffectiveDate;
		
		private System.Nullable<decimal> _RentIncreasedFrom;
		
		private System.Nullable<decimal> _RentIncreasedTo;
		
		private System.Nullable<bool> _bRentIncreaseContested;
		
		private EntityRef<TenantPetitionInfo> _TenantPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentalIncreaseInfoIDChanging(int value);
    partial void OnRentalIncreaseInfoIDChanged();
    partial void OnTenantPetitionIDChanging(int value);
    partial void OnTenantPetitionIDChanged();
    partial void OnbRentIncreaseNoticeGivenChanging(System.Nullable<bool> value);
    partial void OnbRentIncreaseNoticeGivenChanged();
    partial void OnRentIncreaseNoticeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseNoticeDateChanged();
    partial void OnRentIncreaseEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseEffectiveDateChanged();
    partial void OnRentIncreasedFromChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedFromChanged();
    partial void OnRentIncreasedToChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedToChanged();
    partial void OnbRentIncreaseContestedChanging(System.Nullable<bool> value);
    partial void OnbRentIncreaseContestedChanged();
    #endregion
		
		public TenantRentalIncrementInfo()
		{
			this._TenantPetitionInfo = default(EntityRef<TenantPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalIncreaseInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentalIncreaseInfoID
		{
			get
			{
				return this._RentalIncreaseInfoID;
			}
			set
			{
				if ((this._RentalIncreaseInfoID != value))
				{
					this.OnRentalIncreaseInfoIDChanging(value);
					this.SendPropertyChanging();
					this._RentalIncreaseInfoID = value;
					this.SendPropertyChanged("RentalIncreaseInfoID");
					this.OnRentalIncreaseInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", DbType="Int NOT NULL")]
		public int TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					if (this._TenantPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentIncreaseNoticeGiven", DbType="Bit")]
		public System.Nullable<bool> bRentIncreaseNoticeGiven
		{
			get
			{
				return this._bRentIncreaseNoticeGiven;
			}
			set
			{
				if ((this._bRentIncreaseNoticeGiven != value))
				{
					this.OnbRentIncreaseNoticeGivenChanging(value);
					this.SendPropertyChanging();
					this._bRentIncreaseNoticeGiven = value;
					this.SendPropertyChanged("bRentIncreaseNoticeGiven");
					this.OnbRentIncreaseNoticeGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseNoticeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseNoticeDate
		{
			get
			{
				return this._RentIncreaseNoticeDate;
			}
			set
			{
				if ((this._RentIncreaseNoticeDate != value))
				{
					this.OnRentIncreaseNoticeDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseNoticeDate = value;
					this.SendPropertyChanged("RentIncreaseNoticeDate");
					this.OnRentIncreaseNoticeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseEffectiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseEffectiveDate
		{
			get
			{
				return this._RentIncreaseEffectiveDate;
			}
			set
			{
				if ((this._RentIncreaseEffectiveDate != value))
				{
					this.OnRentIncreaseEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseEffectiveDate = value;
					this.SendPropertyChanged("RentIncreaseEffectiveDate");
					this.OnRentIncreaseEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedFrom", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedFrom
		{
			get
			{
				return this._RentIncreasedFrom;
			}
			set
			{
				if ((this._RentIncreasedFrom != value))
				{
					this.OnRentIncreasedFromChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedFrom = value;
					this.SendPropertyChanged("RentIncreasedFrom");
					this.OnRentIncreasedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedTo", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedTo
		{
			get
			{
				return this._RentIncreasedTo;
			}
			set
			{
				if ((this._RentIncreasedTo != value))
				{
					this.OnRentIncreasedToChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedTo = value;
					this.SendPropertyChanged("RentIncreasedTo");
					this.OnRentIncreasedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentIncreaseContested", DbType="Bit")]
		public System.Nullable<bool> bRentIncreaseContested
		{
			get
			{
				return this._bRentIncreaseContested;
			}
			set
			{
				if ((this._bRentIncreaseContested != value))
				{
					this.OnbRentIncreaseContestedChanging(value);
					this.SendPropertyChanging();
					this._bRentIncreaseContested = value;
					this.SendPropertyChanged("bRentIncreaseContested");
					this.OnbRentIncreaseContestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantRentalIncrementInfo", Storage="_TenantPetitionInfo", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID", IsForeignKey=true)]
		public TenantPetitionInfo TenantPetitionInfo
		{
			get
			{
				return this._TenantPetitionInfo.Entity;
			}
			set
			{
				TenantPetitionInfo previousValue = this._TenantPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantPetitionInfo.Entity = null;
						previousValue.TenantRentalIncrementInfos.Remove(this);
					}
					this._TenantPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.TenantRentalIncrementInfos.Add(this);
						this._TenantPetitionID = value.TenantPetitionID;
					}
					else
					{
						this._TenantPetitionID = default(int);
					}
					this.SendPropertyChanged("TenantPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppealGrounds")]
	public partial class AppealGround : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppealGroundID;
		
		private string _AppealDescription;
		
		private EntitySet<TenantAppealGroundInfo> _TenantAppealGroundInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppealGroundIDChanging(int value);
    partial void OnAppealGroundIDChanged();
    partial void OnAppealDescriptionChanging(string value);
    partial void OnAppealDescriptionChanged();
    #endregion
		
		public AppealGround()
		{
			this._TenantAppealGroundInfos = new EntitySet<TenantAppealGroundInfo>(new Action<TenantAppealGroundInfo>(this.attach_TenantAppealGroundInfos), new Action<TenantAppealGroundInfo>(this.detach_TenantAppealGroundInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealGroundID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppealGroundID
		{
			get
			{
				return this._AppealGroundID;
			}
			set
			{
				if ((this._AppealGroundID != value))
				{
					this.OnAppealGroundIDChanging(value);
					this.SendPropertyChanging();
					this._AppealGroundID = value;
					this.SendPropertyChanged("AppealGroundID");
					this.OnAppealGroundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AppealDescription
		{
			get
			{
				return this._AppealDescription;
			}
			set
			{
				if ((this._AppealDescription != value))
				{
					this.OnAppealDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AppealDescription = value;
					this.SendPropertyChanged("AppealDescription");
					this.OnAppealDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppealGround_TenantAppealGroundInfo", Storage="_TenantAppealGroundInfos", ThisKey="AppealGroundID", OtherKey="AppealGroundID")]
		public EntitySet<TenantAppealGroundInfo> TenantAppealGroundInfos
		{
			get
			{
				return this._TenantAppealGroundInfos;
			}
			set
			{
				this._TenantAppealGroundInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TenantAppealGroundInfos(TenantAppealGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.AppealGround = this;
		}
		
		private void detach_TenantAppealGroundInfos(TenantAppealGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.AppealGround = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantAppealGroundInfo")]
	public partial class TenantAppealGroundInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantAppealGroudID;
		
		private int _AppealID;
		
		private int _AppealGroundID;
		
		private bool _IsDeleted;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<AppealGround> _AppealGround;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantAppealGroudIDChanging(int value);
    partial void OnTenantAppealGroudIDChanged();
    partial void OnAppealIDChanging(int value);
    partial void OnAppealIDChanged();
    partial void OnAppealGroundIDChanging(int value);
    partial void OnAppealGroundIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TenantAppealGroundInfo()
		{
			this._AppealGround = default(EntityRef<AppealGround>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantAppealGroudID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantAppealGroudID
		{
			get
			{
				return this._TenantAppealGroudID;
			}
			set
			{
				if ((this._TenantAppealGroudID != value))
				{
					this.OnTenantAppealGroudIDChanging(value);
					this.SendPropertyChanging();
					this._TenantAppealGroudID = value;
					this.SendPropertyChanged("TenantAppealGroudID");
					this.OnTenantAppealGroudIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealID", DbType="Int NOT NULL")]
		public int AppealID
		{
			get
			{
				return this._AppealID;
			}
			set
			{
				if ((this._AppealID != value))
				{
					this.OnAppealIDChanging(value);
					this.SendPropertyChanging();
					this._AppealID = value;
					this.SendPropertyChanged("AppealID");
					this.OnAppealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealGroundID", DbType="Int NOT NULL")]
		public int AppealGroundID
		{
			get
			{
				return this._AppealGroundID;
			}
			set
			{
				if ((this._AppealGroundID != value))
				{
					if (this._AppealGround.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppealGroundIDChanging(value);
					this.SendPropertyChanging();
					this._AppealGroundID = value;
					this.SendPropertyChanged("AppealGroundID");
					this.OnAppealGroundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppealGround_TenantAppealGroundInfo", Storage="_AppealGround", ThisKey="AppealGroundID", OtherKey="AppealGroundID", IsForeignKey=true)]
		public AppealGround AppealGround
		{
			get
			{
				return this._AppealGround.Entity;
			}
			set
			{
				AppealGround previousValue = this._AppealGround.Entity;
				if (((previousValue != value) 
							|| (this._AppealGround.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppealGround.Entity = null;
						previousValue.TenantAppealGroundInfos.Remove(this);
					}
					this._AppealGround.Entity = value;
					if ((value != null))
					{
						value.TenantAppealGroundInfos.Add(this);
						this._AppealGroundID = value.AppealGroundID;
					}
					else
					{
						this._AppealGroundID = default(int);
					}
					this.SendPropertyChanged("AppealGround");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionTenantInfo")]
	public partial class OwnerPetitionTenantInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantInfoID;
		
		private int _OwnerPropertyID;
		
		private int _TenantUserID;
		
		private EntityRef<OwnerPetitionPropertyInfo> _OwnerPetitionPropertyInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantInfoIDChanging(int value);
    partial void OnTenantInfoIDChanged();
    partial void OnOwnerPropertyIDChanging(int value);
    partial void OnOwnerPropertyIDChanged();
    partial void OnTenantUserIDChanging(int value);
    partial void OnTenantUserIDChanged();
    #endregion
		
		public OwnerPetitionTenantInfo()
		{
			this._OwnerPetitionPropertyInfo = default(EntityRef<OwnerPetitionPropertyInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantInfoID
		{
			get
			{
				return this._TenantInfoID;
			}
			set
			{
				if ((this._TenantInfoID != value))
				{
					this.OnTenantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._TenantInfoID = value;
					this.SendPropertyChanged("TenantInfoID");
					this.OnTenantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPropertyID", DbType="Int NOT NULL")]
		public int OwnerPropertyID
		{
			get
			{
				return this._OwnerPropertyID;
			}
			set
			{
				if ((this._OwnerPropertyID != value))
				{
					if (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPropertyID = value;
					this.SendPropertyChanged("OwnerPropertyID");
					this.OnOwnerPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantUserID", DbType="Int NOT NULL")]
		public int TenantUserID
		{
			get
			{
				return this._TenantUserID;
			}
			set
			{
				if ((this._TenantUserID != value))
				{
					this.OnTenantUserIDChanging(value);
					this.SendPropertyChanging();
					this._TenantUserID = value;
					this.SendPropertyChanged("TenantUserID");
					this.OnTenantUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionTenantInfo", Storage="_OwnerPetitionPropertyInfo", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID", IsForeignKey=true)]
		public OwnerPetitionPropertyInfo OwnerPetitionPropertyInfo
		{
			get
			{
				return this._OwnerPetitionPropertyInfo.Entity;
			}
			set
			{
				OwnerPetitionPropertyInfo previousValue = this._OwnerPetitionPropertyInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionPropertyInfo.Entity = null;
						previousValue.OwnerPetitionTenantInfos.Remove(this);
					}
					this._OwnerPetitionPropertyInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionTenantInfos.Add(this);
						this._OwnerPropertyID = value.OwnerPropertyID;
					}
					else
					{
						this._OwnerPropertyID = default(int);
					}
					this.SendPropertyChanged("OwnerPetitionPropertyInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PetitionDetails")]
	public partial class PetitionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PetitionID;
		
		private System.Nullable<int> _TenantPetitionID;
		
		private System.Nullable<int> _OwnerPetitionID;
		
		private EntitySet<CaseDetail> _CaseDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPetitionIDChanging(int value);
    partial void OnPetitionIDChanged();
    partial void OnTenantPetitionIDChanging(System.Nullable<int> value);
    partial void OnTenantPetitionIDChanged();
    partial void OnOwnerPetitionIDChanging(System.Nullable<int> value);
    partial void OnOwnerPetitionIDChanged();
    #endregion
		
		public PetitionDetail()
		{
			this._CaseDetails = new EntitySet<CaseDetail>(new Action<CaseDetail>(this.attach_CaseDetails), new Action<CaseDetail>(this.detach_CaseDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PetitionID
		{
			get
			{
				return this._PetitionID;
			}
			set
			{
				if ((this._PetitionID != value))
				{
					this.OnPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionID = value;
					this.SendPropertyChanged("PetitionID");
					this.OnPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", DbType="Int")]
		public System.Nullable<int> TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPetitionID", DbType="Int")]
		public System.Nullable<int> OwnerPetitionID
		{
			get
			{
				return this._OwnerPetitionID;
			}
			set
			{
				if ((this._OwnerPetitionID != value))
				{
					this.OnOwnerPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPetitionID = value;
					this.SendPropertyChanged("OwnerPetitionID");
					this.OnOwnerPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionDetail_CaseDetail", Storage="_CaseDetails", ThisKey="PetitionID", OtherKey="PetitionID")]
		public EntitySet<CaseDetail> CaseDetails
		{
			get
			{
				return this._CaseDetails;
			}
			set
			{
				this._CaseDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.PetitionDetail = this;
		}
		
		private void detach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.PetitionDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PetitionCategory")]
	public partial class PetitionCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PetitionCategoryID;
		
		private string _PetitionCategory1;
		
		private EntitySet<CaseDetail> _CaseDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPetitionCategoryIDChanging(int value);
    partial void OnPetitionCategoryIDChanged();
    partial void OnPetitionCategory1Changing(string value);
    partial void OnPetitionCategory1Changed();
    #endregion
		
		public PetitionCategory()
		{
			this._CaseDetails = new EntitySet<CaseDetail>(new Action<CaseDetail>(this.attach_CaseDetails), new Action<CaseDetail>(this.detach_CaseDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PetitionCategoryID
		{
			get
			{
				return this._PetitionCategoryID;
			}
			set
			{
				if ((this._PetitionCategoryID != value))
				{
					this.OnPetitionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionCategoryID = value;
					this.SendPropertyChanged("PetitionCategoryID");
					this.OnPetitionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PetitionCategory", Storage="_PetitionCategory1", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PetitionCategory1
		{
			get
			{
				return this._PetitionCategory1;
			}
			set
			{
				if ((this._PetitionCategory1 != value))
				{
					this.OnPetitionCategory1Changing(value);
					this.SendPropertyChanging();
					this._PetitionCategory1 = value;
					this.SendPropertyChanged("PetitionCategory1");
					this.OnPetitionCategory1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionCategory_CaseDetail", Storage="_CaseDetails", ThisKey="PetitionCategoryID", OtherKey="PetitionCategoryID")]
		public EntitySet<CaseDetail> CaseDetails
		{
			get
			{
				return this._CaseDetails;
			}
			set
			{
				this._CaseDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.PetitionCategory = this;
		}
		
		private void detach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.PetitionCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerRentIncreaseReasonInfo")]
	public partial class OwnerRentIncreaseReasonInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentIncreaseReasonInfoID;
		
		private int _OwnerPetitionApplicantInfoID;
		
		private int _ReasonID;
		
		private EntityRef<OwnerPetitionApplicantInfo> _OwnerPetitionApplicantInfo;
		
		private EntityRef<OwnerRentIncreaseReason> _OwnerRentIncreaseReason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentIncreaseReasonInfoIDChanging(int value);
    partial void OnRentIncreaseReasonInfoIDChanged();
    partial void OnOwnerPetitionApplicantInfoIDChanging(int value);
    partial void OnOwnerPetitionApplicantInfoIDChanged();
    partial void OnReasonIDChanging(int value);
    partial void OnReasonIDChanged();
    #endregion
		
		public OwnerRentIncreaseReasonInfo()
		{
			this._OwnerPetitionApplicantInfo = default(EntityRef<OwnerPetitionApplicantInfo>);
			this._OwnerRentIncreaseReason = default(EntityRef<OwnerRentIncreaseReason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseReasonInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentIncreaseReasonInfoID
		{
			get
			{
				return this._RentIncreaseReasonInfoID;
			}
			set
			{
				if ((this._RentIncreaseReasonInfoID != value))
				{
					this.OnRentIncreaseReasonInfoIDChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseReasonInfoID = value;
					this.SendPropertyChanged("RentIncreaseReasonInfoID");
					this.OnRentIncreaseReasonInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPetitionApplicantInfoID", DbType="Int NOT NULL")]
		public int OwnerPetitionApplicantInfoID
		{
			get
			{
				return this._OwnerPetitionApplicantInfoID;
			}
			set
			{
				if ((this._OwnerPetitionApplicantInfoID != value))
				{
					if (this._OwnerPetitionApplicantInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPetitionApplicantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPetitionApplicantInfoID = value;
					this.SendPropertyChanged("OwnerPetitionApplicantInfoID");
					this.OnOwnerPetitionApplicantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonID", DbType="Int NOT NULL")]
		public int ReasonID
		{
			get
			{
				return this._ReasonID;
			}
			set
			{
				if ((this._ReasonID != value))
				{
					if (this._OwnerRentIncreaseReason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReasonIDChanging(value);
					this.SendPropertyChanging();
					this._ReasonID = value;
					this.SendPropertyChanged("ReasonID");
					this.OnReasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionApplicantInfo_OwnerRentIncreaseReasonInfo", Storage="_OwnerPetitionApplicantInfo", ThisKey="OwnerPetitionApplicantInfoID", OtherKey="OwnerPetitionApplicantInfoID", IsForeignKey=true)]
		public OwnerPetitionApplicantInfo OwnerPetitionApplicantInfo
		{
			get
			{
				return this._OwnerPetitionApplicantInfo.Entity;
			}
			set
			{
				OwnerPetitionApplicantInfo previousValue = this._OwnerPetitionApplicantInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionApplicantInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionApplicantInfo.Entity = null;
						previousValue.OwnerRentIncreaseReasonInfos.Remove(this);
					}
					this._OwnerPetitionApplicantInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerRentIncreaseReasonInfos.Add(this);
						this._OwnerPetitionApplicantInfoID = value.OwnerPetitionApplicantInfoID;
					}
					else
					{
						this._OwnerPetitionApplicantInfoID = default(int);
					}
					this.SendPropertyChanged("OwnerPetitionApplicantInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerRentIncreaseReason_OwnerRentIncreaseReasonInfo", Storage="_OwnerRentIncreaseReason", ThisKey="ReasonID", OtherKey="ReasonID", IsForeignKey=true)]
		public OwnerRentIncreaseReason OwnerRentIncreaseReason
		{
			get
			{
				return this._OwnerRentIncreaseReason.Entity;
			}
			set
			{
				OwnerRentIncreaseReason previousValue = this._OwnerRentIncreaseReason.Entity;
				if (((previousValue != value) 
							|| (this._OwnerRentIncreaseReason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerRentIncreaseReason.Entity = null;
						previousValue.OwnerRentIncreaseReasonInfos.Remove(this);
					}
					this._OwnerRentIncreaseReason.Entity = value;
					if ((value != null))
					{
						value.OwnerRentIncreaseReasonInfos.Add(this);
						this._ReasonID = value.ReasonID;
					}
					else
					{
						this._ReasonID = default(int);
					}
					this.SendPropertyChanged("OwnerRentIncreaseReason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NumberRangeForUnits")]
	public partial class NumberRangeForUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RangeID;
		
		private string _RangeDesc;
		
		private EntitySet<TenantPetitionInfo> _TenantPetitionInfos;
		
		private EntitySet<TenantResponseApplicationInfo> _TenantResponseApplicationInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRangeIDChanging(int value);
    partial void OnRangeIDChanged();
    partial void OnRangeDescChanging(string value);
    partial void OnRangeDescChanged();
    #endregion
		
		public NumberRangeForUnit()
		{
			this._TenantPetitionInfos = new EntitySet<TenantPetitionInfo>(new Action<TenantPetitionInfo>(this.attach_TenantPetitionInfos), new Action<TenantPetitionInfo>(this.detach_TenantPetitionInfos));
			this._TenantResponseApplicationInfos = new EntitySet<TenantResponseApplicationInfo>(new Action<TenantResponseApplicationInfo>(this.attach_TenantResponseApplicationInfos), new Action<TenantResponseApplicationInfo>(this.detach_TenantResponseApplicationInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RangeID
		{
			get
			{
				return this._RangeID;
			}
			set
			{
				if ((this._RangeID != value))
				{
					this.OnRangeIDChanging(value);
					this.SendPropertyChanging();
					this._RangeID = value;
					this.SendPropertyChanged("RangeID");
					this.OnRangeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangeDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RangeDesc
		{
			get
			{
				return this._RangeDesc;
			}
			set
			{
				if ((this._RangeDesc != value))
				{
					this.OnRangeDescChanging(value);
					this.SendPropertyChanging();
					this._RangeDesc = value;
					this.SendPropertyChanged("RangeDesc");
					this.OnRangeDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NumberRangeForUnit_TenantPetitionInfo", Storage="_TenantPetitionInfos", ThisKey="RangeID", OtherKey="RangeID")]
		public EntitySet<TenantPetitionInfo> TenantPetitionInfos
		{
			get
			{
				return this._TenantPetitionInfos;
			}
			set
			{
				this._TenantPetitionInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NumberRangeForUnit_TenantResponseApplicationInfo", Storage="_TenantResponseApplicationInfos", ThisKey="RangeID", OtherKey="RangeID")]
		public EntitySet<TenantResponseApplicationInfo> TenantResponseApplicationInfos
		{
			get
			{
				return this._TenantResponseApplicationInfos;
			}
			set
			{
				this._TenantResponseApplicationInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TenantPetitionInfos(TenantPetitionInfo entity)
		{
			this.SendPropertyChanging();
			entity.NumberRangeForUnit = this;
		}
		
		private void detach_TenantPetitionInfos(TenantPetitionInfo entity)
		{
			this.SendPropertyChanging();
			entity.NumberRangeForUnit = null;
		}
		
		private void attach_TenantResponseApplicationInfos(TenantResponseApplicationInfo entity)
		{
			this.SendPropertyChanging();
			entity.NumberRangeForUnit = this;
		}
		
		private void detach_TenantResponseApplicationInfos(TenantResponseApplicationInfo entity)
		{
			this.SendPropertyChanging();
			entity.NumberRangeForUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantProblemInfo")]
	public partial class TenantProblemInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemInfoID;
		
		private int _TenantPetitionID;
		
		private string _ProblemDescription;
		
		private System.Nullable<decimal> _EstimatedLoss;
		
		private System.DateTime _ProblemBeganDate;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private EntityRef<TenantPetitionInfo> _TenantPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemInfoIDChanging(int value);
    partial void OnProblemInfoIDChanged();
    partial void OnTenantPetitionIDChanging(int value);
    partial void OnTenantPetitionIDChanged();
    partial void OnProblemDescriptionChanging(string value);
    partial void OnProblemDescriptionChanged();
    partial void OnEstimatedLossChanging(System.Nullable<decimal> value);
    partial void OnEstimatedLossChanged();
    partial void OnProblemBeganDateChanging(System.DateTime value);
    partial void OnProblemBeganDateChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TenantProblemInfo()
		{
			this._TenantPetitionInfo = default(EntityRef<TenantPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProblemInfoID
		{
			get
			{
				return this._ProblemInfoID;
			}
			set
			{
				if ((this._ProblemInfoID != value))
				{
					this.OnProblemInfoIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemInfoID = value;
					this.SendPropertyChanged("ProblemInfoID");
					this.OnProblemInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", DbType="Int NOT NULL")]
		public int TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					if (this._TenantPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProblemDescription
		{
			get
			{
				return this._ProblemDescription;
			}
			set
			{
				if ((this._ProblemDescription != value))
				{
					this.OnProblemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProblemDescription = value;
					this.SendPropertyChanged("ProblemDescription");
					this.OnProblemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedLoss", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> EstimatedLoss
		{
			get
			{
				return this._EstimatedLoss;
			}
			set
			{
				if ((this._EstimatedLoss != value))
				{
					this.OnEstimatedLossChanging(value);
					this.SendPropertyChanging();
					this._EstimatedLoss = value;
					this.SendPropertyChanged("EstimatedLoss");
					this.OnEstimatedLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemBeganDate", DbType="DateTime NOT NULL")]
		public System.DateTime ProblemBeganDate
		{
			get
			{
				return this._ProblemBeganDate;
			}
			set
			{
				if ((this._ProblemBeganDate != value))
				{
					this.OnProblemBeganDateChanging(value);
					this.SendPropertyChanging();
					this._ProblemBeganDate = value;
					this.SendPropertyChanged("ProblemBeganDate");
					this.OnProblemBeganDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantProblemInfo", Storage="_TenantPetitionInfo", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID", IsForeignKey=true)]
		public TenantPetitionInfo TenantPetitionInfo
		{
			get
			{
				return this._TenantPetitionInfo.Entity;
			}
			set
			{
				TenantPetitionInfo previousValue = this._TenantPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantPetitionInfo.Entity = null;
						previousValue.TenantProblemInfos.Remove(this);
					}
					this._TenantPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.TenantProblemInfos.Add(this);
						this._TenantPetitionID = value.TenantPetitionID;
					}
					else
					{
						this._TenantPetitionID = default(int);
					}
					this.SendPropertyChanged("TenantPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantLostServiceInfo")]
	public partial class TenantLostServiceInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LostServiceInfoID;
		
		private int _TenantPetitionID;
		
		private string _ReducedServiceDescription;
		
		private System.Nullable<decimal> _EstimatedLoss;
		
		private System.DateTime _LossBeganDate;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private EntityRef<TenantPetitionInfo> _TenantPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLostServiceInfoIDChanging(int value);
    partial void OnLostServiceInfoIDChanged();
    partial void OnTenantPetitionIDChanging(int value);
    partial void OnTenantPetitionIDChanged();
    partial void OnReducedServiceDescriptionChanging(string value);
    partial void OnReducedServiceDescriptionChanged();
    partial void OnEstimatedLossChanging(System.Nullable<decimal> value);
    partial void OnEstimatedLossChanged();
    partial void OnLossBeganDateChanging(System.DateTime value);
    partial void OnLossBeganDateChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TenantLostServiceInfo()
		{
			this._TenantPetitionInfo = default(EntityRef<TenantPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LostServiceInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LostServiceInfoID
		{
			get
			{
				return this._LostServiceInfoID;
			}
			set
			{
				if ((this._LostServiceInfoID != value))
				{
					this.OnLostServiceInfoIDChanging(value);
					this.SendPropertyChanging();
					this._LostServiceInfoID = value;
					this.SendPropertyChanged("LostServiceInfoID");
					this.OnLostServiceInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", DbType="Int NOT NULL")]
		public int TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					if (this._TenantPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReducedServiceDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ReducedServiceDescription
		{
			get
			{
				return this._ReducedServiceDescription;
			}
			set
			{
				if ((this._ReducedServiceDescription != value))
				{
					this.OnReducedServiceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ReducedServiceDescription = value;
					this.SendPropertyChanged("ReducedServiceDescription");
					this.OnReducedServiceDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedLoss", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> EstimatedLoss
		{
			get
			{
				return this._EstimatedLoss;
			}
			set
			{
				if ((this._EstimatedLoss != value))
				{
					this.OnEstimatedLossChanging(value);
					this.SendPropertyChanging();
					this._EstimatedLoss = value;
					this.SendPropertyChanged("EstimatedLoss");
					this.OnEstimatedLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LossBeganDate", DbType="DateTime NOT NULL")]
		public System.DateTime LossBeganDate
		{
			get
			{
				return this._LossBeganDate;
			}
			set
			{
				if ((this._LossBeganDate != value))
				{
					this.OnLossBeganDateChanging(value);
					this.SendPropertyChanging();
					this._LossBeganDate = value;
					this.SendPropertyChanged("LossBeganDate");
					this.OnLossBeganDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantLostServiceInfo", Storage="_TenantPetitionInfo", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID", IsForeignKey=true)]
		public TenantPetitionInfo TenantPetitionInfo
		{
			get
			{
				return this._TenantPetitionInfo.Entity;
			}
			set
			{
				TenantPetitionInfo previousValue = this._TenantPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantPetitionInfo.Entity = null;
						previousValue.TenantLostServiceInfos.Remove(this);
					}
					this._TenantPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.TenantLostServiceInfos.Add(this);
						this._TenantPetitionID = value.TenantPetitionID;
					}
					else
					{
						this._TenantPetitionID = default(int);
					}
					this.SendPropertyChanged("TenantPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionRentalIncrementInfo")]
	public partial class OwnerPetitionRentalIncrementInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentalIncreaseInfoID;
		
		private int _OwnerPropertyID;
		
		private System.Nullable<bool> _bRentIncreaseNoticeGiven;
		
		private System.Nullable<System.DateTime> _RentIncreaseNoticeDate;
		
		private System.Nullable<System.DateTime> _RentIncreaseEffectiveDate;
		
		private System.Nullable<decimal> _RentIncreasedFrom;
		
		private System.Nullable<decimal> _RentIncreasedTo;
		
		private EntityRef<OwnerPetitionPropertyInfo> _OwnerPetitionPropertyInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentalIncreaseInfoIDChanging(int value);
    partial void OnRentalIncreaseInfoIDChanged();
    partial void OnOwnerPropertyIDChanging(int value);
    partial void OnOwnerPropertyIDChanged();
    partial void OnbRentIncreaseNoticeGivenChanging(System.Nullable<bool> value);
    partial void OnbRentIncreaseNoticeGivenChanged();
    partial void OnRentIncreaseNoticeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseNoticeDateChanged();
    partial void OnRentIncreaseEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseEffectiveDateChanged();
    partial void OnRentIncreasedFromChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedFromChanged();
    partial void OnRentIncreasedToChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedToChanged();
    #endregion
		
		public OwnerPetitionRentalIncrementInfo()
		{
			this._OwnerPetitionPropertyInfo = default(EntityRef<OwnerPetitionPropertyInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalIncreaseInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentalIncreaseInfoID
		{
			get
			{
				return this._RentalIncreaseInfoID;
			}
			set
			{
				if ((this._RentalIncreaseInfoID != value))
				{
					this.OnRentalIncreaseInfoIDChanging(value);
					this.SendPropertyChanging();
					this._RentalIncreaseInfoID = value;
					this.SendPropertyChanged("RentalIncreaseInfoID");
					this.OnRentalIncreaseInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPropertyID", DbType="Int NOT NULL")]
		public int OwnerPropertyID
		{
			get
			{
				return this._OwnerPropertyID;
			}
			set
			{
				if ((this._OwnerPropertyID != value))
				{
					if (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPropertyID = value;
					this.SendPropertyChanged("OwnerPropertyID");
					this.OnOwnerPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentIncreaseNoticeGiven", DbType="Bit")]
		public System.Nullable<bool> bRentIncreaseNoticeGiven
		{
			get
			{
				return this._bRentIncreaseNoticeGiven;
			}
			set
			{
				if ((this._bRentIncreaseNoticeGiven != value))
				{
					this.OnbRentIncreaseNoticeGivenChanging(value);
					this.SendPropertyChanging();
					this._bRentIncreaseNoticeGiven = value;
					this.SendPropertyChanged("bRentIncreaseNoticeGiven");
					this.OnbRentIncreaseNoticeGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseNoticeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseNoticeDate
		{
			get
			{
				return this._RentIncreaseNoticeDate;
			}
			set
			{
				if ((this._RentIncreaseNoticeDate != value))
				{
					this.OnRentIncreaseNoticeDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseNoticeDate = value;
					this.SendPropertyChanged("RentIncreaseNoticeDate");
					this.OnRentIncreaseNoticeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseEffectiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseEffectiveDate
		{
			get
			{
				return this._RentIncreaseEffectiveDate;
			}
			set
			{
				if ((this._RentIncreaseEffectiveDate != value))
				{
					this.OnRentIncreaseEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseEffectiveDate = value;
					this.SendPropertyChanged("RentIncreaseEffectiveDate");
					this.OnRentIncreaseEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedFrom", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedFrom
		{
			get
			{
				return this._RentIncreasedFrom;
			}
			set
			{
				if ((this._RentIncreasedFrom != value))
				{
					this.OnRentIncreasedFromChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedFrom = value;
					this.SendPropertyChanged("RentIncreasedFrom");
					this.OnRentIncreasedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedTo", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedTo
		{
			get
			{
				return this._RentIncreasedTo;
			}
			set
			{
				if ((this._RentIncreasedTo != value))
				{
					this.OnRentIncreasedToChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedTo = value;
					this.SendPropertyChanged("RentIncreasedTo");
					this.OnRentIncreasedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionRentalIncrementInfo", Storage="_OwnerPetitionPropertyInfo", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID", IsForeignKey=true)]
		public OwnerPetitionPropertyInfo OwnerPetitionPropertyInfo
		{
			get
			{
				return this._OwnerPetitionPropertyInfo.Entity;
			}
			set
			{
				OwnerPetitionPropertyInfo previousValue = this._OwnerPetitionPropertyInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionPropertyInfo.Entity = null;
						previousValue.OwnerPetitionRentalIncrementInfos.Remove(this);
					}
					this._OwnerPetitionPropertyInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionRentalIncrementInfos.Add(this);
						this._OwnerPropertyID = value.OwnerPropertyID;
					}
					else
					{
						this._OwnerPropertyID = default(int);
					}
					this.SendPropertyChanged("OwnerPetitionPropertyInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RAPNoticeStatus")]
	public partial class RAPNoticeStatus
	{
		
		private int _RAPNoticeStatusID;
		
		private string _RAPNoticeStatus1;
		
		public RAPNoticeStatus()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAPNoticeStatusID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int RAPNoticeStatusID
		{
			get
			{
				return this._RAPNoticeStatusID;
			}
			set
			{
				if ((this._RAPNoticeStatusID != value))
				{
					this._RAPNoticeStatusID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RAPNoticeStatus", Storage="_RAPNoticeStatus1", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RAPNoticeStatus1
		{
			get
			{
				return this._RAPNoticeStatus1;
			}
			set
			{
				if ((this._RAPNoticeStatus1 != value))
				{
					this._RAPNoticeStatus1 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionInfo")]
	public partial class OwnerPetitionInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerPetitionID;
		
		private int _OwnerPetitionApplicantInfoID;
		
		private System.Nullable<int> _OwnerPropertyID;
		
		private System.Nullable<bool> _bPetitionFiledByThirdParty;
		
		private System.Nullable<bool> _bAgreeToCityMediation;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _LastModifiedBy;
		
		private System.Nullable<System.DateTime> _LastModifiedDate;
		
		private EntitySet<OwnerPetitionVerification> _OwnerPetitionVerifications;
		
		private EntityRef<OwnerPetitionPropertyInfo> _OwnerPetitionPropertyInfo;
		
		private EntityRef<OwnerPetitionApplicantInfo> _OwnerPetitionApplicantInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerPetitionIDChanging(int value);
    partial void OnOwnerPetitionIDChanged();
    partial void OnOwnerPetitionApplicantInfoIDChanging(int value);
    partial void OnOwnerPetitionApplicantInfoIDChanged();
    partial void OnOwnerPropertyIDChanging(System.Nullable<int> value);
    partial void OnOwnerPropertyIDChanged();
    partial void OnbPetitionFiledByThirdPartyChanging(System.Nullable<bool> value);
    partial void OnbPetitionFiledByThirdPartyChanged();
    partial void OnbAgreeToCityMediationChanging(System.Nullable<bool> value);
    partial void OnbAgreeToCityMediationChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    partial void OnLastModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDateChanged();
    #endregion
		
		public OwnerPetitionInfo()
		{
			this._OwnerPetitionVerifications = new EntitySet<OwnerPetitionVerification>(new Action<OwnerPetitionVerification>(this.attach_OwnerPetitionVerifications), new Action<OwnerPetitionVerification>(this.detach_OwnerPetitionVerifications));
			this._OwnerPetitionPropertyInfo = default(EntityRef<OwnerPetitionPropertyInfo>);
			this._OwnerPetitionApplicantInfo = default(EntityRef<OwnerPetitionApplicantInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPetitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerPetitionID
		{
			get
			{
				return this._OwnerPetitionID;
			}
			set
			{
				if ((this._OwnerPetitionID != value))
				{
					this.OnOwnerPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPetitionID = value;
					this.SendPropertyChanged("OwnerPetitionID");
					this.OnOwnerPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPetitionApplicantInfoID", DbType="Int NOT NULL")]
		public int OwnerPetitionApplicantInfoID
		{
			get
			{
				return this._OwnerPetitionApplicantInfoID;
			}
			set
			{
				if ((this._OwnerPetitionApplicantInfoID != value))
				{
					if (this._OwnerPetitionApplicantInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPetitionApplicantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPetitionApplicantInfoID = value;
					this.SendPropertyChanged("OwnerPetitionApplicantInfoID");
					this.OnOwnerPetitionApplicantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPropertyID", DbType="Int")]
		public System.Nullable<int> OwnerPropertyID
		{
			get
			{
				return this._OwnerPropertyID;
			}
			set
			{
				if ((this._OwnerPropertyID != value))
				{
					if (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPropertyID = value;
					this.SendPropertyChanged("OwnerPropertyID");
					this.OnOwnerPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPetitionFiledByThirdParty", DbType="Bit")]
		public System.Nullable<bool> bPetitionFiledByThirdParty
		{
			get
			{
				return this._bPetitionFiledByThirdParty;
			}
			set
			{
				if ((this._bPetitionFiledByThirdParty != value))
				{
					this.OnbPetitionFiledByThirdPartyChanging(value);
					this.SendPropertyChanging();
					this._bPetitionFiledByThirdParty = value;
					this.SendPropertyChanged("bPetitionFiledByThirdParty");
					this.OnbPetitionFiledByThirdPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bAgreeToCityMediation", DbType="Bit")]
		public System.Nullable<bool> bAgreeToCityMediation
		{
			get
			{
				return this._bAgreeToCityMediation;
			}
			set
			{
				if ((this._bAgreeToCityMediation != value))
				{
					this.OnbAgreeToCityMediationChanging(value);
					this.SendPropertyChanging();
					this._bAgreeToCityMediation = value;
					this.SendPropertyChanged("bAgreeToCityMediation");
					this.OnbAgreeToCityMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(25)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionInfo_OwnerPetitionVerification", Storage="_OwnerPetitionVerifications", ThisKey="OwnerPetitionID", OtherKey="PetitionID")]
		public EntitySet<OwnerPetitionVerification> OwnerPetitionVerifications
		{
			get
			{
				return this._OwnerPetitionVerifications;
			}
			set
			{
				this._OwnerPetitionVerifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionInfo", Storage="_OwnerPetitionPropertyInfo", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID", IsForeignKey=true)]
		public OwnerPetitionPropertyInfo OwnerPetitionPropertyInfo
		{
			get
			{
				return this._OwnerPetitionPropertyInfo.Entity;
			}
			set
			{
				OwnerPetitionPropertyInfo previousValue = this._OwnerPetitionPropertyInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionPropertyInfo.Entity = null;
						previousValue.OwnerPetitionInfos.Remove(this);
					}
					this._OwnerPetitionPropertyInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionInfos.Add(this);
						this._OwnerPropertyID = value.OwnerPropertyID;
					}
					else
					{
						this._OwnerPropertyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OwnerPetitionPropertyInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionApplicantInfo_OwnerPetitionInfo", Storage="_OwnerPetitionApplicantInfo", ThisKey="OwnerPetitionApplicantInfoID", OtherKey="OwnerPetitionApplicantInfoID", IsForeignKey=true)]
		public OwnerPetitionApplicantInfo OwnerPetitionApplicantInfo
		{
			get
			{
				return this._OwnerPetitionApplicantInfo.Entity;
			}
			set
			{
				OwnerPetitionApplicantInfo previousValue = this._OwnerPetitionApplicantInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionApplicantInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionApplicantInfo.Entity = null;
						previousValue.OwnerPetitionInfos.Remove(this);
					}
					this._OwnerPetitionApplicantInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionInfos.Add(this);
						this._OwnerPetitionApplicantInfoID = value.OwnerPetitionApplicantInfoID;
					}
					else
					{
						this._OwnerPetitionApplicantInfoID = default(int);
					}
					this.SendPropertyChanged("OwnerPetitionApplicantInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerPetitionVerifications(OwnerPetitionVerification entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionInfo = this;
		}
		
		private void detach_OwnerPetitionVerifications(OwnerPetitionVerification entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionPageSubmissionStatus")]
	public partial class OwnerPetitionPageSubmissionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NavigationID;
		
		private int _CustomerID;
		
		private System.Nullable<bool> _ImportantInformation;
		
		private System.Nullable<bool> _ApplicantInformation;
		
		private System.Nullable<bool> _JustificationForRentIncrease;
		
		private System.Nullable<bool> _RentalProperty;
		
		private System.Nullable<bool> _RentHistory;
		
		private System.Nullable<bool> _AdditionalDocumentation;
		
		private System.Nullable<bool> _Review;
		
		private System.Nullable<bool> _Verification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNavigationIDChanging(int value);
    partial void OnNavigationIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnImportantInformationChanging(System.Nullable<bool> value);
    partial void OnImportantInformationChanged();
    partial void OnApplicantInformationChanging(System.Nullable<bool> value);
    partial void OnApplicantInformationChanged();
    partial void OnJustificationForRentIncreaseChanging(System.Nullable<bool> value);
    partial void OnJustificationForRentIncreaseChanged();
    partial void OnRentalPropertyChanging(System.Nullable<bool> value);
    partial void OnRentalPropertyChanged();
    partial void OnRentHistoryChanging(System.Nullable<bool> value);
    partial void OnRentHistoryChanged();
    partial void OnAdditionalDocumentationChanging(System.Nullable<bool> value);
    partial void OnAdditionalDocumentationChanged();
    partial void OnReviewChanging(System.Nullable<bool> value);
    partial void OnReviewChanged();
    partial void OnVerificationChanging(System.Nullable<bool> value);
    partial void OnVerificationChanged();
    #endregion
		
		public OwnerPetitionPageSubmissionStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NavigationID
		{
			get
			{
				return this._NavigationID;
			}
			set
			{
				if ((this._NavigationID != value))
				{
					this.OnNavigationIDChanging(value);
					this.SendPropertyChanging();
					this._NavigationID = value;
					this.SendPropertyChanged("NavigationID");
					this.OnNavigationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportantInformation", DbType="Bit")]
		public System.Nullable<bool> ImportantInformation
		{
			get
			{
				return this._ImportantInformation;
			}
			set
			{
				if ((this._ImportantInformation != value))
				{
					this.OnImportantInformationChanging(value);
					this.SendPropertyChanging();
					this._ImportantInformation = value;
					this.SendPropertyChanged("ImportantInformation");
					this.OnImportantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantInformation", DbType="Bit")]
		public System.Nullable<bool> ApplicantInformation
		{
			get
			{
				return this._ApplicantInformation;
			}
			set
			{
				if ((this._ApplicantInformation != value))
				{
					this.OnApplicantInformationChanging(value);
					this.SendPropertyChanging();
					this._ApplicantInformation = value;
					this.SendPropertyChanged("ApplicantInformation");
					this.OnApplicantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JustificationForRentIncrease", DbType="Bit")]
		public System.Nullable<bool> JustificationForRentIncrease
		{
			get
			{
				return this._JustificationForRentIncrease;
			}
			set
			{
				if ((this._JustificationForRentIncrease != value))
				{
					this.OnJustificationForRentIncreaseChanging(value);
					this.SendPropertyChanging();
					this._JustificationForRentIncrease = value;
					this.SendPropertyChanged("JustificationForRentIncrease");
					this.OnJustificationForRentIncreaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalProperty", DbType="Bit")]
		public System.Nullable<bool> RentalProperty
		{
			get
			{
				return this._RentalProperty;
			}
			set
			{
				if ((this._RentalProperty != value))
				{
					this.OnRentalPropertyChanging(value);
					this.SendPropertyChanging();
					this._RentalProperty = value;
					this.SendPropertyChanged("RentalProperty");
					this.OnRentalPropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentHistory", DbType="Bit")]
		public System.Nullable<bool> RentHistory
		{
			get
			{
				return this._RentHistory;
			}
			set
			{
				if ((this._RentHistory != value))
				{
					this.OnRentHistoryChanging(value);
					this.SendPropertyChanging();
					this._RentHistory = value;
					this.SendPropertyChanged("RentHistory");
					this.OnRentHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalDocumentation", DbType="Bit")]
		public System.Nullable<bool> AdditionalDocumentation
		{
			get
			{
				return this._AdditionalDocumentation;
			}
			set
			{
				if ((this._AdditionalDocumentation != value))
				{
					this.OnAdditionalDocumentationChanging(value);
					this.SendPropertyChanging();
					this._AdditionalDocumentation = value;
					this.SendPropertyChanged("AdditionalDocumentation");
					this.OnAdditionalDocumentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Review", DbType="Bit")]
		public System.Nullable<bool> Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				if ((this._Review != value))
				{
					this.OnReviewChanging(value);
					this.SendPropertyChanging();
					this._Review = value;
					this.SendPropertyChanged("Review");
					this.OnReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verification", DbType="Bit")]
		public System.Nullable<bool> Verification
		{
			get
			{
				return this._Verification;
			}
			set
			{
				if ((this._Verification != value))
				{
					this.OnVerificationChanging(value);
					this.SendPropertyChanging();
					this._Verification = value;
					this.SendPropertyChanged("Verification");
					this.OnVerificationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantPetitionPageSubmissionStatus")]
	public partial class TenantPetitionPageSubmissionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NavigationID;
		
		private int _CustomerID;
		
		private System.Nullable<bool> _ImportantInformation;
		
		private System.Nullable<bool> _ApplicantInformation;
		
		private System.Nullable<bool> _GroundsForPetition;
		
		private System.Nullable<bool> _RentHistory;
		
		private System.Nullable<bool> _LostService;
		
		private System.Nullable<bool> _AdditionalDocumentation;
		
		private System.Nullable<bool> _Review;
		
		private System.Nullable<bool> _Verification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNavigationIDChanging(int value);
    partial void OnNavigationIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnImportantInformationChanging(System.Nullable<bool> value);
    partial void OnImportantInformationChanged();
    partial void OnApplicantInformationChanging(System.Nullable<bool> value);
    partial void OnApplicantInformationChanged();
    partial void OnGroundsForPetitionChanging(System.Nullable<bool> value);
    partial void OnGroundsForPetitionChanged();
    partial void OnRentHistoryChanging(System.Nullable<bool> value);
    partial void OnRentHistoryChanged();
    partial void OnLostServiceChanging(System.Nullable<bool> value);
    partial void OnLostServiceChanged();
    partial void OnAdditionalDocumentationChanging(System.Nullable<bool> value);
    partial void OnAdditionalDocumentationChanged();
    partial void OnReviewChanging(System.Nullable<bool> value);
    partial void OnReviewChanged();
    partial void OnVerificationChanging(System.Nullable<bool> value);
    partial void OnVerificationChanged();
    #endregion
		
		public TenantPetitionPageSubmissionStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NavigationID
		{
			get
			{
				return this._NavigationID;
			}
			set
			{
				if ((this._NavigationID != value))
				{
					this.OnNavigationIDChanging(value);
					this.SendPropertyChanging();
					this._NavigationID = value;
					this.SendPropertyChanged("NavigationID");
					this.OnNavigationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportantInformation", DbType="Bit")]
		public System.Nullable<bool> ImportantInformation
		{
			get
			{
				return this._ImportantInformation;
			}
			set
			{
				if ((this._ImportantInformation != value))
				{
					this.OnImportantInformationChanging(value);
					this.SendPropertyChanging();
					this._ImportantInformation = value;
					this.SendPropertyChanged("ImportantInformation");
					this.OnImportantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantInformation", DbType="Bit")]
		public System.Nullable<bool> ApplicantInformation
		{
			get
			{
				return this._ApplicantInformation;
			}
			set
			{
				if ((this._ApplicantInformation != value))
				{
					this.OnApplicantInformationChanging(value);
					this.SendPropertyChanging();
					this._ApplicantInformation = value;
					this.SendPropertyChanged("ApplicantInformation");
					this.OnApplicantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroundsForPetition", DbType="Bit")]
		public System.Nullable<bool> GroundsForPetition
		{
			get
			{
				return this._GroundsForPetition;
			}
			set
			{
				if ((this._GroundsForPetition != value))
				{
					this.OnGroundsForPetitionChanging(value);
					this.SendPropertyChanging();
					this._GroundsForPetition = value;
					this.SendPropertyChanged("GroundsForPetition");
					this.OnGroundsForPetitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentHistory", DbType="Bit")]
		public System.Nullable<bool> RentHistory
		{
			get
			{
				return this._RentHistory;
			}
			set
			{
				if ((this._RentHistory != value))
				{
					this.OnRentHistoryChanging(value);
					this.SendPropertyChanging();
					this._RentHistory = value;
					this.SendPropertyChanged("RentHistory");
					this.OnRentHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LostService", DbType="Bit")]
		public System.Nullable<bool> LostService
		{
			get
			{
				return this._LostService;
			}
			set
			{
				if ((this._LostService != value))
				{
					this.OnLostServiceChanging(value);
					this.SendPropertyChanging();
					this._LostService = value;
					this.SendPropertyChanged("LostService");
					this.OnLostServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalDocumentation", DbType="Bit")]
		public System.Nullable<bool> AdditionalDocumentation
		{
			get
			{
				return this._AdditionalDocumentation;
			}
			set
			{
				if ((this._AdditionalDocumentation != value))
				{
					this.OnAdditionalDocumentationChanging(value);
					this.SendPropertyChanging();
					this._AdditionalDocumentation = value;
					this.SendPropertyChanged("AdditionalDocumentation");
					this.OnAdditionalDocumentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Review", DbType="Bit")]
		public System.Nullable<bool> Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				if ((this._Review != value))
				{
					this.OnReviewChanging(value);
					this.SendPropertyChanging();
					this._Review = value;
					this.SendPropertyChanged("Review");
					this.OnReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verification", DbType="Bit")]
		public System.Nullable<bool> Verification
		{
			get
			{
				return this._Verification;
			}
			set
			{
				if ((this._Verification != value))
				{
					this.OnVerificationChanging(value);
					this.SendPropertyChanging();
					this._Verification = value;
					this.SendPropertyChanged("Verification");
					this.OnVerificationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppealOpposingParty")]
	public partial class AppealOpposingParty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppealOpposingPartyID;
		
		private int _AppealID;
		
		private int _OpposingPartyID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppealOpposingPartyIDChanging(int value);
    partial void OnAppealOpposingPartyIDChanged();
    partial void OnAppealIDChanging(int value);
    partial void OnAppealIDChanged();
    partial void OnOpposingPartyIDChanging(int value);
    partial void OnOpposingPartyIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public AppealOpposingParty()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealOpposingPartyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppealOpposingPartyID
		{
			get
			{
				return this._AppealOpposingPartyID;
			}
			set
			{
				if ((this._AppealOpposingPartyID != value))
				{
					this.OnAppealOpposingPartyIDChanging(value);
					this.SendPropertyChanging();
					this._AppealOpposingPartyID = value;
					this.SendPropertyChanged("AppealOpposingPartyID");
					this.OnAppealOpposingPartyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealID", DbType="Int NOT NULL")]
		public int AppealID
		{
			get
			{
				return this._AppealID;
			}
			set
			{
				if ((this._AppealID != value))
				{
					this.OnAppealIDChanging(value);
					this.SendPropertyChanging();
					this._AppealID = value;
					this.SendPropertyChanged("AppealID");
					this.OnAppealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpposingPartyID", DbType="Int NOT NULL")]
		public int OpposingPartyID
		{
			get
			{
				return this._OpposingPartyID;
			}
			set
			{
				if ((this._OpposingPartyID != value))
				{
					this.OnOpposingPartyIDChanging(value);
					this.SendPropertyChanging();
					this._OpposingPartyID = value;
					this.SendPropertyChanged("OpposingPartyID");
					this.OnOpposingPartyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantAppealDetails")]
	public partial class TenantAppealDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppealID;
		
		private System.Nullable<bool> _bThirdPartyRepresentation;
		
		private System.Nullable<int> _ThirdPartyUserID;
		
		private System.Nullable<System.DateTime> _OpposingPartyCommunicateDate;
		
		private System.Nullable<int> _AppealFiledBy;
		
		private System.DateTime _CreatedDate;
		
		private string _CaseNumber;
		
		private System.Nullable<int> _AppealCategoryID;
		
		private System.Nullable<bool> _IsSubmitted;
		
		private System.Nullable<int> _ApplicantUserID;
		
		private System.Nullable<int> _PropertyUserID;
		
		private System.Nullable<System.DateTime> _AppealDate;
		
		private EntitySet<CaseDetail> _CaseDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppealIDChanging(int value);
    partial void OnAppealIDChanged();
    partial void OnbThirdPartyRepresentationChanging(System.Nullable<bool> value);
    partial void OnbThirdPartyRepresentationChanged();
    partial void OnThirdPartyUserIDChanging(System.Nullable<int> value);
    partial void OnThirdPartyUserIDChanged();
    partial void OnOpposingPartyCommunicateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpposingPartyCommunicateDateChanged();
    partial void OnAppealFiledByChanging(System.Nullable<int> value);
    partial void OnAppealFiledByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCaseNumberChanging(string value);
    partial void OnCaseNumberChanged();
    partial void OnAppealCategoryIDChanging(System.Nullable<int> value);
    partial void OnAppealCategoryIDChanged();
    partial void OnIsSubmittedChanging(System.Nullable<bool> value);
    partial void OnIsSubmittedChanged();
    partial void OnApplicantUserIDChanging(System.Nullable<int> value);
    partial void OnApplicantUserIDChanged();
    partial void OnPropertyUserIDChanging(System.Nullable<int> value);
    partial void OnPropertyUserIDChanged();
    partial void OnAppealDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAppealDateChanged();
    #endregion
		
		public TenantAppealDetail()
		{
			this._CaseDetails = new EntitySet<CaseDetail>(new Action<CaseDetail>(this.attach_CaseDetails), new Action<CaseDetail>(this.detach_CaseDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppealID
		{
			get
			{
				return this._AppealID;
			}
			set
			{
				if ((this._AppealID != value))
				{
					this.OnAppealIDChanging(value);
					this.SendPropertyChanging();
					this._AppealID = value;
					this.SendPropertyChanged("AppealID");
					this.OnAppealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyRepresentation", DbType="Bit")]
		public System.Nullable<bool> bThirdPartyRepresentation
		{
			get
			{
				return this._bThirdPartyRepresentation;
			}
			set
			{
				if ((this._bThirdPartyRepresentation != value))
				{
					this.OnbThirdPartyRepresentationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyRepresentation = value;
					this.SendPropertyChanged("bThirdPartyRepresentation");
					this.OnbThirdPartyRepresentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdPartyUserID", DbType="Int")]
		public System.Nullable<int> ThirdPartyUserID
		{
			get
			{
				return this._ThirdPartyUserID;
			}
			set
			{
				if ((this._ThirdPartyUserID != value))
				{
					this.OnThirdPartyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdPartyUserID = value;
					this.SendPropertyChanged("ThirdPartyUserID");
					this.OnThirdPartyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpposingPartyCommunicateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OpposingPartyCommunicateDate
		{
			get
			{
				return this._OpposingPartyCommunicateDate;
			}
			set
			{
				if ((this._OpposingPartyCommunicateDate != value))
				{
					this.OnOpposingPartyCommunicateDateChanging(value);
					this.SendPropertyChanging();
					this._OpposingPartyCommunicateDate = value;
					this.SendPropertyChanged("OpposingPartyCommunicateDate");
					this.OnOpposingPartyCommunicateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealFiledBy", DbType="Int")]
		public System.Nullable<int> AppealFiledBy
		{
			get
			{
				return this._AppealFiledBy;
			}
			set
			{
				if ((this._AppealFiledBy != value))
				{
					this.OnAppealFiledByChanging(value);
					this.SendPropertyChanging();
					this._AppealFiledBy = value;
					this.SendPropertyChanged("AppealFiledBy");
					this.OnAppealFiledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNumber", DbType="VarChar(20)")]
		public string CaseNumber
		{
			get
			{
				return this._CaseNumber;
			}
			set
			{
				if ((this._CaseNumber != value))
				{
					this.OnCaseNumberChanging(value);
					this.SendPropertyChanging();
					this._CaseNumber = value;
					this.SendPropertyChanged("CaseNumber");
					this.OnCaseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealCategoryID", DbType="Int")]
		public System.Nullable<int> AppealCategoryID
		{
			get
			{
				return this._AppealCategoryID;
			}
			set
			{
				if ((this._AppealCategoryID != value))
				{
					this.OnAppealCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._AppealCategoryID = value;
					this.SendPropertyChanged("AppealCategoryID");
					this.OnAppealCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSubmitted", DbType="Bit")]
		public System.Nullable<bool> IsSubmitted
		{
			get
			{
				return this._IsSubmitted;
			}
			set
			{
				if ((this._IsSubmitted != value))
				{
					this.OnIsSubmittedChanging(value);
					this.SendPropertyChanging();
					this._IsSubmitted = value;
					this.SendPropertyChanged("IsSubmitted");
					this.OnIsSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantUserID", DbType="Int")]
		public System.Nullable<int> ApplicantUserID
		{
			get
			{
				return this._ApplicantUserID;
			}
			set
			{
				if ((this._ApplicantUserID != value))
				{
					this.OnApplicantUserIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantUserID = value;
					this.SendPropertyChanged("ApplicantUserID");
					this.OnApplicantUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyUserID", DbType="Int")]
		public System.Nullable<int> PropertyUserID
		{
			get
			{
				return this._PropertyUserID;
			}
			set
			{
				if ((this._PropertyUserID != value))
				{
					this.OnPropertyUserIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyUserID = value;
					this.SendPropertyChanged("PropertyUserID");
					this.OnPropertyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AppealDate
		{
			get
			{
				return this._AppealDate;
			}
			set
			{
				if ((this._AppealDate != value))
				{
					this.OnAppealDateChanging(value);
					this.SendPropertyChanging();
					this._AppealDate = value;
					this.SendPropertyChanged("AppealDate");
					this.OnAppealDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantAppealDetail_CaseDetail", Storage="_CaseDetails", ThisKey="AppealID", OtherKey="TenantAppealID")]
		public EntitySet<CaseDetail> CaseDetails
		{
			get
			{
				return this._CaseDetails;
			}
			set
			{
				this._CaseDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.TenantAppealDetail = this;
		}
		
		private void detach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.TenantAppealDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantPetitionInfo")]
	public partial class TenantPetitionInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantPetitionID;
		
		private System.Nullable<int> _ApplicantUserID;
		
		private System.Nullable<int> _ThirdPartyUserID;
		
		private System.Nullable<bool> _bThirdPartyRepresentation;
		
		private System.Nullable<int> _OwnerUserID;
		
		private System.Nullable<int> _PropertyManagerUserID;
		
		private System.Nullable<int> _NumberOfUnits;
		
		private int _UnitTypeID;
		
		private System.Nullable<int> _RangeID;
		
		private bool _bRentStatus;
		
		private string _ProvideExplanation;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _PetitionFiledBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private bool _IsSubmitted;
		
		private EntitySet<TenantPetitionGroundInfo> _TenantPetitionGroundInfos;
		
		private EntitySet<TenantRentalIncrementInfo> _TenantRentalIncrementInfos;
		
		private EntitySet<TenantProblemInfo> _TenantProblemInfos;
		
		private EntitySet<TenantLostServiceInfo> _TenantLostServiceInfos;
		
		private EntitySet<TenantPetitionVerification> _TenantPetitionVerifications;
		
		private EntitySet<TenantRentalHistory> _TenantRentalHistories;
		
		private EntityRef<NumberRangeForUnit> _NumberRangeForUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantPetitionIDChanging(int value);
    partial void OnTenantPetitionIDChanged();
    partial void OnApplicantUserIDChanging(System.Nullable<int> value);
    partial void OnApplicantUserIDChanged();
    partial void OnThirdPartyUserIDChanging(System.Nullable<int> value);
    partial void OnThirdPartyUserIDChanged();
    partial void OnbThirdPartyRepresentationChanging(System.Nullable<bool> value);
    partial void OnbThirdPartyRepresentationChanged();
    partial void OnOwnerUserIDChanging(System.Nullable<int> value);
    partial void OnOwnerUserIDChanged();
    partial void OnPropertyManagerUserIDChanging(System.Nullable<int> value);
    partial void OnPropertyManagerUserIDChanged();
    partial void OnNumberOfUnitsChanging(System.Nullable<int> value);
    partial void OnNumberOfUnitsChanged();
    partial void OnUnitTypeIDChanging(int value);
    partial void OnUnitTypeIDChanged();
    partial void OnRangeIDChanging(System.Nullable<int> value);
    partial void OnRangeIDChanged();
    partial void OnbRentStatusChanging(bool value);
    partial void OnbRentStatusChanged();
    partial void OnProvideExplanationChanging(string value);
    partial void OnProvideExplanationChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnPetitionFiledByChanging(System.Nullable<int> value);
    partial void OnPetitionFiledByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnIsSubmittedChanging(bool value);
    partial void OnIsSubmittedChanged();
    #endregion
		
		public TenantPetitionInfo()
		{
			this._TenantPetitionGroundInfos = new EntitySet<TenantPetitionGroundInfo>(new Action<TenantPetitionGroundInfo>(this.attach_TenantPetitionGroundInfos), new Action<TenantPetitionGroundInfo>(this.detach_TenantPetitionGroundInfos));
			this._TenantRentalIncrementInfos = new EntitySet<TenantRentalIncrementInfo>(new Action<TenantRentalIncrementInfo>(this.attach_TenantRentalIncrementInfos), new Action<TenantRentalIncrementInfo>(this.detach_TenantRentalIncrementInfos));
			this._TenantProblemInfos = new EntitySet<TenantProblemInfo>(new Action<TenantProblemInfo>(this.attach_TenantProblemInfos), new Action<TenantProblemInfo>(this.detach_TenantProblemInfos));
			this._TenantLostServiceInfos = new EntitySet<TenantLostServiceInfo>(new Action<TenantLostServiceInfo>(this.attach_TenantLostServiceInfos), new Action<TenantLostServiceInfo>(this.detach_TenantLostServiceInfos));
			this._TenantPetitionVerifications = new EntitySet<TenantPetitionVerification>(new Action<TenantPetitionVerification>(this.attach_TenantPetitionVerifications), new Action<TenantPetitionVerification>(this.detach_TenantPetitionVerifications));
			this._TenantRentalHistories = new EntitySet<TenantRentalHistory>(new Action<TenantRentalHistory>(this.attach_TenantRentalHistories), new Action<TenantRentalHistory>(this.detach_TenantRentalHistories));
			this._NumberRangeForUnit = default(EntityRef<NumberRangeForUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantUserID", DbType="Int")]
		public System.Nullable<int> ApplicantUserID
		{
			get
			{
				return this._ApplicantUserID;
			}
			set
			{
				if ((this._ApplicantUserID != value))
				{
					this.OnApplicantUserIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantUserID = value;
					this.SendPropertyChanged("ApplicantUserID");
					this.OnApplicantUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdPartyUserID", DbType="Int")]
		public System.Nullable<int> ThirdPartyUserID
		{
			get
			{
				return this._ThirdPartyUserID;
			}
			set
			{
				if ((this._ThirdPartyUserID != value))
				{
					this.OnThirdPartyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdPartyUserID = value;
					this.SendPropertyChanged("ThirdPartyUserID");
					this.OnThirdPartyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyRepresentation", DbType="Bit")]
		public System.Nullable<bool> bThirdPartyRepresentation
		{
			get
			{
				return this._bThirdPartyRepresentation;
			}
			set
			{
				if ((this._bThirdPartyRepresentation != value))
				{
					this.OnbThirdPartyRepresentationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyRepresentation = value;
					this.SendPropertyChanged("bThirdPartyRepresentation");
					this.OnbThirdPartyRepresentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserID", DbType="Int")]
		public System.Nullable<int> OwnerUserID
		{
			get
			{
				return this._OwnerUserID;
			}
			set
			{
				if ((this._OwnerUserID != value))
				{
					this.OnOwnerUserIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserID = value;
					this.SendPropertyChanged("OwnerUserID");
					this.OnOwnerUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyManagerUserID", DbType="Int")]
		public System.Nullable<int> PropertyManagerUserID
		{
			get
			{
				return this._PropertyManagerUserID;
			}
			set
			{
				if ((this._PropertyManagerUserID != value))
				{
					this.OnPropertyManagerUserIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyManagerUserID = value;
					this.SendPropertyChanged("PropertyManagerUserID");
					this.OnPropertyManagerUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfUnits", DbType="Int")]
		public System.Nullable<int> NumberOfUnits
		{
			get
			{
				return this._NumberOfUnits;
			}
			set
			{
				if ((this._NumberOfUnits != value))
				{
					this.OnNumberOfUnitsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfUnits = value;
					this.SendPropertyChanged("NumberOfUnits");
					this.OnNumberOfUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitTypeID", DbType="Int NOT NULL")]
		public int UnitTypeID
		{
			get
			{
				return this._UnitTypeID;
			}
			set
			{
				if ((this._UnitTypeID != value))
				{
					this.OnUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UnitTypeID = value;
					this.SendPropertyChanged("UnitTypeID");
					this.OnUnitTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangeID", DbType="Int")]
		public System.Nullable<int> RangeID
		{
			get
			{
				return this._RangeID;
			}
			set
			{
				if ((this._RangeID != value))
				{
					if (this._NumberRangeForUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRangeIDChanging(value);
					this.SendPropertyChanging();
					this._RangeID = value;
					this.SendPropertyChanged("RangeID");
					this.OnRangeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentStatus", DbType="Bit NOT NULL")]
		public bool bRentStatus
		{
			get
			{
				return this._bRentStatus;
			}
			set
			{
				if ((this._bRentStatus != value))
				{
					this.OnbRentStatusChanging(value);
					this.SendPropertyChanging();
					this._bRentStatus = value;
					this.SendPropertyChanged("bRentStatus");
					this.OnbRentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvideExplanation", DbType="VarChar(MAX)")]
		public string ProvideExplanation
		{
			get
			{
				return this._ProvideExplanation;
			}
			set
			{
				if ((this._ProvideExplanation != value))
				{
					this.OnProvideExplanationChanging(value);
					this.SendPropertyChanging();
					this._ProvideExplanation = value;
					this.SendPropertyChanged("ProvideExplanation");
					this.OnProvideExplanationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionFiledBy", DbType="Int")]
		public System.Nullable<int> PetitionFiledBy
		{
			get
			{
				return this._PetitionFiledBy;
			}
			set
			{
				if ((this._PetitionFiledBy != value))
				{
					this.OnPetitionFiledByChanging(value);
					this.SendPropertyChanging();
					this._PetitionFiledBy = value;
					this.SendPropertyChanged("PetitionFiledBy");
					this.OnPetitionFiledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSubmitted", DbType="Bit NOT NULL")]
		public bool IsSubmitted
		{
			get
			{
				return this._IsSubmitted;
			}
			set
			{
				if ((this._IsSubmitted != value))
				{
					this.OnIsSubmittedChanging(value);
					this.SendPropertyChanging();
					this._IsSubmitted = value;
					this.SendPropertyChanged("IsSubmitted");
					this.OnIsSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantPetitionGroundInfo", Storage="_TenantPetitionGroundInfos", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID")]
		public EntitySet<TenantPetitionGroundInfo> TenantPetitionGroundInfos
		{
			get
			{
				return this._TenantPetitionGroundInfos;
			}
			set
			{
				this._TenantPetitionGroundInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantRentalIncrementInfo", Storage="_TenantRentalIncrementInfos", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID")]
		public EntitySet<TenantRentalIncrementInfo> TenantRentalIncrementInfos
		{
			get
			{
				return this._TenantRentalIncrementInfos;
			}
			set
			{
				this._TenantRentalIncrementInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantProblemInfo", Storage="_TenantProblemInfos", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID")]
		public EntitySet<TenantProblemInfo> TenantProblemInfos
		{
			get
			{
				return this._TenantProblemInfos;
			}
			set
			{
				this._TenantProblemInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantLostServiceInfo", Storage="_TenantLostServiceInfos", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID")]
		public EntitySet<TenantLostServiceInfo> TenantLostServiceInfos
		{
			get
			{
				return this._TenantLostServiceInfos;
			}
			set
			{
				this._TenantLostServiceInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantPetitionVerification", Storage="_TenantPetitionVerifications", ThisKey="TenantPetitionID", OtherKey="PetitionID")]
		public EntitySet<TenantPetitionVerification> TenantPetitionVerifications
		{
			get
			{
				return this._TenantPetitionVerifications;
			}
			set
			{
				this._TenantPetitionVerifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantRentalHistory", Storage="_TenantRentalHistories", ThisKey="TenantPetitionID", OtherKey="PetitionID")]
		public EntitySet<TenantRentalHistory> TenantRentalHistories
		{
			get
			{
				return this._TenantRentalHistories;
			}
			set
			{
				this._TenantRentalHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NumberRangeForUnit_TenantPetitionInfo", Storage="_NumberRangeForUnit", ThisKey="RangeID", OtherKey="RangeID", IsForeignKey=true)]
		public NumberRangeForUnit NumberRangeForUnit
		{
			get
			{
				return this._NumberRangeForUnit.Entity;
			}
			set
			{
				NumberRangeForUnit previousValue = this._NumberRangeForUnit.Entity;
				if (((previousValue != value) 
							|| (this._NumberRangeForUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NumberRangeForUnit.Entity = null;
						previousValue.TenantPetitionInfos.Remove(this);
					}
					this._NumberRangeForUnit.Entity = value;
					if ((value != null))
					{
						value.TenantPetitionInfos.Add(this);
						this._RangeID = value.RangeID;
					}
					else
					{
						this._RangeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("NumberRangeForUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TenantPetitionGroundInfos(TenantPetitionGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = this;
		}
		
		private void detach_TenantPetitionGroundInfos(TenantPetitionGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = null;
		}
		
		private void attach_TenantRentalIncrementInfos(TenantRentalIncrementInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = this;
		}
		
		private void detach_TenantRentalIncrementInfos(TenantRentalIncrementInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = null;
		}
		
		private void attach_TenantProblemInfos(TenantProblemInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = this;
		}
		
		private void detach_TenantProblemInfos(TenantProblemInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = null;
		}
		
		private void attach_TenantLostServiceInfos(TenantLostServiceInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = this;
		}
		
		private void detach_TenantLostServiceInfos(TenantLostServiceInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = null;
		}
		
		private void attach_TenantPetitionVerifications(TenantPetitionVerification entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = this;
		}
		
		private void detach_TenantPetitionVerifications(TenantPetitionVerification entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = null;
		}
		
		private void attach_TenantRentalHistories(TenantRentalHistory entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = this;
		}
		
		private void detach_TenantRentalHistories(TenantRentalHistory entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantPetitionVerification")]
	public partial class TenantPetitionVerification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VerificationID;
		
		private int _PetitionID;
		
		private bool _bDeclarePenalty;
		
		private bool _bThirdParty;
		
		private bool _bThirdPartyMediation;
		
		private bool _bCaseMediation;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<TenantPetitionInfo> _TenantPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVerificationIDChanging(int value);
    partial void OnVerificationIDChanged();
    partial void OnPetitionIDChanging(int value);
    partial void OnPetitionIDChanged();
    partial void OnbDeclarePenaltyChanging(bool value);
    partial void OnbDeclarePenaltyChanged();
    partial void OnbThirdPartyChanging(bool value);
    partial void OnbThirdPartyChanged();
    partial void OnbThirdPartyMediationChanging(bool value);
    partial void OnbThirdPartyMediationChanged();
    partial void OnbCaseMediationChanging(bool value);
    partial void OnbCaseMediationChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TenantPetitionVerification()
		{
			this._TenantPetitionInfo = default(EntityRef<TenantPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VerificationID
		{
			get
			{
				return this._VerificationID;
			}
			set
			{
				if ((this._VerificationID != value))
				{
					this.OnVerificationIDChanging(value);
					this.SendPropertyChanging();
					this._VerificationID = value;
					this.SendPropertyChanged("VerificationID");
					this.OnVerificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionID", DbType="Int NOT NULL")]
		public int PetitionID
		{
			get
			{
				return this._PetitionID;
			}
			set
			{
				if ((this._PetitionID != value))
				{
					if (this._TenantPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionID = value;
					this.SendPropertyChanged("PetitionID");
					this.OnPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDeclarePenalty", DbType="Bit NOT NULL")]
		public bool bDeclarePenalty
		{
			get
			{
				return this._bDeclarePenalty;
			}
			set
			{
				if ((this._bDeclarePenalty != value))
				{
					this.OnbDeclarePenaltyChanging(value);
					this.SendPropertyChanging();
					this._bDeclarePenalty = value;
					this.SendPropertyChanged("bDeclarePenalty");
					this.OnbDeclarePenaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdParty", DbType="Bit NOT NULL")]
		public bool bThirdParty
		{
			get
			{
				return this._bThirdParty;
			}
			set
			{
				if ((this._bThirdParty != value))
				{
					this.OnbThirdPartyChanging(value);
					this.SendPropertyChanging();
					this._bThirdParty = value;
					this.SendPropertyChanged("bThirdParty");
					this.OnbThirdPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyMediation", DbType="Bit NOT NULL")]
		public bool bThirdPartyMediation
		{
			get
			{
				return this._bThirdPartyMediation;
			}
			set
			{
				if ((this._bThirdPartyMediation != value))
				{
					this.OnbThirdPartyMediationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyMediation = value;
					this.SendPropertyChanged("bThirdPartyMediation");
					this.OnbThirdPartyMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bCaseMediation", DbType="Bit NOT NULL")]
		public bool bCaseMediation
		{
			get
			{
				return this._bCaseMediation;
			}
			set
			{
				if ((this._bCaseMediation != value))
				{
					this.OnbCaseMediationChanging(value);
					this.SendPropertyChanging();
					this._bCaseMediation = value;
					this.SendPropertyChanged("bCaseMediation");
					this.OnbCaseMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="Date NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantPetitionVerification", Storage="_TenantPetitionInfo", ThisKey="PetitionID", OtherKey="TenantPetitionID", IsForeignKey=true)]
		public TenantPetitionInfo TenantPetitionInfo
		{
			get
			{
				return this._TenantPetitionInfo.Entity;
			}
			set
			{
				TenantPetitionInfo previousValue = this._TenantPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantPetitionInfo.Entity = null;
						previousValue.TenantPetitionVerifications.Remove(this);
					}
					this._TenantPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.TenantPetitionVerifications.Add(this);
						this._PetitionID = value.TenantPetitionID;
					}
					else
					{
						this._PetitionID = default(int);
					}
					this.SendPropertyChanged("TenantPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantResponseExemptContestedInfo")]
	public partial class TenantResponseExemptContestedInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExemptContestedID;
		
		private int _TenantResponseID;
		
		private string _Explaination;
		
		private EntityRef<TenantResponseApplicationInfo> _TenantResponseApplicationInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExemptContestedIDChanging(int value);
    partial void OnExemptContestedIDChanged();
    partial void OnTenantResponseIDChanging(int value);
    partial void OnTenantResponseIDChanged();
    partial void OnExplainationChanging(string value);
    partial void OnExplainationChanged();
    #endregion
		
		public TenantResponseExemptContestedInfo()
		{
			this._TenantResponseApplicationInfo = default(EntityRef<TenantResponseApplicationInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExemptContestedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExemptContestedID
		{
			get
			{
				return this._ExemptContestedID;
			}
			set
			{
				if ((this._ExemptContestedID != value))
				{
					this.OnExemptContestedIDChanging(value);
					this.SendPropertyChanging();
					this._ExemptContestedID = value;
					this.SendPropertyChanged("ExemptContestedID");
					this.OnExemptContestedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantResponseID", DbType="Int NOT NULL")]
		public int TenantResponseID
		{
			get
			{
				return this._TenantResponseID;
			}
			set
			{
				if ((this._TenantResponseID != value))
				{
					if (this._TenantResponseApplicationInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantResponseIDChanging(value);
					this.SendPropertyChanging();
					this._TenantResponseID = value;
					this.SendPropertyChanged("TenantResponseID");
					this.OnTenantResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Explaination", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Explaination
		{
			get
			{
				return this._Explaination;
			}
			set
			{
				if ((this._Explaination != value))
				{
					this.OnExplainationChanging(value);
					this.SendPropertyChanging();
					this._Explaination = value;
					this.SendPropertyChanged("Explaination");
					this.OnExplainationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantResponseApplicationInfo_TenantResponseExemptContestedInfo", Storage="_TenantResponseApplicationInfo", ThisKey="TenantResponseID", OtherKey="TenantResponseID", IsForeignKey=true)]
		public TenantResponseApplicationInfo TenantResponseApplicationInfo
		{
			get
			{
				return this._TenantResponseApplicationInfo.Entity;
			}
			set
			{
				TenantResponseApplicationInfo previousValue = this._TenantResponseApplicationInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantResponseApplicationInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantResponseApplicationInfo.Entity = null;
						previousValue.TenantResponseExemptContestedInfos.Remove(this);
					}
					this._TenantResponseApplicationInfo.Entity = value;
					if ((value != null))
					{
						value.TenantResponseExemptContestedInfos.Add(this);
						this._TenantResponseID = value.TenantResponseID;
					}
					else
					{
						this._TenantResponseID = default(int);
					}
					this.SendPropertyChanged("TenantResponseApplicationInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantResponsePageSubmissionStatus")]
	public partial class TenantResponsePageSubmissionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NavigationID;
		
		private int _CustomerID;
		
		private System.Nullable<int> _TenantResponseID;
		
		private System.Nullable<bool> _ImportantInformation;
		
		private System.Nullable<bool> _ApplicantInformation;
		
		private System.Nullable<bool> _ExemptionContested;
		
		private System.Nullable<bool> _RentHistory;
		
		private System.Nullable<bool> _AdditionalDocumentation;
		
		private System.Nullable<bool> _Review;
		
		private System.Nullable<bool> _Verification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNavigationIDChanging(int value);
    partial void OnNavigationIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnTenantResponseIDChanging(System.Nullable<int> value);
    partial void OnTenantResponseIDChanged();
    partial void OnImportantInformationChanging(System.Nullable<bool> value);
    partial void OnImportantInformationChanged();
    partial void OnApplicantInformationChanging(System.Nullable<bool> value);
    partial void OnApplicantInformationChanged();
    partial void OnExemptionContestedChanging(System.Nullable<bool> value);
    partial void OnExemptionContestedChanged();
    partial void OnRentHistoryChanging(System.Nullable<bool> value);
    partial void OnRentHistoryChanged();
    partial void OnAdditionalDocumentationChanging(System.Nullable<bool> value);
    partial void OnAdditionalDocumentationChanged();
    partial void OnReviewChanging(System.Nullable<bool> value);
    partial void OnReviewChanged();
    partial void OnVerificationChanging(System.Nullable<bool> value);
    partial void OnVerificationChanged();
    #endregion
		
		public TenantResponsePageSubmissionStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NavigationID
		{
			get
			{
				return this._NavigationID;
			}
			set
			{
				if ((this._NavigationID != value))
				{
					this.OnNavigationIDChanging(value);
					this.SendPropertyChanging();
					this._NavigationID = value;
					this.SendPropertyChanged("NavigationID");
					this.OnNavigationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantResponseID", DbType="Int")]
		public System.Nullable<int> TenantResponseID
		{
			get
			{
				return this._TenantResponseID;
			}
			set
			{
				if ((this._TenantResponseID != value))
				{
					this.OnTenantResponseIDChanging(value);
					this.SendPropertyChanging();
					this._TenantResponseID = value;
					this.SendPropertyChanged("TenantResponseID");
					this.OnTenantResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportantInformation", DbType="Bit")]
		public System.Nullable<bool> ImportantInformation
		{
			get
			{
				return this._ImportantInformation;
			}
			set
			{
				if ((this._ImportantInformation != value))
				{
					this.OnImportantInformationChanging(value);
					this.SendPropertyChanging();
					this._ImportantInformation = value;
					this.SendPropertyChanged("ImportantInformation");
					this.OnImportantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantInformation", DbType="Bit")]
		public System.Nullable<bool> ApplicantInformation
		{
			get
			{
				return this._ApplicantInformation;
			}
			set
			{
				if ((this._ApplicantInformation != value))
				{
					this.OnApplicantInformationChanging(value);
					this.SendPropertyChanging();
					this._ApplicantInformation = value;
					this.SendPropertyChanged("ApplicantInformation");
					this.OnApplicantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExemptionContested", DbType="Bit")]
		public System.Nullable<bool> ExemptionContested
		{
			get
			{
				return this._ExemptionContested;
			}
			set
			{
				if ((this._ExemptionContested != value))
				{
					this.OnExemptionContestedChanging(value);
					this.SendPropertyChanging();
					this._ExemptionContested = value;
					this.SendPropertyChanged("ExemptionContested");
					this.OnExemptionContestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentHistory", DbType="Bit")]
		public System.Nullable<bool> RentHistory
		{
			get
			{
				return this._RentHistory;
			}
			set
			{
				if ((this._RentHistory != value))
				{
					this.OnRentHistoryChanging(value);
					this.SendPropertyChanging();
					this._RentHistory = value;
					this.SendPropertyChanged("RentHistory");
					this.OnRentHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalDocumentation", DbType="Bit")]
		public System.Nullable<bool> AdditionalDocumentation
		{
			get
			{
				return this._AdditionalDocumentation;
			}
			set
			{
				if ((this._AdditionalDocumentation != value))
				{
					this.OnAdditionalDocumentationChanging(value);
					this.SendPropertyChanging();
					this._AdditionalDocumentation = value;
					this.SendPropertyChanged("AdditionalDocumentation");
					this.OnAdditionalDocumentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Review", DbType="Bit")]
		public System.Nullable<bool> Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				if ((this._Review != value))
				{
					this.OnReviewChanging(value);
					this.SendPropertyChanging();
					this._Review = value;
					this.SendPropertyChanged("Review");
					this.OnReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verification", DbType="Bit")]
		public System.Nullable<bool> Verification
		{
			get
			{
				return this._Verification;
			}
			set
			{
				if ((this._Verification != value))
				{
					this.OnVerificationChanging(value);
					this.SendPropertyChanging();
					this._Verification = value;
					this.SendPropertyChanged("Verification");
					this.OnVerificationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerResponseTenantInfo")]
	public partial class OwnerResponseTenantInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantInfoID;
		
		private int _PropertyID;
		
		private int _TenantUserID;
		
		private EntityRef<OwnerResponsePropertyInfo> _OwnerResponsePropertyInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantInfoIDChanging(int value);
    partial void OnTenantInfoIDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnTenantUserIDChanging(int value);
    partial void OnTenantUserIDChanged();
    #endregion
		
		public OwnerResponseTenantInfo()
		{
			this._OwnerResponsePropertyInfo = default(EntityRef<OwnerResponsePropertyInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantInfoID
		{
			get
			{
				return this._TenantInfoID;
			}
			set
			{
				if ((this._TenantInfoID != value))
				{
					this.OnTenantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._TenantInfoID = value;
					this.SendPropertyChanged("TenantInfoID");
					this.OnTenantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._OwnerResponsePropertyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantUserID", DbType="Int NOT NULL")]
		public int TenantUserID
		{
			get
			{
				return this._TenantUserID;
			}
			set
			{
				if ((this._TenantUserID != value))
				{
					this.OnTenantUserIDChanging(value);
					this.SendPropertyChanging();
					this._TenantUserID = value;
					this.SendPropertyChanged("TenantUserID");
					this.OnTenantUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponsePropertyInfo_OwnerResponseTenantInfo", Storage="_OwnerResponsePropertyInfo", ThisKey="PropertyID", OtherKey="PropertyID", IsForeignKey=true)]
		public OwnerResponsePropertyInfo OwnerResponsePropertyInfo
		{
			get
			{
				return this._OwnerResponsePropertyInfo.Entity;
			}
			set
			{
				OwnerResponsePropertyInfo previousValue = this._OwnerResponsePropertyInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerResponsePropertyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerResponsePropertyInfo.Entity = null;
						previousValue.OwnerResponseTenantInfos.Remove(this);
					}
					this._OwnerResponsePropertyInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerResponseTenantInfos.Add(this);
						this._PropertyID = value.PropertyID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("OwnerResponsePropertyInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerResponseRentalIncrementInfo")]
	public partial class OwnerResponseRentalIncrementInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentalIncreaseInfoID;
		
		private int _PropertyID;
		
		private System.Nullable<bool> _bRentIncreaseNoticeGiven;
		
		private System.Nullable<System.DateTime> _RentIncreaseNoticeDate;
		
		private System.Nullable<System.DateTime> _RentIncreaseEffectiveDate;
		
		private System.Nullable<decimal> _RentIncreasedFrom;
		
		private System.Nullable<decimal> _RentIncreasedTo;
		
		private EntitySet<OwnerResponseRentIncreaseReasonInfo> _OwnerResponseRentIncreaseReasonInfos;
		
		private EntityRef<OwnerResponsePropertyInfo> _OwnerResponsePropertyInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentalIncreaseInfoIDChanging(int value);
    partial void OnRentalIncreaseInfoIDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnbRentIncreaseNoticeGivenChanging(System.Nullable<bool> value);
    partial void OnbRentIncreaseNoticeGivenChanged();
    partial void OnRentIncreaseNoticeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseNoticeDateChanged();
    partial void OnRentIncreaseEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseEffectiveDateChanged();
    partial void OnRentIncreasedFromChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedFromChanged();
    partial void OnRentIncreasedToChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedToChanged();
    #endregion
		
		public OwnerResponseRentalIncrementInfo()
		{
			this._OwnerResponseRentIncreaseReasonInfos = new EntitySet<OwnerResponseRentIncreaseReasonInfo>(new Action<OwnerResponseRentIncreaseReasonInfo>(this.attach_OwnerResponseRentIncreaseReasonInfos), new Action<OwnerResponseRentIncreaseReasonInfo>(this.detach_OwnerResponseRentIncreaseReasonInfos));
			this._OwnerResponsePropertyInfo = default(EntityRef<OwnerResponsePropertyInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalIncreaseInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentalIncreaseInfoID
		{
			get
			{
				return this._RentalIncreaseInfoID;
			}
			set
			{
				if ((this._RentalIncreaseInfoID != value))
				{
					this.OnRentalIncreaseInfoIDChanging(value);
					this.SendPropertyChanging();
					this._RentalIncreaseInfoID = value;
					this.SendPropertyChanged("RentalIncreaseInfoID");
					this.OnRentalIncreaseInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._OwnerResponsePropertyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentIncreaseNoticeGiven", DbType="Bit")]
		public System.Nullable<bool> bRentIncreaseNoticeGiven
		{
			get
			{
				return this._bRentIncreaseNoticeGiven;
			}
			set
			{
				if ((this._bRentIncreaseNoticeGiven != value))
				{
					this.OnbRentIncreaseNoticeGivenChanging(value);
					this.SendPropertyChanging();
					this._bRentIncreaseNoticeGiven = value;
					this.SendPropertyChanged("bRentIncreaseNoticeGiven");
					this.OnbRentIncreaseNoticeGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseNoticeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseNoticeDate
		{
			get
			{
				return this._RentIncreaseNoticeDate;
			}
			set
			{
				if ((this._RentIncreaseNoticeDate != value))
				{
					this.OnRentIncreaseNoticeDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseNoticeDate = value;
					this.SendPropertyChanged("RentIncreaseNoticeDate");
					this.OnRentIncreaseNoticeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseEffectiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseEffectiveDate
		{
			get
			{
				return this._RentIncreaseEffectiveDate;
			}
			set
			{
				if ((this._RentIncreaseEffectiveDate != value))
				{
					this.OnRentIncreaseEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseEffectiveDate = value;
					this.SendPropertyChanged("RentIncreaseEffectiveDate");
					this.OnRentIncreaseEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedFrom", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedFrom
		{
			get
			{
				return this._RentIncreasedFrom;
			}
			set
			{
				if ((this._RentIncreasedFrom != value))
				{
					this.OnRentIncreasedFromChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedFrom = value;
					this.SendPropertyChanged("RentIncreasedFrom");
					this.OnRentIncreasedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedTo", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedTo
		{
			get
			{
				return this._RentIncreasedTo;
			}
			set
			{
				if ((this._RentIncreasedTo != value))
				{
					this.OnRentIncreasedToChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedTo = value;
					this.SendPropertyChanged("RentIncreasedTo");
					this.OnRentIncreasedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponseRentalIncrementInfo_OwnerResponseRentIncreaseReasonInfo", Storage="_OwnerResponseRentIncreaseReasonInfos", ThisKey="RentalIncreaseInfoID", OtherKey="RentalIncreaseInfoID")]
		public EntitySet<OwnerResponseRentIncreaseReasonInfo> OwnerResponseRentIncreaseReasonInfos
		{
			get
			{
				return this._OwnerResponseRentIncreaseReasonInfos;
			}
			set
			{
				this._OwnerResponseRentIncreaseReasonInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponsePropertyInfo_OwnerResponseRentalIncrementInfo", Storage="_OwnerResponsePropertyInfo", ThisKey="PropertyID", OtherKey="PropertyID", IsForeignKey=true)]
		public OwnerResponsePropertyInfo OwnerResponsePropertyInfo
		{
			get
			{
				return this._OwnerResponsePropertyInfo.Entity;
			}
			set
			{
				OwnerResponsePropertyInfo previousValue = this._OwnerResponsePropertyInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerResponsePropertyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerResponsePropertyInfo.Entity = null;
						previousValue.OwnerResponseRentalIncrementInfos.Remove(this);
					}
					this._OwnerResponsePropertyInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerResponseRentalIncrementInfos.Add(this);
						this._PropertyID = value.PropertyID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("OwnerResponsePropertyInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerResponseRentIncreaseReasonInfos(OwnerResponseRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponseRentalIncrementInfo = this;
		}
		
		private void detach_OwnerResponseRentIncreaseReasonInfos(OwnerResponseRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponseRentalIncrementInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerResponseRentIncreaseReasonInfo")]
	public partial class OwnerResponseRentIncreaseReasonInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentIncreaseReasonInfoID;
		
		private int _RentalIncreaseInfoID;
		
		private int _ReasonID;
		
		private EntityRef<OwnerResponseRentalIncrementInfo> _OwnerResponseRentalIncrementInfo;
		
		private EntityRef<OwnerRentIncreaseReason> _OwnerRentIncreaseReason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentIncreaseReasonInfoIDChanging(int value);
    partial void OnRentIncreaseReasonInfoIDChanged();
    partial void OnRentalIncreaseInfoIDChanging(int value);
    partial void OnRentalIncreaseInfoIDChanged();
    partial void OnReasonIDChanging(int value);
    partial void OnReasonIDChanged();
    #endregion
		
		public OwnerResponseRentIncreaseReasonInfo()
		{
			this._OwnerResponseRentalIncrementInfo = default(EntityRef<OwnerResponseRentalIncrementInfo>);
			this._OwnerRentIncreaseReason = default(EntityRef<OwnerRentIncreaseReason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseReasonInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentIncreaseReasonInfoID
		{
			get
			{
				return this._RentIncreaseReasonInfoID;
			}
			set
			{
				if ((this._RentIncreaseReasonInfoID != value))
				{
					this.OnRentIncreaseReasonInfoIDChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseReasonInfoID = value;
					this.SendPropertyChanged("RentIncreaseReasonInfoID");
					this.OnRentIncreaseReasonInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalIncreaseInfoID", DbType="Int NOT NULL")]
		public int RentalIncreaseInfoID
		{
			get
			{
				return this._RentalIncreaseInfoID;
			}
			set
			{
				if ((this._RentalIncreaseInfoID != value))
				{
					if (this._OwnerResponseRentalIncrementInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRentalIncreaseInfoIDChanging(value);
					this.SendPropertyChanging();
					this._RentalIncreaseInfoID = value;
					this.SendPropertyChanged("RentalIncreaseInfoID");
					this.OnRentalIncreaseInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonID", DbType="Int NOT NULL")]
		public int ReasonID
		{
			get
			{
				return this._ReasonID;
			}
			set
			{
				if ((this._ReasonID != value))
				{
					if (this._OwnerRentIncreaseReason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReasonIDChanging(value);
					this.SendPropertyChanging();
					this._ReasonID = value;
					this.SendPropertyChanged("ReasonID");
					this.OnReasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponseRentalIncrementInfo_OwnerResponseRentIncreaseReasonInfo", Storage="_OwnerResponseRentalIncrementInfo", ThisKey="RentalIncreaseInfoID", OtherKey="RentalIncreaseInfoID", IsForeignKey=true)]
		public OwnerResponseRentalIncrementInfo OwnerResponseRentalIncrementInfo
		{
			get
			{
				return this._OwnerResponseRentalIncrementInfo.Entity;
			}
			set
			{
				OwnerResponseRentalIncrementInfo previousValue = this._OwnerResponseRentalIncrementInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerResponseRentalIncrementInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerResponseRentalIncrementInfo.Entity = null;
						previousValue.OwnerResponseRentIncreaseReasonInfos.Remove(this);
					}
					this._OwnerResponseRentalIncrementInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerResponseRentIncreaseReasonInfos.Add(this);
						this._RentalIncreaseInfoID = value.RentalIncreaseInfoID;
					}
					else
					{
						this._RentalIncreaseInfoID = default(int);
					}
					this.SendPropertyChanged("OwnerResponseRentalIncrementInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerRentIncreaseReason_OwnerResponseRentIncreaseReasonInfo", Storage="_OwnerRentIncreaseReason", ThisKey="ReasonID", OtherKey="ReasonID", IsForeignKey=true)]
		public OwnerRentIncreaseReason OwnerRentIncreaseReason
		{
			get
			{
				return this._OwnerRentIncreaseReason.Entity;
			}
			set
			{
				OwnerRentIncreaseReason previousValue = this._OwnerRentIncreaseReason.Entity;
				if (((previousValue != value) 
							|| (this._OwnerRentIncreaseReason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerRentIncreaseReason.Entity = null;
						previousValue.OwnerResponseRentIncreaseReasonInfos.Remove(this);
					}
					this._OwnerRentIncreaseReason.Entity = value;
					if ((value != null))
					{
						value.OwnerResponseRentIncreaseReasonInfos.Add(this);
						this._ReasonID = value.ReasonID;
					}
					else
					{
						this._ReasonID = default(int);
					}
					this.SendPropertyChanged("OwnerRentIncreaseReason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantResponseApplicationInfo")]
	public partial class TenantResponseApplicationInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantResponseID;
		
		private System.Nullable<int> _C_ID;
		
		private System.Nullable<int> _ApplicantUserID;
		
		private System.Nullable<int> _ThirdPartyUserID;
		
		private System.Nullable<bool> _bThirdPartyRepresentation;
		
		private System.Nullable<int> _OwnerUserID;
		
		private System.Nullable<int> _PropertyManagerUserID;
		
		private System.Nullable<int> _NumberOfUnits;
		
		private int _UnitTypeID;
		
		private System.Nullable<int> _RangeID;
		
		private bool _bRentStatus;
		
		private string _ProvideExplanation;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ResponseFiledBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private bool _IsSubmitted;
		
		private EntitySet<TenantResponseExemptContestedInfo> _TenantResponseExemptContestedInfos;
		
		private EntityRef<TenantResponseRentalIncrementInfo> _TenantResponseRentalIncrementInfo;
		
		private EntitySet<TenantResponseRentalHistory> _TenantResponseRentalHistories;
		
		private EntitySet<TenantResponseVerification> _TenantResponseVerifications;
		
		private EntitySet<TenantResponseExemptContestedInfo1> _TenantResponseExemptContestedInfo1s;
		
		private EntityRef<NumberRangeForUnit> _NumberRangeForUnit;
		
		private EntityRef<CaseDetail> _CaseDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantResponseIDChanging(int value);
    partial void OnTenantResponseIDChanged();
    partial void OnC_IDChanging(System.Nullable<int> value);
    partial void OnC_IDChanged();
    partial void OnApplicantUserIDChanging(System.Nullable<int> value);
    partial void OnApplicantUserIDChanged();
    partial void OnThirdPartyUserIDChanging(System.Nullable<int> value);
    partial void OnThirdPartyUserIDChanged();
    partial void OnbThirdPartyRepresentationChanging(System.Nullable<bool> value);
    partial void OnbThirdPartyRepresentationChanged();
    partial void OnOwnerUserIDChanging(System.Nullable<int> value);
    partial void OnOwnerUserIDChanged();
    partial void OnPropertyManagerUserIDChanging(System.Nullable<int> value);
    partial void OnPropertyManagerUserIDChanged();
    partial void OnNumberOfUnitsChanging(System.Nullable<int> value);
    partial void OnNumberOfUnitsChanged();
    partial void OnUnitTypeIDChanging(int value);
    partial void OnUnitTypeIDChanged();
    partial void OnRangeIDChanging(System.Nullable<int> value);
    partial void OnRangeIDChanged();
    partial void OnbRentStatusChanging(bool value);
    partial void OnbRentStatusChanged();
    partial void OnProvideExplanationChanging(string value);
    partial void OnProvideExplanationChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnResponseFiledByChanging(System.Nullable<int> value);
    partial void OnResponseFiledByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnIsSubmittedChanging(bool value);
    partial void OnIsSubmittedChanged();
    #endregion
		
		public TenantResponseApplicationInfo()
		{
			this._TenantResponseExemptContestedInfos = new EntitySet<TenantResponseExemptContestedInfo>(new Action<TenantResponseExemptContestedInfo>(this.attach_TenantResponseExemptContestedInfos), new Action<TenantResponseExemptContestedInfo>(this.detach_TenantResponseExemptContestedInfos));
			this._TenantResponseRentalIncrementInfo = default(EntityRef<TenantResponseRentalIncrementInfo>);
			this._TenantResponseRentalHistories = new EntitySet<TenantResponseRentalHistory>(new Action<TenantResponseRentalHistory>(this.attach_TenantResponseRentalHistories), new Action<TenantResponseRentalHistory>(this.detach_TenantResponseRentalHistories));
			this._TenantResponseVerifications = new EntitySet<TenantResponseVerification>(new Action<TenantResponseVerification>(this.attach_TenantResponseVerifications), new Action<TenantResponseVerification>(this.detach_TenantResponseVerifications));
			this._TenantResponseExemptContestedInfo1s = new EntitySet<TenantResponseExemptContestedInfo1>(new Action<TenantResponseExemptContestedInfo1>(this.attach_TenantResponseExemptContestedInfo1s), new Action<TenantResponseExemptContestedInfo1>(this.detach_TenantResponseExemptContestedInfo1s));
			this._NumberRangeForUnit = default(EntityRef<NumberRangeForUnit>);
			this._CaseDetail = default(EntityRef<CaseDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantResponseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantResponseID
		{
			get
			{
				return this._TenantResponseID;
			}
			set
			{
				if ((this._TenantResponseID != value))
				{
					this.OnTenantResponseIDChanging(value);
					this.SendPropertyChanging();
					this._TenantResponseID = value;
					this.SendPropertyChanged("TenantResponseID");
					this.OnTenantResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_ID", DbType="Int")]
		public System.Nullable<int> C_ID
		{
			get
			{
				return this._C_ID;
			}
			set
			{
				if ((this._C_ID != value))
				{
					if (this._CaseDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnC_IDChanging(value);
					this.SendPropertyChanging();
					this._C_ID = value;
					this.SendPropertyChanged("C_ID");
					this.OnC_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantUserID", DbType="Int")]
		public System.Nullable<int> ApplicantUserID
		{
			get
			{
				return this._ApplicantUserID;
			}
			set
			{
				if ((this._ApplicantUserID != value))
				{
					this.OnApplicantUserIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantUserID = value;
					this.SendPropertyChanged("ApplicantUserID");
					this.OnApplicantUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdPartyUserID", DbType="Int")]
		public System.Nullable<int> ThirdPartyUserID
		{
			get
			{
				return this._ThirdPartyUserID;
			}
			set
			{
				if ((this._ThirdPartyUserID != value))
				{
					this.OnThirdPartyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdPartyUserID = value;
					this.SendPropertyChanged("ThirdPartyUserID");
					this.OnThirdPartyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyRepresentation", DbType="Bit")]
		public System.Nullable<bool> bThirdPartyRepresentation
		{
			get
			{
				return this._bThirdPartyRepresentation;
			}
			set
			{
				if ((this._bThirdPartyRepresentation != value))
				{
					this.OnbThirdPartyRepresentationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyRepresentation = value;
					this.SendPropertyChanged("bThirdPartyRepresentation");
					this.OnbThirdPartyRepresentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserID", DbType="Int")]
		public System.Nullable<int> OwnerUserID
		{
			get
			{
				return this._OwnerUserID;
			}
			set
			{
				if ((this._OwnerUserID != value))
				{
					this.OnOwnerUserIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserID = value;
					this.SendPropertyChanged("OwnerUserID");
					this.OnOwnerUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyManagerUserID", DbType="Int")]
		public System.Nullable<int> PropertyManagerUserID
		{
			get
			{
				return this._PropertyManagerUserID;
			}
			set
			{
				if ((this._PropertyManagerUserID != value))
				{
					this.OnPropertyManagerUserIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyManagerUserID = value;
					this.SendPropertyChanged("PropertyManagerUserID");
					this.OnPropertyManagerUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfUnits", DbType="Int")]
		public System.Nullable<int> NumberOfUnits
		{
			get
			{
				return this._NumberOfUnits;
			}
			set
			{
				if ((this._NumberOfUnits != value))
				{
					this.OnNumberOfUnitsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfUnits = value;
					this.SendPropertyChanged("NumberOfUnits");
					this.OnNumberOfUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitTypeID", DbType="Int NOT NULL")]
		public int UnitTypeID
		{
			get
			{
				return this._UnitTypeID;
			}
			set
			{
				if ((this._UnitTypeID != value))
				{
					this.OnUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UnitTypeID = value;
					this.SendPropertyChanged("UnitTypeID");
					this.OnUnitTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangeID", DbType="Int")]
		public System.Nullable<int> RangeID
		{
			get
			{
				return this._RangeID;
			}
			set
			{
				if ((this._RangeID != value))
				{
					if (this._NumberRangeForUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRangeIDChanging(value);
					this.SendPropertyChanging();
					this._RangeID = value;
					this.SendPropertyChanged("RangeID");
					this.OnRangeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentStatus", DbType="Bit NOT NULL")]
		public bool bRentStatus
		{
			get
			{
				return this._bRentStatus;
			}
			set
			{
				if ((this._bRentStatus != value))
				{
					this.OnbRentStatusChanging(value);
					this.SendPropertyChanging();
					this._bRentStatus = value;
					this.SendPropertyChanged("bRentStatus");
					this.OnbRentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvideExplanation", DbType="VarChar(MAX)")]
		public string ProvideExplanation
		{
			get
			{
				return this._ProvideExplanation;
			}
			set
			{
				if ((this._ProvideExplanation != value))
				{
					this.OnProvideExplanationChanging(value);
					this.SendPropertyChanging();
					this._ProvideExplanation = value;
					this.SendPropertyChanged("ProvideExplanation");
					this.OnProvideExplanationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseFiledBy", DbType="Int")]
		public System.Nullable<int> ResponseFiledBy
		{
			get
			{
				return this._ResponseFiledBy;
			}
			set
			{
				if ((this._ResponseFiledBy != value))
				{
					this.OnResponseFiledByChanging(value);
					this.SendPropertyChanging();
					this._ResponseFiledBy = value;
					this.SendPropertyChanged("ResponseFiledBy");
					this.OnResponseFiledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSubmitted", DbType="Bit NOT NULL")]
		public bool IsSubmitted
		{
			get
			{
				return this._IsSubmitted;
			}
			set
			{
				if ((this._IsSubmitted != value))
				{
					this.OnIsSubmittedChanging(value);
					this.SendPropertyChanging();
					this._IsSubmitted = value;
					this.SendPropertyChanged("IsSubmitted");
					this.OnIsSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantResponseApplicationInfo_TenantResponseExemptContestedInfo", Storage="_TenantResponseExemptContestedInfos", ThisKey="TenantResponseID", OtherKey="TenantResponseID")]
		public EntitySet<TenantResponseExemptContestedInfo> TenantResponseExemptContestedInfos
		{
			get
			{
				return this._TenantResponseExemptContestedInfos;
			}
			set
			{
				this._TenantResponseExemptContestedInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantResponseApplicationInfo_TenantResponseRentalIncrementInfo", Storage="_TenantResponseRentalIncrementInfo", ThisKey="TenantResponseID", OtherKey="RentalIncreaseInfoID", IsUnique=true, IsForeignKey=false)]
		public TenantResponseRentalIncrementInfo TenantResponseRentalIncrementInfo
		{
			get
			{
				return this._TenantResponseRentalIncrementInfo.Entity;
			}
			set
			{
				TenantResponseRentalIncrementInfo previousValue = this._TenantResponseRentalIncrementInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantResponseRentalIncrementInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantResponseRentalIncrementInfo.Entity = null;
						previousValue.TenantResponseApplicationInfo = null;
					}
					this._TenantResponseRentalIncrementInfo.Entity = value;
					if ((value != null))
					{
						value.TenantResponseApplicationInfo = this;
					}
					this.SendPropertyChanged("TenantResponseRentalIncrementInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantResponseApplicationInfo_TenantResponseRentalHistory", Storage="_TenantResponseRentalHistories", ThisKey="TenantResponseID", OtherKey="TenantResponseID")]
		public EntitySet<TenantResponseRentalHistory> TenantResponseRentalHistories
		{
			get
			{
				return this._TenantResponseRentalHistories;
			}
			set
			{
				this._TenantResponseRentalHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantResponseApplicationInfo_TenantResponseVerification", Storage="_TenantResponseVerifications", ThisKey="TenantResponseID", OtherKey="TenantResponseID")]
		public EntitySet<TenantResponseVerification> TenantResponseVerifications
		{
			get
			{
				return this._TenantResponseVerifications;
			}
			set
			{
				this._TenantResponseVerifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantResponseApplicationInfo_TenantResponseExemptContestedInfo1", Storage="_TenantResponseExemptContestedInfo1s", ThisKey="TenantResponseID", OtherKey="TenantResponseID")]
		public EntitySet<TenantResponseExemptContestedInfo1> TenantResponseExemptContestedInfo1s
		{
			get
			{
				return this._TenantResponseExemptContestedInfo1s;
			}
			set
			{
				this._TenantResponseExemptContestedInfo1s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NumberRangeForUnit_TenantResponseApplicationInfo", Storage="_NumberRangeForUnit", ThisKey="RangeID", OtherKey="RangeID", IsForeignKey=true)]
		public NumberRangeForUnit NumberRangeForUnit
		{
			get
			{
				return this._NumberRangeForUnit.Entity;
			}
			set
			{
				NumberRangeForUnit previousValue = this._NumberRangeForUnit.Entity;
				if (((previousValue != value) 
							|| (this._NumberRangeForUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NumberRangeForUnit.Entity = null;
						previousValue.TenantResponseApplicationInfos.Remove(this);
					}
					this._NumberRangeForUnit.Entity = value;
					if ((value != null))
					{
						value.TenantResponseApplicationInfos.Add(this);
						this._RangeID = value.RangeID;
					}
					else
					{
						this._RangeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("NumberRangeForUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaseDetail_TenantResponseApplicationInfo", Storage="_CaseDetail", ThisKey="C_ID", OtherKey="C_ID", IsForeignKey=true)]
		public CaseDetail CaseDetail
		{
			get
			{
				return this._CaseDetail.Entity;
			}
			set
			{
				CaseDetail previousValue = this._CaseDetail.Entity;
				if (((previousValue != value) 
							|| (this._CaseDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CaseDetail.Entity = null;
						previousValue.TenantResponseApplicationInfos.Remove(this);
					}
					this._CaseDetail.Entity = value;
					if ((value != null))
					{
						value.TenantResponseApplicationInfos.Add(this);
						this._C_ID = value.C_ID;
					}
					else
					{
						this._C_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CaseDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TenantResponseExemptContestedInfos(TenantResponseExemptContestedInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantResponseApplicationInfo = this;
		}
		
		private void detach_TenantResponseExemptContestedInfos(TenantResponseExemptContestedInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantResponseApplicationInfo = null;
		}
		
		private void attach_TenantResponseRentalHistories(TenantResponseRentalHistory entity)
		{
			this.SendPropertyChanging();
			entity.TenantResponseApplicationInfo = this;
		}
		
		private void detach_TenantResponseRentalHistories(TenantResponseRentalHistory entity)
		{
			this.SendPropertyChanging();
			entity.TenantResponseApplicationInfo = null;
		}
		
		private void attach_TenantResponseVerifications(TenantResponseVerification entity)
		{
			this.SendPropertyChanging();
			entity.TenantResponseApplicationInfo = this;
		}
		
		private void detach_TenantResponseVerifications(TenantResponseVerification entity)
		{
			this.SendPropertyChanging();
			entity.TenantResponseApplicationInfo = null;
		}
		
		private void attach_TenantResponseExemptContestedInfo1s(TenantResponseExemptContestedInfo1 entity)
		{
			this.SendPropertyChanging();
			entity.TenantResponseApplicationInfo = this;
		}
		
		private void detach_TenantResponseExemptContestedInfo1s(TenantResponseExemptContestedInfo1 entity)
		{
			this.SendPropertyChanging();
			entity.TenantResponseApplicationInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantResponseRentalIncrementInfo")]
	public partial class TenantResponseRentalIncrementInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentalIncreaseInfoID;
		
		private int _TenantResponseID;
		
		private System.Nullable<bool> _bRentIncreaseNoticeGiven;
		
		private System.Nullable<System.DateTime> _RentIncreaseNoticeDate;
		
		private System.Nullable<System.DateTime> _RentIncreaseEffectiveDate;
		
		private System.Nullable<decimal> _RentIncreasedFrom;
		
		private System.Nullable<decimal> _RentIncreasedTo;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private EntityRef<TenantResponseApplicationInfo> _TenantResponseApplicationInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentalIncreaseInfoIDChanging(int value);
    partial void OnRentalIncreaseInfoIDChanged();
    partial void OnTenantResponseIDChanging(int value);
    partial void OnTenantResponseIDChanged();
    partial void OnbRentIncreaseNoticeGivenChanging(System.Nullable<bool> value);
    partial void OnbRentIncreaseNoticeGivenChanged();
    partial void OnRentIncreaseNoticeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseNoticeDateChanged();
    partial void OnRentIncreaseEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseEffectiveDateChanged();
    partial void OnRentIncreasedFromChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedFromChanged();
    partial void OnRentIncreasedToChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedToChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TenantResponseRentalIncrementInfo()
		{
			this._TenantResponseApplicationInfo = default(EntityRef<TenantResponseApplicationInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalIncreaseInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentalIncreaseInfoID
		{
			get
			{
				return this._RentalIncreaseInfoID;
			}
			set
			{
				if ((this._RentalIncreaseInfoID != value))
				{
					if (this._TenantResponseApplicationInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRentalIncreaseInfoIDChanging(value);
					this.SendPropertyChanging();
					this._RentalIncreaseInfoID = value;
					this.SendPropertyChanged("RentalIncreaseInfoID");
					this.OnRentalIncreaseInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantResponseID", DbType="Int NOT NULL")]
		public int TenantResponseID
		{
			get
			{
				return this._TenantResponseID;
			}
			set
			{
				if ((this._TenantResponseID != value))
				{
					this.OnTenantResponseIDChanging(value);
					this.SendPropertyChanging();
					this._TenantResponseID = value;
					this.SendPropertyChanged("TenantResponseID");
					this.OnTenantResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentIncreaseNoticeGiven", DbType="Bit")]
		public System.Nullable<bool> bRentIncreaseNoticeGiven
		{
			get
			{
				return this._bRentIncreaseNoticeGiven;
			}
			set
			{
				if ((this._bRentIncreaseNoticeGiven != value))
				{
					this.OnbRentIncreaseNoticeGivenChanging(value);
					this.SendPropertyChanging();
					this._bRentIncreaseNoticeGiven = value;
					this.SendPropertyChanged("bRentIncreaseNoticeGiven");
					this.OnbRentIncreaseNoticeGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseNoticeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseNoticeDate
		{
			get
			{
				return this._RentIncreaseNoticeDate;
			}
			set
			{
				if ((this._RentIncreaseNoticeDate != value))
				{
					this.OnRentIncreaseNoticeDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseNoticeDate = value;
					this.SendPropertyChanged("RentIncreaseNoticeDate");
					this.OnRentIncreaseNoticeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseEffectiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseEffectiveDate
		{
			get
			{
				return this._RentIncreaseEffectiveDate;
			}
			set
			{
				if ((this._RentIncreaseEffectiveDate != value))
				{
					this.OnRentIncreaseEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseEffectiveDate = value;
					this.SendPropertyChanged("RentIncreaseEffectiveDate");
					this.OnRentIncreaseEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedFrom", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedFrom
		{
			get
			{
				return this._RentIncreasedFrom;
			}
			set
			{
				if ((this._RentIncreasedFrom != value))
				{
					this.OnRentIncreasedFromChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedFrom = value;
					this.SendPropertyChanged("RentIncreasedFrom");
					this.OnRentIncreasedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedTo", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedTo
		{
			get
			{
				return this._RentIncreasedTo;
			}
			set
			{
				if ((this._RentIncreasedTo != value))
				{
					this.OnRentIncreasedToChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedTo = value;
					this.SendPropertyChanged("RentIncreasedTo");
					this.OnRentIncreasedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantResponseApplicationInfo_TenantResponseRentalIncrementInfo", Storage="_TenantResponseApplicationInfo", ThisKey="RentalIncreaseInfoID", OtherKey="TenantResponseID", IsForeignKey=true)]
		public TenantResponseApplicationInfo TenantResponseApplicationInfo
		{
			get
			{
				return this._TenantResponseApplicationInfo.Entity;
			}
			set
			{
				TenantResponseApplicationInfo previousValue = this._TenantResponseApplicationInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantResponseApplicationInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantResponseApplicationInfo.Entity = null;
						previousValue.TenantResponseRentalIncrementInfo = null;
					}
					this._TenantResponseApplicationInfo.Entity = value;
					if ((value != null))
					{
						value.TenantResponseRentalIncrementInfo = this;
						this._RentalIncreaseInfoID = value.TenantResponseID;
					}
					else
					{
						this._RentalIncreaseInfoID = default(int);
					}
					this.SendPropertyChanged("TenantResponseApplicationInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantResponsePageSubmissionStatus")]
	public partial class TenantResponsePageSubmissionStatus1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NavigationID;
		
		private int _CustomerID;
		
		private System.Nullable<int> _TenantResponseID;
		
		private System.Nullable<bool> _ImportantInformation;
		
		private System.Nullable<bool> _ApplicantInformation;
		
		private System.Nullable<bool> _ExemptionContested;
		
		private System.Nullable<bool> _RentHistory;
		
		private System.Nullable<bool> _AdditionalDocumentation;
		
		private System.Nullable<bool> _Review;
		
		private System.Nullable<bool> _Verification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNavigationIDChanging(int value);
    partial void OnNavigationIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnTenantResponseIDChanging(System.Nullable<int> value);
    partial void OnTenantResponseIDChanged();
    partial void OnImportantInformationChanging(System.Nullable<bool> value);
    partial void OnImportantInformationChanged();
    partial void OnApplicantInformationChanging(System.Nullable<bool> value);
    partial void OnApplicantInformationChanged();
    partial void OnExemptionContestedChanging(System.Nullable<bool> value);
    partial void OnExemptionContestedChanged();
    partial void OnRentHistoryChanging(System.Nullable<bool> value);
    partial void OnRentHistoryChanged();
    partial void OnAdditionalDocumentationChanging(System.Nullable<bool> value);
    partial void OnAdditionalDocumentationChanged();
    partial void OnReviewChanging(System.Nullable<bool> value);
    partial void OnReviewChanged();
    partial void OnVerificationChanging(System.Nullable<bool> value);
    partial void OnVerificationChanged();
    #endregion
		
		public TenantResponsePageSubmissionStatus1()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NavigationID
		{
			get
			{
				return this._NavigationID;
			}
			set
			{
				if ((this._NavigationID != value))
				{
					this.OnNavigationIDChanging(value);
					this.SendPropertyChanging();
					this._NavigationID = value;
					this.SendPropertyChanged("NavigationID");
					this.OnNavigationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantResponseID", DbType="Int")]
		public System.Nullable<int> TenantResponseID
		{
			get
			{
				return this._TenantResponseID;
			}
			set
			{
				if ((this._TenantResponseID != value))
				{
					this.OnTenantResponseIDChanging(value);
					this.SendPropertyChanging();
					this._TenantResponseID = value;
					this.SendPropertyChanged("TenantResponseID");
					this.OnTenantResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportantInformation", DbType="Bit")]
		public System.Nullable<bool> ImportantInformation
		{
			get
			{
				return this._ImportantInformation;
			}
			set
			{
				if ((this._ImportantInformation != value))
				{
					this.OnImportantInformationChanging(value);
					this.SendPropertyChanging();
					this._ImportantInformation = value;
					this.SendPropertyChanged("ImportantInformation");
					this.OnImportantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantInformation", DbType="Bit")]
		public System.Nullable<bool> ApplicantInformation
		{
			get
			{
				return this._ApplicantInformation;
			}
			set
			{
				if ((this._ApplicantInformation != value))
				{
					this.OnApplicantInformationChanging(value);
					this.SendPropertyChanging();
					this._ApplicantInformation = value;
					this.SendPropertyChanged("ApplicantInformation");
					this.OnApplicantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExemptionContested", DbType="Bit")]
		public System.Nullable<bool> ExemptionContested
		{
			get
			{
				return this._ExemptionContested;
			}
			set
			{
				if ((this._ExemptionContested != value))
				{
					this.OnExemptionContestedChanging(value);
					this.SendPropertyChanging();
					this._ExemptionContested = value;
					this.SendPropertyChanged("ExemptionContested");
					this.OnExemptionContestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentHistory", DbType="Bit")]
		public System.Nullable<bool> RentHistory
		{
			get
			{
				return this._RentHistory;
			}
			set
			{
				if ((this._RentHistory != value))
				{
					this.OnRentHistoryChanging(value);
					this.SendPropertyChanging();
					this._RentHistory = value;
					this.SendPropertyChanged("RentHistory");
					this.OnRentHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalDocumentation", DbType="Bit")]
		public System.Nullable<bool> AdditionalDocumentation
		{
			get
			{
				return this._AdditionalDocumentation;
			}
			set
			{
				if ((this._AdditionalDocumentation != value))
				{
					this.OnAdditionalDocumentationChanging(value);
					this.SendPropertyChanging();
					this._AdditionalDocumentation = value;
					this.SendPropertyChanged("AdditionalDocumentation");
					this.OnAdditionalDocumentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Review", DbType="Bit")]
		public System.Nullable<bool> Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				if ((this._Review != value))
				{
					this.OnReviewChanging(value);
					this.SendPropertyChanging();
					this._Review = value;
					this.SendPropertyChanged("Review");
					this.OnReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verification", DbType="Bit")]
		public System.Nullable<bool> Verification
		{
			get
			{
				return this._Verification;
			}
			set
			{
				if ((this._Verification != value))
				{
					this.OnVerificationChanging(value);
					this.SendPropertyChanging();
					this._Verification = value;
					this.SendPropertyChanged("Verification");
					this.OnVerificationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantResponseRentalHistory")]
	public partial class TenantResponseRentalHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantResponseRentalHistoryID;
		
		private int _TenantResponseID;
		
		private System.Nullable<System.DateTime> _RentalAgreementDate;
		
		private System.Nullable<System.DateTime> _MoveInDate;
		
		private System.Nullable<decimal> _InitialRent;
		
		private System.Nullable<bool> _bRAPNoticeGiven;
		
		private System.Nullable<System.DateTime> _RAPNoticeGivenDate;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<TenantResponseApplicationInfo> _TenantResponseApplicationInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantResponseRentalHistoryIDChanging(int value);
    partial void OnTenantResponseRentalHistoryIDChanged();
    partial void OnTenantResponseIDChanging(int value);
    partial void OnTenantResponseIDChanged();
    partial void OnRentalAgreementDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentalAgreementDateChanged();
    partial void OnMoveInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMoveInDateChanged();
    partial void OnInitialRentChanging(System.Nullable<decimal> value);
    partial void OnInitialRentChanged();
    partial void OnbRAPNoticeGivenChanging(System.Nullable<bool> value);
    partial void OnbRAPNoticeGivenChanged();
    partial void OnRAPNoticeGivenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRAPNoticeGivenDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TenantResponseRentalHistory()
		{
			this._TenantResponseApplicationInfo = default(EntityRef<TenantResponseApplicationInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantResponseRentalHistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantResponseRentalHistoryID
		{
			get
			{
				return this._TenantResponseRentalHistoryID;
			}
			set
			{
				if ((this._TenantResponseRentalHistoryID != value))
				{
					this.OnTenantResponseRentalHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._TenantResponseRentalHistoryID = value;
					this.SendPropertyChanged("TenantResponseRentalHistoryID");
					this.OnTenantResponseRentalHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantResponseID", DbType="Int NOT NULL")]
		public int TenantResponseID
		{
			get
			{
				return this._TenantResponseID;
			}
			set
			{
				if ((this._TenantResponseID != value))
				{
					if (this._TenantResponseApplicationInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantResponseIDChanging(value);
					this.SendPropertyChanging();
					this._TenantResponseID = value;
					this.SendPropertyChanged("TenantResponseID");
					this.OnTenantResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalAgreementDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentalAgreementDate
		{
			get
			{
				return this._RentalAgreementDate;
			}
			set
			{
				if ((this._RentalAgreementDate != value))
				{
					this.OnRentalAgreementDateChanging(value);
					this.SendPropertyChanging();
					this._RentalAgreementDate = value;
					this.SendPropertyChanged("RentalAgreementDate");
					this.OnRentalAgreementDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoveInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MoveInDate
		{
			get
			{
				return this._MoveInDate;
			}
			set
			{
				if ((this._MoveInDate != value))
				{
					this.OnMoveInDateChanging(value);
					this.SendPropertyChanging();
					this._MoveInDate = value;
					this.SendPropertyChanged("MoveInDate");
					this.OnMoveInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialRent", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> InitialRent
		{
			get
			{
				return this._InitialRent;
			}
			set
			{
				if ((this._InitialRent != value))
				{
					this.OnInitialRentChanging(value);
					this.SendPropertyChanging();
					this._InitialRent = value;
					this.SendPropertyChanged("InitialRent");
					this.OnInitialRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRAPNoticeGiven", DbType="Bit")]
		public System.Nullable<bool> bRAPNoticeGiven
		{
			get
			{
				return this._bRAPNoticeGiven;
			}
			set
			{
				if ((this._bRAPNoticeGiven != value))
				{
					this.OnbRAPNoticeGivenChanging(value);
					this.SendPropertyChanging();
					this._bRAPNoticeGiven = value;
					this.SendPropertyChanged("bRAPNoticeGiven");
					this.OnbRAPNoticeGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAPNoticeGivenDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RAPNoticeGivenDate
		{
			get
			{
				return this._RAPNoticeGivenDate;
			}
			set
			{
				if ((this._RAPNoticeGivenDate != value))
				{
					this.OnRAPNoticeGivenDateChanging(value);
					this.SendPropertyChanging();
					this._RAPNoticeGivenDate = value;
					this.SendPropertyChanged("RAPNoticeGivenDate");
					this.OnRAPNoticeGivenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantResponseApplicationInfo_TenantResponseRentalHistory", Storage="_TenantResponseApplicationInfo", ThisKey="TenantResponseID", OtherKey="TenantResponseID", IsForeignKey=true)]
		public TenantResponseApplicationInfo TenantResponseApplicationInfo
		{
			get
			{
				return this._TenantResponseApplicationInfo.Entity;
			}
			set
			{
				TenantResponseApplicationInfo previousValue = this._TenantResponseApplicationInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantResponseApplicationInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantResponseApplicationInfo.Entity = null;
						previousValue.TenantResponseRentalHistories.Remove(this);
					}
					this._TenantResponseApplicationInfo.Entity = value;
					if ((value != null))
					{
						value.TenantResponseRentalHistories.Add(this);
						this._TenantResponseID = value.TenantResponseID;
					}
					else
					{
						this._TenantResponseID = default(int);
					}
					this.SendPropertyChanged("TenantResponseApplicationInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantResponseVerification")]
	public partial class TenantResponseVerification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VerificationID;
		
		private int _TenantResponseID;
		
		private bool _bDeclarePenalty;
		
		private bool _bThirdParty;
		
		private bool _bThirdPartyMediation;
		
		private bool _bCaseMediation;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<TenantResponseApplicationInfo> _TenantResponseApplicationInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVerificationIDChanging(int value);
    partial void OnVerificationIDChanged();
    partial void OnTenantResponseIDChanging(int value);
    partial void OnTenantResponseIDChanged();
    partial void OnbDeclarePenaltyChanging(bool value);
    partial void OnbDeclarePenaltyChanged();
    partial void OnbThirdPartyChanging(bool value);
    partial void OnbThirdPartyChanged();
    partial void OnbThirdPartyMediationChanging(bool value);
    partial void OnbThirdPartyMediationChanged();
    partial void OnbCaseMediationChanging(bool value);
    partial void OnbCaseMediationChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TenantResponseVerification()
		{
			this._TenantResponseApplicationInfo = default(EntityRef<TenantResponseApplicationInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VerificationID
		{
			get
			{
				return this._VerificationID;
			}
			set
			{
				if ((this._VerificationID != value))
				{
					this.OnVerificationIDChanging(value);
					this.SendPropertyChanging();
					this._VerificationID = value;
					this.SendPropertyChanged("VerificationID");
					this.OnVerificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantResponseID", DbType="Int NOT NULL")]
		public int TenantResponseID
		{
			get
			{
				return this._TenantResponseID;
			}
			set
			{
				if ((this._TenantResponseID != value))
				{
					if (this._TenantResponseApplicationInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantResponseIDChanging(value);
					this.SendPropertyChanging();
					this._TenantResponseID = value;
					this.SendPropertyChanged("TenantResponseID");
					this.OnTenantResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDeclarePenalty", DbType="Bit NOT NULL")]
		public bool bDeclarePenalty
		{
			get
			{
				return this._bDeclarePenalty;
			}
			set
			{
				if ((this._bDeclarePenalty != value))
				{
					this.OnbDeclarePenaltyChanging(value);
					this.SendPropertyChanging();
					this._bDeclarePenalty = value;
					this.SendPropertyChanged("bDeclarePenalty");
					this.OnbDeclarePenaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdParty", DbType="Bit NOT NULL")]
		public bool bThirdParty
		{
			get
			{
				return this._bThirdParty;
			}
			set
			{
				if ((this._bThirdParty != value))
				{
					this.OnbThirdPartyChanging(value);
					this.SendPropertyChanging();
					this._bThirdParty = value;
					this.SendPropertyChanged("bThirdParty");
					this.OnbThirdPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyMediation", DbType="Bit NOT NULL")]
		public bool bThirdPartyMediation
		{
			get
			{
				return this._bThirdPartyMediation;
			}
			set
			{
				if ((this._bThirdPartyMediation != value))
				{
					this.OnbThirdPartyMediationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyMediation = value;
					this.SendPropertyChanged("bThirdPartyMediation");
					this.OnbThirdPartyMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bCaseMediation", DbType="Bit NOT NULL")]
		public bool bCaseMediation
		{
			get
			{
				return this._bCaseMediation;
			}
			set
			{
				if ((this._bCaseMediation != value))
				{
					this.OnbCaseMediationChanging(value);
					this.SendPropertyChanging();
					this._bCaseMediation = value;
					this.SendPropertyChanged("bCaseMediation");
					this.OnbCaseMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="Date NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantResponseApplicationInfo_TenantResponseVerification", Storage="_TenantResponseApplicationInfo", ThisKey="TenantResponseID", OtherKey="TenantResponseID", IsForeignKey=true)]
		public TenantResponseApplicationInfo TenantResponseApplicationInfo
		{
			get
			{
				return this._TenantResponseApplicationInfo.Entity;
			}
			set
			{
				TenantResponseApplicationInfo previousValue = this._TenantResponseApplicationInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantResponseApplicationInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantResponseApplicationInfo.Entity = null;
						previousValue.TenantResponseVerifications.Remove(this);
					}
					this._TenantResponseApplicationInfo.Entity = value;
					if ((value != null))
					{
						value.TenantResponseVerifications.Add(this);
						this._TenantResponseID = value.TenantResponseID;
					}
					else
					{
						this._TenantResponseID = default(int);
					}
					this.SendPropertyChanged("TenantResponseApplicationInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppealPageSubmissionStatus")]
	public partial class AppealPageSubmissionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NavigationID;
		
		private int _CustomerID;
		
		private System.Nullable<bool> _ImportantInformation;
		
		private System.Nullable<bool> _ApplicantInformation;
		
		private System.Nullable<bool> _GroundsOfAppeal;
		
		private System.Nullable<bool> _AdditionalDocumentation;
		
		private System.Nullable<bool> _ServingAppeal;
		
		private System.Nullable<bool> _Review;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNavigationIDChanging(int value);
    partial void OnNavigationIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnImportantInformationChanging(System.Nullable<bool> value);
    partial void OnImportantInformationChanged();
    partial void OnApplicantInformationChanging(System.Nullable<bool> value);
    partial void OnApplicantInformationChanged();
    partial void OnGroundsOfAppealChanging(System.Nullable<bool> value);
    partial void OnGroundsOfAppealChanged();
    partial void OnAdditionalDocumentationChanging(System.Nullable<bool> value);
    partial void OnAdditionalDocumentationChanged();
    partial void OnServingAppealChanging(System.Nullable<bool> value);
    partial void OnServingAppealChanged();
    partial void OnReviewChanging(System.Nullable<bool> value);
    partial void OnReviewChanged();
    #endregion
		
		public AppealPageSubmissionStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NavigationID
		{
			get
			{
				return this._NavigationID;
			}
			set
			{
				if ((this._NavigationID != value))
				{
					this.OnNavigationIDChanging(value);
					this.SendPropertyChanging();
					this._NavigationID = value;
					this.SendPropertyChanged("NavigationID");
					this.OnNavigationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportantInformation", DbType="Bit")]
		public System.Nullable<bool> ImportantInformation
		{
			get
			{
				return this._ImportantInformation;
			}
			set
			{
				if ((this._ImportantInformation != value))
				{
					this.OnImportantInformationChanging(value);
					this.SendPropertyChanging();
					this._ImportantInformation = value;
					this.SendPropertyChanged("ImportantInformation");
					this.OnImportantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantInformation", DbType="Bit")]
		public System.Nullable<bool> ApplicantInformation
		{
			get
			{
				return this._ApplicantInformation;
			}
			set
			{
				if ((this._ApplicantInformation != value))
				{
					this.OnApplicantInformationChanging(value);
					this.SendPropertyChanging();
					this._ApplicantInformation = value;
					this.SendPropertyChanged("ApplicantInformation");
					this.OnApplicantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroundsOfAppeal", DbType="Bit")]
		public System.Nullable<bool> GroundsOfAppeal
		{
			get
			{
				return this._GroundsOfAppeal;
			}
			set
			{
				if ((this._GroundsOfAppeal != value))
				{
					this.OnGroundsOfAppealChanging(value);
					this.SendPropertyChanging();
					this._GroundsOfAppeal = value;
					this.SendPropertyChanged("GroundsOfAppeal");
					this.OnGroundsOfAppealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalDocumentation", DbType="Bit")]
		public System.Nullable<bool> AdditionalDocumentation
		{
			get
			{
				return this._AdditionalDocumentation;
			}
			set
			{
				if ((this._AdditionalDocumentation != value))
				{
					this.OnAdditionalDocumentationChanging(value);
					this.SendPropertyChanging();
					this._AdditionalDocumentation = value;
					this.SendPropertyChanged("AdditionalDocumentation");
					this.OnAdditionalDocumentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServingAppeal", DbType="Bit")]
		public System.Nullable<bool> ServingAppeal
		{
			get
			{
				return this._ServingAppeal;
			}
			set
			{
				if ((this._ServingAppeal != value))
				{
					this.OnServingAppealChanging(value);
					this.SendPropertyChanging();
					this._ServingAppeal = value;
					this.SendPropertyChanged("ServingAppeal");
					this.OnServingAppealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Review", DbType="Bit")]
		public System.Nullable<bool> Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				if ((this._Review != value))
				{
					this.OnReviewChanging(value);
					this.SendPropertyChanging();
					this._Review = value;
					this.SendPropertyChanged("Review");
					this.OnReviewChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerResponsePropertyInfo")]
	public partial class OwnerResponsePropertyInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PropertyID;
		
		private System.Nullable<System.DateTime> _MovedInDate;
		
		private System.Nullable<decimal> _InitialRent;
		
		private System.Nullable<System.DateTime> _RAPNoticeGivenDate;
		
		private System.Nullable<bool> _bCapitalImprovementIncrease;
		
		private System.Nullable<bool> _bCaptialImprovementContested;
		
		private string _CaseNumber;
		
		private System.Nullable<bool> _bRAPNoticeToRAPOffice;
		
		private System.Nullable<System.DateTime> _RAPNoticeToRAPOfficeDate;
		
		private System.Nullable<bool> _bExemptFromRentAdjustment;
		
		private System.Nullable<bool> _bPriorTenantLeftAfteQuitNotice;
		
		private string _PriorTenantLeftAfteQuitNoticeExplenation;
		
		private System.Nullable<bool> _bPriorTenantLeftAfteRentIncreaseNotice;
		
		private string _PriorTenantLeftAfteRentIncreaseNoticeExplenation;
		
		private System.Nullable<bool> _bPriorTenantEvicted;
		
		private string _PriorTenantEvictedExplenation;
		
		private System.Nullable<bool> _bSingleFamilyUnitOrCondominium;
		
		private string _SingleFamilyUnitOrCondominiumExplenation;
		
		private System.Nullable<bool> _bRoommatesWhenMoviedIN;
		
		private string _RoommatesWhenMoviedINExplenation;
		
		private System.Nullable<bool> _bUnitPruchased;
		
		private string _UnitPruchasedExplenation;
		
		private string _PurchasedFrom;
		
		private System.Nullable<bool> _bEntireBuildingPurchased;
		
		private string _EntireBuildingPurchasedExplenation;
		
		private System.Nullable<bool> _bPetitionFiled;
		
		private int _CustomerID;
		
		private int _UnitTypeID;
		
		private System.Nullable<bool> _CurrentOnRent;
		
		private System.Nullable<int> _RAPNoticeStatusID;
		
		private System.Nullable<bool> _bOutstandingViolations;
		
		private string _OutstandingViolationsExplenation;
		
		private System.Nullable<bool> _bRentControlledOtherThanRAP;
		
		private System.Nullable<bool> _bUnitNewlyConstructed;
		
		private System.Nullable<bool> _bTenantWasResidentOfHotelWhileFiling;
		
		private System.Nullable<bool> _bUnitWasRehabilitated;
		
		private System.Nullable<bool> _bUnitIsAccommodation;
		
		private System.Nullable<bool> _bHasUnitOccupiedByOwner;
		
		private EntitySet<OwnerResponseTenantInfo> _OwnerResponseTenantInfos;
		
		private EntitySet<OwnerResponseRentalIncrementInfo> _OwnerResponseRentalIncrementInfos;
		
		private EntitySet<OwnerResponseInfo> _OwnerResponseInfos;
		
		private EntityRef<UnitType> _UnitType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnMovedInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMovedInDateChanged();
    partial void OnInitialRentChanging(System.Nullable<decimal> value);
    partial void OnInitialRentChanged();
    partial void OnRAPNoticeGivenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRAPNoticeGivenDateChanged();
    partial void OnbCapitalImprovementIncreaseChanging(System.Nullable<bool> value);
    partial void OnbCapitalImprovementIncreaseChanged();
    partial void OnbCaptialImprovementContestedChanging(System.Nullable<bool> value);
    partial void OnbCaptialImprovementContestedChanged();
    partial void OnCaseNumberChanging(string value);
    partial void OnCaseNumberChanged();
    partial void OnbRAPNoticeToRAPOfficeChanging(System.Nullable<bool> value);
    partial void OnbRAPNoticeToRAPOfficeChanged();
    partial void OnRAPNoticeToRAPOfficeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRAPNoticeToRAPOfficeDateChanged();
    partial void OnbExemptFromRentAdjustmentChanging(System.Nullable<bool> value);
    partial void OnbExemptFromRentAdjustmentChanged();
    partial void OnbPriorTenantLeftAfteQuitNoticeChanging(System.Nullable<bool> value);
    partial void OnbPriorTenantLeftAfteQuitNoticeChanged();
    partial void OnPriorTenantLeftAfteQuitNoticeExplenationChanging(string value);
    partial void OnPriorTenantLeftAfteQuitNoticeExplenationChanged();
    partial void OnbPriorTenantLeftAfteRentIncreaseNoticeChanging(System.Nullable<bool> value);
    partial void OnbPriorTenantLeftAfteRentIncreaseNoticeChanged();
    partial void OnPriorTenantLeftAfteRentIncreaseNoticeExplenationChanging(string value);
    partial void OnPriorTenantLeftAfteRentIncreaseNoticeExplenationChanged();
    partial void OnbPriorTenantEvictedChanging(System.Nullable<bool> value);
    partial void OnbPriorTenantEvictedChanged();
    partial void OnPriorTenantEvictedExplenationChanging(string value);
    partial void OnPriorTenantEvictedExplenationChanged();
    partial void OnbSingleFamilyUnitOrCondominiumChanging(System.Nullable<bool> value);
    partial void OnbSingleFamilyUnitOrCondominiumChanged();
    partial void OnSingleFamilyUnitOrCondominiumExplenationChanging(string value);
    partial void OnSingleFamilyUnitOrCondominiumExplenationChanged();
    partial void OnbRoommatesWhenMoviedINChanging(System.Nullable<bool> value);
    partial void OnbRoommatesWhenMoviedINChanged();
    partial void OnRoommatesWhenMoviedINExplenationChanging(string value);
    partial void OnRoommatesWhenMoviedINExplenationChanged();
    partial void OnbUnitPruchasedChanging(System.Nullable<bool> value);
    partial void OnbUnitPruchasedChanged();
    partial void OnUnitPruchasedExplenationChanging(string value);
    partial void OnUnitPruchasedExplenationChanged();
    partial void OnPurchasedFromChanging(string value);
    partial void OnPurchasedFromChanged();
    partial void OnbEntireBuildingPurchasedChanging(System.Nullable<bool> value);
    partial void OnbEntireBuildingPurchasedChanged();
    partial void OnEntireBuildingPurchasedExplenationChanging(string value);
    partial void OnEntireBuildingPurchasedExplenationChanged();
    partial void OnbPetitionFiledChanging(System.Nullable<bool> value);
    partial void OnbPetitionFiledChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnUnitTypeIDChanging(int value);
    partial void OnUnitTypeIDChanged();
    partial void OnCurrentOnRentChanging(System.Nullable<bool> value);
    partial void OnCurrentOnRentChanged();
    partial void OnRAPNoticeStatusIDChanging(System.Nullable<int> value);
    partial void OnRAPNoticeStatusIDChanged();
    partial void OnbOutstandingViolationsChanging(System.Nullable<bool> value);
    partial void OnbOutstandingViolationsChanged();
    partial void OnOutstandingViolationsExplenationChanging(string value);
    partial void OnOutstandingViolationsExplenationChanged();
    partial void OnbRentControlledOtherThanRAPChanging(System.Nullable<bool> value);
    partial void OnbRentControlledOtherThanRAPChanged();
    partial void OnbUnitNewlyConstructedChanging(System.Nullable<bool> value);
    partial void OnbUnitNewlyConstructedChanged();
    partial void OnbTenantWasResidentOfHotelWhileFilingChanging(System.Nullable<bool> value);
    partial void OnbTenantWasResidentOfHotelWhileFilingChanged();
    partial void OnbUnitWasRehabilitatedChanging(System.Nullable<bool> value);
    partial void OnbUnitWasRehabilitatedChanged();
    partial void OnbUnitIsAccommodationChanging(System.Nullable<bool> value);
    partial void OnbUnitIsAccommodationChanged();
    partial void OnbHasUnitOccupiedByOwnerChanging(System.Nullable<bool> value);
    partial void OnbHasUnitOccupiedByOwnerChanged();
    #endregion
		
		public OwnerResponsePropertyInfo()
		{
			this._OwnerResponseTenantInfos = new EntitySet<OwnerResponseTenantInfo>(new Action<OwnerResponseTenantInfo>(this.attach_OwnerResponseTenantInfos), new Action<OwnerResponseTenantInfo>(this.detach_OwnerResponseTenantInfos));
			this._OwnerResponseRentalIncrementInfos = new EntitySet<OwnerResponseRentalIncrementInfo>(new Action<OwnerResponseRentalIncrementInfo>(this.attach_OwnerResponseRentalIncrementInfos), new Action<OwnerResponseRentalIncrementInfo>(this.detach_OwnerResponseRentalIncrementInfos));
			this._OwnerResponseInfos = new EntitySet<OwnerResponseInfo>(new Action<OwnerResponseInfo>(this.attach_OwnerResponseInfos), new Action<OwnerResponseInfo>(this.detach_OwnerResponseInfos));
			this._UnitType = default(EntityRef<UnitType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovedInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MovedInDate
		{
			get
			{
				return this._MovedInDate;
			}
			set
			{
				if ((this._MovedInDate != value))
				{
					this.OnMovedInDateChanging(value);
					this.SendPropertyChanging();
					this._MovedInDate = value;
					this.SendPropertyChanged("MovedInDate");
					this.OnMovedInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialRent", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> InitialRent
		{
			get
			{
				return this._InitialRent;
			}
			set
			{
				if ((this._InitialRent != value))
				{
					this.OnInitialRentChanging(value);
					this.SendPropertyChanging();
					this._InitialRent = value;
					this.SendPropertyChanged("InitialRent");
					this.OnInitialRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAPNoticeGivenDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RAPNoticeGivenDate
		{
			get
			{
				return this._RAPNoticeGivenDate;
			}
			set
			{
				if ((this._RAPNoticeGivenDate != value))
				{
					this.OnRAPNoticeGivenDateChanging(value);
					this.SendPropertyChanging();
					this._RAPNoticeGivenDate = value;
					this.SendPropertyChanged("RAPNoticeGivenDate");
					this.OnRAPNoticeGivenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bCapitalImprovementIncrease", DbType="Bit")]
		public System.Nullable<bool> bCapitalImprovementIncrease
		{
			get
			{
				return this._bCapitalImprovementIncrease;
			}
			set
			{
				if ((this._bCapitalImprovementIncrease != value))
				{
					this.OnbCapitalImprovementIncreaseChanging(value);
					this.SendPropertyChanging();
					this._bCapitalImprovementIncrease = value;
					this.SendPropertyChanged("bCapitalImprovementIncrease");
					this.OnbCapitalImprovementIncreaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bCaptialImprovementContested", DbType="Bit")]
		public System.Nullable<bool> bCaptialImprovementContested
		{
			get
			{
				return this._bCaptialImprovementContested;
			}
			set
			{
				if ((this._bCaptialImprovementContested != value))
				{
					this.OnbCaptialImprovementContestedChanging(value);
					this.SendPropertyChanging();
					this._bCaptialImprovementContested = value;
					this.SendPropertyChanged("bCaptialImprovementContested");
					this.OnbCaptialImprovementContestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNumber", DbType="VarChar(50)")]
		public string CaseNumber
		{
			get
			{
				return this._CaseNumber;
			}
			set
			{
				if ((this._CaseNumber != value))
				{
					this.OnCaseNumberChanging(value);
					this.SendPropertyChanging();
					this._CaseNumber = value;
					this.SendPropertyChanged("CaseNumber");
					this.OnCaseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRAPNoticeToRAPOffice", DbType="Bit")]
		public System.Nullable<bool> bRAPNoticeToRAPOffice
		{
			get
			{
				return this._bRAPNoticeToRAPOffice;
			}
			set
			{
				if ((this._bRAPNoticeToRAPOffice != value))
				{
					this.OnbRAPNoticeToRAPOfficeChanging(value);
					this.SendPropertyChanging();
					this._bRAPNoticeToRAPOffice = value;
					this.SendPropertyChanged("bRAPNoticeToRAPOffice");
					this.OnbRAPNoticeToRAPOfficeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAPNoticeToRAPOfficeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RAPNoticeToRAPOfficeDate
		{
			get
			{
				return this._RAPNoticeToRAPOfficeDate;
			}
			set
			{
				if ((this._RAPNoticeToRAPOfficeDate != value))
				{
					this.OnRAPNoticeToRAPOfficeDateChanging(value);
					this.SendPropertyChanging();
					this._RAPNoticeToRAPOfficeDate = value;
					this.SendPropertyChanged("RAPNoticeToRAPOfficeDate");
					this.OnRAPNoticeToRAPOfficeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bExemptFromRentAdjustment", DbType="Bit")]
		public System.Nullable<bool> bExemptFromRentAdjustment
		{
			get
			{
				return this._bExemptFromRentAdjustment;
			}
			set
			{
				if ((this._bExemptFromRentAdjustment != value))
				{
					this.OnbExemptFromRentAdjustmentChanging(value);
					this.SendPropertyChanging();
					this._bExemptFromRentAdjustment = value;
					this.SendPropertyChanged("bExemptFromRentAdjustment");
					this.OnbExemptFromRentAdjustmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPriorTenantLeftAfteQuitNotice", DbType="Bit")]
		public System.Nullable<bool> bPriorTenantLeftAfteQuitNotice
		{
			get
			{
				return this._bPriorTenantLeftAfteQuitNotice;
			}
			set
			{
				if ((this._bPriorTenantLeftAfteQuitNotice != value))
				{
					this.OnbPriorTenantLeftAfteQuitNoticeChanging(value);
					this.SendPropertyChanging();
					this._bPriorTenantLeftAfteQuitNotice = value;
					this.SendPropertyChanged("bPriorTenantLeftAfteQuitNotice");
					this.OnbPriorTenantLeftAfteQuitNoticeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorTenantLeftAfteQuitNoticeExplenation", DbType="VarChar(MAX)")]
		public string PriorTenantLeftAfteQuitNoticeExplenation
		{
			get
			{
				return this._PriorTenantLeftAfteQuitNoticeExplenation;
			}
			set
			{
				if ((this._PriorTenantLeftAfteQuitNoticeExplenation != value))
				{
					this.OnPriorTenantLeftAfteQuitNoticeExplenationChanging(value);
					this.SendPropertyChanging();
					this._PriorTenantLeftAfteQuitNoticeExplenation = value;
					this.SendPropertyChanged("PriorTenantLeftAfteQuitNoticeExplenation");
					this.OnPriorTenantLeftAfteQuitNoticeExplenationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPriorTenantLeftAfteRentIncreaseNotice", DbType="Bit")]
		public System.Nullable<bool> bPriorTenantLeftAfteRentIncreaseNotice
		{
			get
			{
				return this._bPriorTenantLeftAfteRentIncreaseNotice;
			}
			set
			{
				if ((this._bPriorTenantLeftAfteRentIncreaseNotice != value))
				{
					this.OnbPriorTenantLeftAfteRentIncreaseNoticeChanging(value);
					this.SendPropertyChanging();
					this._bPriorTenantLeftAfteRentIncreaseNotice = value;
					this.SendPropertyChanged("bPriorTenantLeftAfteRentIncreaseNotice");
					this.OnbPriorTenantLeftAfteRentIncreaseNoticeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorTenantLeftAfteRentIncreaseNoticeExplenation", DbType="VarChar(MAX)")]
		public string PriorTenantLeftAfteRentIncreaseNoticeExplenation
		{
			get
			{
				return this._PriorTenantLeftAfteRentIncreaseNoticeExplenation;
			}
			set
			{
				if ((this._PriorTenantLeftAfteRentIncreaseNoticeExplenation != value))
				{
					this.OnPriorTenantLeftAfteRentIncreaseNoticeExplenationChanging(value);
					this.SendPropertyChanging();
					this._PriorTenantLeftAfteRentIncreaseNoticeExplenation = value;
					this.SendPropertyChanged("PriorTenantLeftAfteRentIncreaseNoticeExplenation");
					this.OnPriorTenantLeftAfteRentIncreaseNoticeExplenationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPriorTenantEvicted", DbType="Bit")]
		public System.Nullable<bool> bPriorTenantEvicted
		{
			get
			{
				return this._bPriorTenantEvicted;
			}
			set
			{
				if ((this._bPriorTenantEvicted != value))
				{
					this.OnbPriorTenantEvictedChanging(value);
					this.SendPropertyChanging();
					this._bPriorTenantEvicted = value;
					this.SendPropertyChanged("bPriorTenantEvicted");
					this.OnbPriorTenantEvictedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorTenantEvictedExplenation", DbType="VarChar(MAX)")]
		public string PriorTenantEvictedExplenation
		{
			get
			{
				return this._PriorTenantEvictedExplenation;
			}
			set
			{
				if ((this._PriorTenantEvictedExplenation != value))
				{
					this.OnPriorTenantEvictedExplenationChanging(value);
					this.SendPropertyChanging();
					this._PriorTenantEvictedExplenation = value;
					this.SendPropertyChanged("PriorTenantEvictedExplenation");
					this.OnPriorTenantEvictedExplenationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bSingleFamilyUnitOrCondominium", DbType="Bit")]
		public System.Nullable<bool> bSingleFamilyUnitOrCondominium
		{
			get
			{
				return this._bSingleFamilyUnitOrCondominium;
			}
			set
			{
				if ((this._bSingleFamilyUnitOrCondominium != value))
				{
					this.OnbSingleFamilyUnitOrCondominiumChanging(value);
					this.SendPropertyChanging();
					this._bSingleFamilyUnitOrCondominium = value;
					this.SendPropertyChanged("bSingleFamilyUnitOrCondominium");
					this.OnbSingleFamilyUnitOrCondominiumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleFamilyUnitOrCondominiumExplenation", DbType="VarChar(MAX)")]
		public string SingleFamilyUnitOrCondominiumExplenation
		{
			get
			{
				return this._SingleFamilyUnitOrCondominiumExplenation;
			}
			set
			{
				if ((this._SingleFamilyUnitOrCondominiumExplenation != value))
				{
					this.OnSingleFamilyUnitOrCondominiumExplenationChanging(value);
					this.SendPropertyChanging();
					this._SingleFamilyUnitOrCondominiumExplenation = value;
					this.SendPropertyChanged("SingleFamilyUnitOrCondominiumExplenation");
					this.OnSingleFamilyUnitOrCondominiumExplenationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRoommatesWhenMoviedIN", DbType="Bit")]
		public System.Nullable<bool> bRoommatesWhenMoviedIN
		{
			get
			{
				return this._bRoommatesWhenMoviedIN;
			}
			set
			{
				if ((this._bRoommatesWhenMoviedIN != value))
				{
					this.OnbRoommatesWhenMoviedINChanging(value);
					this.SendPropertyChanging();
					this._bRoommatesWhenMoviedIN = value;
					this.SendPropertyChanged("bRoommatesWhenMoviedIN");
					this.OnbRoommatesWhenMoviedINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoommatesWhenMoviedINExplenation", DbType="VarChar(MAX)")]
		public string RoommatesWhenMoviedINExplenation
		{
			get
			{
				return this._RoommatesWhenMoviedINExplenation;
			}
			set
			{
				if ((this._RoommatesWhenMoviedINExplenation != value))
				{
					this.OnRoommatesWhenMoviedINExplenationChanging(value);
					this.SendPropertyChanging();
					this._RoommatesWhenMoviedINExplenation = value;
					this.SendPropertyChanged("RoommatesWhenMoviedINExplenation");
					this.OnRoommatesWhenMoviedINExplenationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bUnitPruchased", DbType="Bit")]
		public System.Nullable<bool> bUnitPruchased
		{
			get
			{
				return this._bUnitPruchased;
			}
			set
			{
				if ((this._bUnitPruchased != value))
				{
					this.OnbUnitPruchasedChanging(value);
					this.SendPropertyChanging();
					this._bUnitPruchased = value;
					this.SendPropertyChanged("bUnitPruchased");
					this.OnbUnitPruchasedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPruchasedExplenation", DbType="VarChar(MAX)")]
		public string UnitPruchasedExplenation
		{
			get
			{
				return this._UnitPruchasedExplenation;
			}
			set
			{
				if ((this._UnitPruchasedExplenation != value))
				{
					this.OnUnitPruchasedExplenationChanging(value);
					this.SendPropertyChanging();
					this._UnitPruchasedExplenation = value;
					this.SendPropertyChanged("UnitPruchasedExplenation");
					this.OnUnitPruchasedExplenationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasedFrom", DbType="VarChar(100)")]
		public string PurchasedFrom
		{
			get
			{
				return this._PurchasedFrom;
			}
			set
			{
				if ((this._PurchasedFrom != value))
				{
					this.OnPurchasedFromChanging(value);
					this.SendPropertyChanging();
					this._PurchasedFrom = value;
					this.SendPropertyChanged("PurchasedFrom");
					this.OnPurchasedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bEntireBuildingPurchased", DbType="Bit")]
		public System.Nullable<bool> bEntireBuildingPurchased
		{
			get
			{
				return this._bEntireBuildingPurchased;
			}
			set
			{
				if ((this._bEntireBuildingPurchased != value))
				{
					this.OnbEntireBuildingPurchasedChanging(value);
					this.SendPropertyChanging();
					this._bEntireBuildingPurchased = value;
					this.SendPropertyChanged("bEntireBuildingPurchased");
					this.OnbEntireBuildingPurchasedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntireBuildingPurchasedExplenation", DbType="VarChar(100)")]
		public string EntireBuildingPurchasedExplenation
		{
			get
			{
				return this._EntireBuildingPurchasedExplenation;
			}
			set
			{
				if ((this._EntireBuildingPurchasedExplenation != value))
				{
					this.OnEntireBuildingPurchasedExplenationChanging(value);
					this.SendPropertyChanging();
					this._EntireBuildingPurchasedExplenation = value;
					this.SendPropertyChanged("EntireBuildingPurchasedExplenation");
					this.OnEntireBuildingPurchasedExplenationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPetitionFiled", DbType="Bit")]
		public System.Nullable<bool> bPetitionFiled
		{
			get
			{
				return this._bPetitionFiled;
			}
			set
			{
				if ((this._bPetitionFiled != value))
				{
					this.OnbPetitionFiledChanging(value);
					this.SendPropertyChanging();
					this._bPetitionFiled = value;
					this.SendPropertyChanged("bPetitionFiled");
					this.OnbPetitionFiledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitTypeID", DbType="Int NOT NULL")]
		public int UnitTypeID
		{
			get
			{
				return this._UnitTypeID;
			}
			set
			{
				if ((this._UnitTypeID != value))
				{
					if (this._UnitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UnitTypeID = value;
					this.SendPropertyChanged("UnitTypeID");
					this.OnUnitTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentOnRent", DbType="Bit")]
		public System.Nullable<bool> CurrentOnRent
		{
			get
			{
				return this._CurrentOnRent;
			}
			set
			{
				if ((this._CurrentOnRent != value))
				{
					this.OnCurrentOnRentChanging(value);
					this.SendPropertyChanging();
					this._CurrentOnRent = value;
					this.SendPropertyChanged("CurrentOnRent");
					this.OnCurrentOnRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAPNoticeStatusID", DbType="Int")]
		public System.Nullable<int> RAPNoticeStatusID
		{
			get
			{
				return this._RAPNoticeStatusID;
			}
			set
			{
				if ((this._RAPNoticeStatusID != value))
				{
					this.OnRAPNoticeStatusIDChanging(value);
					this.SendPropertyChanging();
					this._RAPNoticeStatusID = value;
					this.SendPropertyChanged("RAPNoticeStatusID");
					this.OnRAPNoticeStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bOutstandingViolations", DbType="Bit")]
		public System.Nullable<bool> bOutstandingViolations
		{
			get
			{
				return this._bOutstandingViolations;
			}
			set
			{
				if ((this._bOutstandingViolations != value))
				{
					this.OnbOutstandingViolationsChanging(value);
					this.SendPropertyChanging();
					this._bOutstandingViolations = value;
					this.SendPropertyChanged("bOutstandingViolations");
					this.OnbOutstandingViolationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutstandingViolationsExplenation", DbType="VarChar(MAX)")]
		public string OutstandingViolationsExplenation
		{
			get
			{
				return this._OutstandingViolationsExplenation;
			}
			set
			{
				if ((this._OutstandingViolationsExplenation != value))
				{
					this.OnOutstandingViolationsExplenationChanging(value);
					this.SendPropertyChanging();
					this._OutstandingViolationsExplenation = value;
					this.SendPropertyChanged("OutstandingViolationsExplenation");
					this.OnOutstandingViolationsExplenationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentControlledOtherThanRAP", DbType="Bit")]
		public System.Nullable<bool> bRentControlledOtherThanRAP
		{
			get
			{
				return this._bRentControlledOtherThanRAP;
			}
			set
			{
				if ((this._bRentControlledOtherThanRAP != value))
				{
					this.OnbRentControlledOtherThanRAPChanging(value);
					this.SendPropertyChanging();
					this._bRentControlledOtherThanRAP = value;
					this.SendPropertyChanged("bRentControlledOtherThanRAP");
					this.OnbRentControlledOtherThanRAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bUnitNewlyConstructed", DbType="Bit")]
		public System.Nullable<bool> bUnitNewlyConstructed
		{
			get
			{
				return this._bUnitNewlyConstructed;
			}
			set
			{
				if ((this._bUnitNewlyConstructed != value))
				{
					this.OnbUnitNewlyConstructedChanging(value);
					this.SendPropertyChanging();
					this._bUnitNewlyConstructed = value;
					this.SendPropertyChanged("bUnitNewlyConstructed");
					this.OnbUnitNewlyConstructedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bTenantWasResidentOfHotelWhileFiling", DbType="Bit")]
		public System.Nullable<bool> bTenantWasResidentOfHotelWhileFiling
		{
			get
			{
				return this._bTenantWasResidentOfHotelWhileFiling;
			}
			set
			{
				if ((this._bTenantWasResidentOfHotelWhileFiling != value))
				{
					this.OnbTenantWasResidentOfHotelWhileFilingChanging(value);
					this.SendPropertyChanging();
					this._bTenantWasResidentOfHotelWhileFiling = value;
					this.SendPropertyChanged("bTenantWasResidentOfHotelWhileFiling");
					this.OnbTenantWasResidentOfHotelWhileFilingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bUnitWasRehabilitated", DbType="Bit")]
		public System.Nullable<bool> bUnitWasRehabilitated
		{
			get
			{
				return this._bUnitWasRehabilitated;
			}
			set
			{
				if ((this._bUnitWasRehabilitated != value))
				{
					this.OnbUnitWasRehabilitatedChanging(value);
					this.SendPropertyChanging();
					this._bUnitWasRehabilitated = value;
					this.SendPropertyChanged("bUnitWasRehabilitated");
					this.OnbUnitWasRehabilitatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bUnitIsAccommodation", DbType="Bit")]
		public System.Nullable<bool> bUnitIsAccommodation
		{
			get
			{
				return this._bUnitIsAccommodation;
			}
			set
			{
				if ((this._bUnitIsAccommodation != value))
				{
					this.OnbUnitIsAccommodationChanging(value);
					this.SendPropertyChanging();
					this._bUnitIsAccommodation = value;
					this.SendPropertyChanged("bUnitIsAccommodation");
					this.OnbUnitIsAccommodationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bHasUnitOccupiedByOwner", DbType="Bit")]
		public System.Nullable<bool> bHasUnitOccupiedByOwner
		{
			get
			{
				return this._bHasUnitOccupiedByOwner;
			}
			set
			{
				if ((this._bHasUnitOccupiedByOwner != value))
				{
					this.OnbHasUnitOccupiedByOwnerChanging(value);
					this.SendPropertyChanging();
					this._bHasUnitOccupiedByOwner = value;
					this.SendPropertyChanged("bHasUnitOccupiedByOwner");
					this.OnbHasUnitOccupiedByOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponsePropertyInfo_OwnerResponseTenantInfo", Storage="_OwnerResponseTenantInfos", ThisKey="PropertyID", OtherKey="PropertyID")]
		public EntitySet<OwnerResponseTenantInfo> OwnerResponseTenantInfos
		{
			get
			{
				return this._OwnerResponseTenantInfos;
			}
			set
			{
				this._OwnerResponseTenantInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponsePropertyInfo_OwnerResponseRentalIncrementInfo", Storage="_OwnerResponseRentalIncrementInfos", ThisKey="PropertyID", OtherKey="PropertyID")]
		public EntitySet<OwnerResponseRentalIncrementInfo> OwnerResponseRentalIncrementInfos
		{
			get
			{
				return this._OwnerResponseRentalIncrementInfos;
			}
			set
			{
				this._OwnerResponseRentalIncrementInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponsePropertyInfo_OwnerResponseInfo", Storage="_OwnerResponseInfos", ThisKey="PropertyID", OtherKey="OwnerResponsePropertyID")]
		public EntitySet<OwnerResponseInfo> OwnerResponseInfos
		{
			get
			{
				return this._OwnerResponseInfos;
			}
			set
			{
				this._OwnerResponseInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitType_OwnerResponsePropertyInfo", Storage="_UnitType", ThisKey="UnitTypeID", OtherKey="UnitTypeID", IsForeignKey=true)]
		public UnitType UnitType
		{
			get
			{
				return this._UnitType.Entity;
			}
			set
			{
				UnitType previousValue = this._UnitType.Entity;
				if (((previousValue != value) 
							|| (this._UnitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitType.Entity = null;
						previousValue.OwnerResponsePropertyInfos.Remove(this);
					}
					this._UnitType.Entity = value;
					if ((value != null))
					{
						value.OwnerResponsePropertyInfos.Add(this);
						this._UnitTypeID = value.UnitTypeID;
					}
					else
					{
						this._UnitTypeID = default(int);
					}
					this.SendPropertyChanged("UnitType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerResponseTenantInfos(OwnerResponseTenantInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponsePropertyInfo = this;
		}
		
		private void detach_OwnerResponseTenantInfos(OwnerResponseTenantInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponsePropertyInfo = null;
		}
		
		private void attach_OwnerResponseRentalIncrementInfos(OwnerResponseRentalIncrementInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponsePropertyInfo = this;
		}
		
		private void detach_OwnerResponseRentalIncrementInfos(OwnerResponseRentalIncrementInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponsePropertyInfo = null;
		}
		
		private void attach_OwnerResponseInfos(OwnerResponseInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponsePropertyInfo = this;
		}
		
		private void detach_OwnerResponseInfos(OwnerResponseInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponsePropertyInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerResponseInfo")]
	public partial class OwnerResponseInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerResponseID;
		
		private int _OwnerResponseApplicantInfoID;
		
		private System.Nullable<int> _OwnerResponsePropertyID;
		
		private System.Nullable<bool> _bAgreeToCityMediation;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _LastModifiedDate;
		
		private EntitySet<OwnerResponseVerification> _OwnerResponseVerifications;
		
		private EntityRef<OwnerResponsePropertyInfo> _OwnerResponsePropertyInfo;
		
		private EntityRef<OwnerResponseApplicantInfo> _OwnerResponseApplicantInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerResponseIDChanging(int value);
    partial void OnOwnerResponseIDChanged();
    partial void OnOwnerResponseApplicantInfoIDChanging(int value);
    partial void OnOwnerResponseApplicantInfoIDChanged();
    partial void OnOwnerResponsePropertyIDChanging(System.Nullable<int> value);
    partial void OnOwnerResponsePropertyIDChanged();
    partial void OnbAgreeToCityMediationChanging(System.Nullable<bool> value);
    partial void OnbAgreeToCityMediationChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnLastModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDateChanged();
    #endregion
		
		public OwnerResponseInfo()
		{
			this._OwnerResponseVerifications = new EntitySet<OwnerResponseVerification>(new Action<OwnerResponseVerification>(this.attach_OwnerResponseVerifications), new Action<OwnerResponseVerification>(this.detach_OwnerResponseVerifications));
			this._OwnerResponsePropertyInfo = default(EntityRef<OwnerResponsePropertyInfo>);
			this._OwnerResponseApplicantInfo = default(EntityRef<OwnerResponseApplicantInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerResponseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerResponseID
		{
			get
			{
				return this._OwnerResponseID;
			}
			set
			{
				if ((this._OwnerResponseID != value))
				{
					this.OnOwnerResponseIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerResponseID = value;
					this.SendPropertyChanged("OwnerResponseID");
					this.OnOwnerResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerResponseApplicantInfoID", DbType="Int NOT NULL")]
		public int OwnerResponseApplicantInfoID
		{
			get
			{
				return this._OwnerResponseApplicantInfoID;
			}
			set
			{
				if ((this._OwnerResponseApplicantInfoID != value))
				{
					if (this._OwnerResponseApplicantInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerResponseApplicantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerResponseApplicantInfoID = value;
					this.SendPropertyChanged("OwnerResponseApplicantInfoID");
					this.OnOwnerResponseApplicantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerResponsePropertyID", DbType="Int")]
		public System.Nullable<int> OwnerResponsePropertyID
		{
			get
			{
				return this._OwnerResponsePropertyID;
			}
			set
			{
				if ((this._OwnerResponsePropertyID != value))
				{
					if (this._OwnerResponsePropertyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerResponsePropertyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerResponsePropertyID = value;
					this.SendPropertyChanged("OwnerResponsePropertyID");
					this.OnOwnerResponsePropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bAgreeToCityMediation", DbType="Bit")]
		public System.Nullable<bool> bAgreeToCityMediation
		{
			get
			{
				return this._bAgreeToCityMediation;
			}
			set
			{
				if ((this._bAgreeToCityMediation != value))
				{
					this.OnbAgreeToCityMediationChanging(value);
					this.SendPropertyChanging();
					this._bAgreeToCityMediation = value;
					this.SendPropertyChanged("bAgreeToCityMediation");
					this.OnbAgreeToCityMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponseInfo_OwnerResponseVerification", Storage="_OwnerResponseVerifications", ThisKey="OwnerResponseID", OtherKey="PetitionID")]
		public EntitySet<OwnerResponseVerification> OwnerResponseVerifications
		{
			get
			{
				return this._OwnerResponseVerifications;
			}
			set
			{
				this._OwnerResponseVerifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponsePropertyInfo_OwnerResponseInfo", Storage="_OwnerResponsePropertyInfo", ThisKey="OwnerResponsePropertyID", OtherKey="PropertyID", IsForeignKey=true)]
		public OwnerResponsePropertyInfo OwnerResponsePropertyInfo
		{
			get
			{
				return this._OwnerResponsePropertyInfo.Entity;
			}
			set
			{
				OwnerResponsePropertyInfo previousValue = this._OwnerResponsePropertyInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerResponsePropertyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerResponsePropertyInfo.Entity = null;
						previousValue.OwnerResponseInfos.Remove(this);
					}
					this._OwnerResponsePropertyInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerResponseInfos.Add(this);
						this._OwnerResponsePropertyID = value.PropertyID;
					}
					else
					{
						this._OwnerResponsePropertyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OwnerResponsePropertyInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponseApplicantInfo_OwnerResponseInfo", Storage="_OwnerResponseApplicantInfo", ThisKey="OwnerResponseApplicantInfoID", OtherKey="OwnerResponseApplicantInfoID", IsForeignKey=true)]
		public OwnerResponseApplicantInfo OwnerResponseApplicantInfo
		{
			get
			{
				return this._OwnerResponseApplicantInfo.Entity;
			}
			set
			{
				OwnerResponseApplicantInfo previousValue = this._OwnerResponseApplicantInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerResponseApplicantInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerResponseApplicantInfo.Entity = null;
						previousValue.OwnerResponseInfos.Remove(this);
					}
					this._OwnerResponseApplicantInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerResponseInfos.Add(this);
						this._OwnerResponseApplicantInfoID = value.OwnerResponseApplicantInfoID;
					}
					else
					{
						this._OwnerResponseApplicantInfoID = default(int);
					}
					this.SendPropertyChanged("OwnerResponseApplicantInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerResponseVerifications(OwnerResponseVerification entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponseInfo = this;
		}
		
		private void detach_OwnerResponseVerifications(OwnerResponseVerification entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponseInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerResponsePageSubmissionStatus")]
	public partial class OwnerResponsePageSubmissionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NavigationID;
		
		private int _CustomerID;
		
		private System.Nullable<bool> _ImportantInformation;
		
		private System.Nullable<bool> _ApplicantInformation;
		
		private System.Nullable<bool> _RentalProperty;
		
		private System.Nullable<bool> _RentHistory;
		
		private System.Nullable<bool> _DecreasedHousingServices;
		
		private System.Nullable<bool> _Exeption;
		
		private System.Nullable<bool> _AdditionalDocumentation;
		
		private System.Nullable<bool> _Review;
		
		private System.Nullable<bool> _Verification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNavigationIDChanging(int value);
    partial void OnNavigationIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnImportantInformationChanging(System.Nullable<bool> value);
    partial void OnImportantInformationChanged();
    partial void OnApplicantInformationChanging(System.Nullable<bool> value);
    partial void OnApplicantInformationChanged();
    partial void OnRentalPropertyChanging(System.Nullable<bool> value);
    partial void OnRentalPropertyChanged();
    partial void OnRentHistoryChanging(System.Nullable<bool> value);
    partial void OnRentHistoryChanged();
    partial void OnDecreasedHousingServicesChanging(System.Nullable<bool> value);
    partial void OnDecreasedHousingServicesChanged();
    partial void OnExeptionChanging(System.Nullable<bool> value);
    partial void OnExeptionChanged();
    partial void OnAdditionalDocumentationChanging(System.Nullable<bool> value);
    partial void OnAdditionalDocumentationChanged();
    partial void OnReviewChanging(System.Nullable<bool> value);
    partial void OnReviewChanged();
    partial void OnVerificationChanging(System.Nullable<bool> value);
    partial void OnVerificationChanged();
    #endregion
		
		public OwnerResponsePageSubmissionStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NavigationID
		{
			get
			{
				return this._NavigationID;
			}
			set
			{
				if ((this._NavigationID != value))
				{
					this.OnNavigationIDChanging(value);
					this.SendPropertyChanging();
					this._NavigationID = value;
					this.SendPropertyChanged("NavigationID");
					this.OnNavigationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportantInformation", DbType="Bit")]
		public System.Nullable<bool> ImportantInformation
		{
			get
			{
				return this._ImportantInformation;
			}
			set
			{
				if ((this._ImportantInformation != value))
				{
					this.OnImportantInformationChanging(value);
					this.SendPropertyChanging();
					this._ImportantInformation = value;
					this.SendPropertyChanged("ImportantInformation");
					this.OnImportantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantInformation", DbType="Bit")]
		public System.Nullable<bool> ApplicantInformation
		{
			get
			{
				return this._ApplicantInformation;
			}
			set
			{
				if ((this._ApplicantInformation != value))
				{
					this.OnApplicantInformationChanging(value);
					this.SendPropertyChanging();
					this._ApplicantInformation = value;
					this.SendPropertyChanged("ApplicantInformation");
					this.OnApplicantInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalProperty", DbType="Bit")]
		public System.Nullable<bool> RentalProperty
		{
			get
			{
				return this._RentalProperty;
			}
			set
			{
				if ((this._RentalProperty != value))
				{
					this.OnRentalPropertyChanging(value);
					this.SendPropertyChanging();
					this._RentalProperty = value;
					this.SendPropertyChanged("RentalProperty");
					this.OnRentalPropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentHistory", DbType="Bit")]
		public System.Nullable<bool> RentHistory
		{
			get
			{
				return this._RentHistory;
			}
			set
			{
				if ((this._RentHistory != value))
				{
					this.OnRentHistoryChanging(value);
					this.SendPropertyChanging();
					this._RentHistory = value;
					this.SendPropertyChanged("RentHistory");
					this.OnRentHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecreasedHousingServices", DbType="Bit")]
		public System.Nullable<bool> DecreasedHousingServices
		{
			get
			{
				return this._DecreasedHousingServices;
			}
			set
			{
				if ((this._DecreasedHousingServices != value))
				{
					this.OnDecreasedHousingServicesChanging(value);
					this.SendPropertyChanging();
					this._DecreasedHousingServices = value;
					this.SendPropertyChanged("DecreasedHousingServices");
					this.OnDecreasedHousingServicesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exeption", DbType="Bit")]
		public System.Nullable<bool> Exeption
		{
			get
			{
				return this._Exeption;
			}
			set
			{
				if ((this._Exeption != value))
				{
					this.OnExeptionChanging(value);
					this.SendPropertyChanging();
					this._Exeption = value;
					this.SendPropertyChanged("Exeption");
					this.OnExeptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalDocumentation", DbType="Bit")]
		public System.Nullable<bool> AdditionalDocumentation
		{
			get
			{
				return this._AdditionalDocumentation;
			}
			set
			{
				if ((this._AdditionalDocumentation != value))
				{
					this.OnAdditionalDocumentationChanging(value);
					this.SendPropertyChanging();
					this._AdditionalDocumentation = value;
					this.SendPropertyChanged("AdditionalDocumentation");
					this.OnAdditionalDocumentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Review", DbType="Bit")]
		public System.Nullable<bool> Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				if ((this._Review != value))
				{
					this.OnReviewChanging(value);
					this.SendPropertyChanging();
					this._Review = value;
					this.SendPropertyChanged("Review");
					this.OnReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verification", DbType="Bit")]
		public System.Nullable<bool> Verification
		{
			get
			{
				return this._Verification;
			}
			set
			{
				if ((this._Verification != value))
				{
					this.OnVerificationChanging(value);
					this.SendPropertyChanging();
					this._Verification = value;
					this.SendPropertyChanged("Verification");
					this.OnVerificationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionPropertyInfo")]
	public partial class OwnerPetitionPropertyInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerPropertyID;
		
		private int _UnitTypeID;
		
		private System.Nullable<System.DateTime> _MovedInDate;
		
		private System.Nullable<decimal> _InitialRent;
		
		private System.Nullable<System.DateTime> _RAPNoticeGivenDate;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<bool> _bPetitionFiled;
		
		private System.Nullable<int> _RAPNoticeStatusID;
		
		private System.Nullable<bool> _CurrentOnRent;
		
		private EntitySet<OwnerPetitionTenantInfo> _OwnerPetitionTenantInfos;
		
		private EntitySet<OwnerPetitionRentalIncrementInfo> _OwnerPetitionRentalIncrementInfos;
		
		private EntitySet<OwnerPetitionInfo> _OwnerPetitionInfos;
		
		private EntityRef<UnitType> _UnitType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerPropertyIDChanging(int value);
    partial void OnOwnerPropertyIDChanged();
    partial void OnUnitTypeIDChanging(int value);
    partial void OnUnitTypeIDChanged();
    partial void OnMovedInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMovedInDateChanged();
    partial void OnInitialRentChanging(System.Nullable<decimal> value);
    partial void OnInitialRentChanged();
    partial void OnRAPNoticeGivenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRAPNoticeGivenDateChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnbPetitionFiledChanging(System.Nullable<bool> value);
    partial void OnbPetitionFiledChanged();
    partial void OnRAPNoticeStatusIDChanging(System.Nullable<int> value);
    partial void OnRAPNoticeStatusIDChanged();
    partial void OnCurrentOnRentChanging(System.Nullable<bool> value);
    partial void OnCurrentOnRentChanged();
    #endregion
		
		public OwnerPetitionPropertyInfo()
		{
			this._OwnerPetitionTenantInfos = new EntitySet<OwnerPetitionTenantInfo>(new Action<OwnerPetitionTenantInfo>(this.attach_OwnerPetitionTenantInfos), new Action<OwnerPetitionTenantInfo>(this.detach_OwnerPetitionTenantInfos));
			this._OwnerPetitionRentalIncrementInfos = new EntitySet<OwnerPetitionRentalIncrementInfo>(new Action<OwnerPetitionRentalIncrementInfo>(this.attach_OwnerPetitionRentalIncrementInfos), new Action<OwnerPetitionRentalIncrementInfo>(this.detach_OwnerPetitionRentalIncrementInfos));
			this._OwnerPetitionInfos = new EntitySet<OwnerPetitionInfo>(new Action<OwnerPetitionInfo>(this.attach_OwnerPetitionInfos), new Action<OwnerPetitionInfo>(this.detach_OwnerPetitionInfos));
			this._UnitType = default(EntityRef<UnitType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPropertyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerPropertyID
		{
			get
			{
				return this._OwnerPropertyID;
			}
			set
			{
				if ((this._OwnerPropertyID != value))
				{
					this.OnOwnerPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPropertyID = value;
					this.SendPropertyChanged("OwnerPropertyID");
					this.OnOwnerPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitTypeID", DbType="Int NOT NULL")]
		public int UnitTypeID
		{
			get
			{
				return this._UnitTypeID;
			}
			set
			{
				if ((this._UnitTypeID != value))
				{
					if (this._UnitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UnitTypeID = value;
					this.SendPropertyChanged("UnitTypeID");
					this.OnUnitTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovedInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MovedInDate
		{
			get
			{
				return this._MovedInDate;
			}
			set
			{
				if ((this._MovedInDate != value))
				{
					this.OnMovedInDateChanging(value);
					this.SendPropertyChanging();
					this._MovedInDate = value;
					this.SendPropertyChanged("MovedInDate");
					this.OnMovedInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialRent", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> InitialRent
		{
			get
			{
				return this._InitialRent;
			}
			set
			{
				if ((this._InitialRent != value))
				{
					this.OnInitialRentChanging(value);
					this.SendPropertyChanging();
					this._InitialRent = value;
					this.SendPropertyChanged("InitialRent");
					this.OnInitialRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAPNoticeGivenDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RAPNoticeGivenDate
		{
			get
			{
				return this._RAPNoticeGivenDate;
			}
			set
			{
				if ((this._RAPNoticeGivenDate != value))
				{
					this.OnRAPNoticeGivenDateChanging(value);
					this.SendPropertyChanging();
					this._RAPNoticeGivenDate = value;
					this.SendPropertyChanged("RAPNoticeGivenDate");
					this.OnRAPNoticeGivenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPetitionFiled", DbType="Bit")]
		public System.Nullable<bool> bPetitionFiled
		{
			get
			{
				return this._bPetitionFiled;
			}
			set
			{
				if ((this._bPetitionFiled != value))
				{
					this.OnbPetitionFiledChanging(value);
					this.SendPropertyChanging();
					this._bPetitionFiled = value;
					this.SendPropertyChanged("bPetitionFiled");
					this.OnbPetitionFiledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAPNoticeStatusID", DbType="Int")]
		public System.Nullable<int> RAPNoticeStatusID
		{
			get
			{
				return this._RAPNoticeStatusID;
			}
			set
			{
				if ((this._RAPNoticeStatusID != value))
				{
					this.OnRAPNoticeStatusIDChanging(value);
					this.SendPropertyChanging();
					this._RAPNoticeStatusID = value;
					this.SendPropertyChanged("RAPNoticeStatusID");
					this.OnRAPNoticeStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentOnRent", DbType="Bit")]
		public System.Nullable<bool> CurrentOnRent
		{
			get
			{
				return this._CurrentOnRent;
			}
			set
			{
				if ((this._CurrentOnRent != value))
				{
					this.OnCurrentOnRentChanging(value);
					this.SendPropertyChanging();
					this._CurrentOnRent = value;
					this.SendPropertyChanged("CurrentOnRent");
					this.OnCurrentOnRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionTenantInfo", Storage="_OwnerPetitionTenantInfos", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID")]
		public EntitySet<OwnerPetitionTenantInfo> OwnerPetitionTenantInfos
		{
			get
			{
				return this._OwnerPetitionTenantInfos;
			}
			set
			{
				this._OwnerPetitionTenantInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionRentalIncrementInfo", Storage="_OwnerPetitionRentalIncrementInfos", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID")]
		public EntitySet<OwnerPetitionRentalIncrementInfo> OwnerPetitionRentalIncrementInfos
		{
			get
			{
				return this._OwnerPetitionRentalIncrementInfos;
			}
			set
			{
				this._OwnerPetitionRentalIncrementInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionInfo", Storage="_OwnerPetitionInfos", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID")]
		public EntitySet<OwnerPetitionInfo> OwnerPetitionInfos
		{
			get
			{
				return this._OwnerPetitionInfos;
			}
			set
			{
				this._OwnerPetitionInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitType_OwnerPetitionPropertyInfo", Storage="_UnitType", ThisKey="UnitTypeID", OtherKey="UnitTypeID", IsForeignKey=true)]
		public UnitType UnitType
		{
			get
			{
				return this._UnitType.Entity;
			}
			set
			{
				UnitType previousValue = this._UnitType.Entity;
				if (((previousValue != value) 
							|| (this._UnitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitType.Entity = null;
						previousValue.OwnerPetitionPropertyInfos.Remove(this);
					}
					this._UnitType.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionPropertyInfos.Add(this);
						this._UnitTypeID = value.UnitTypeID;
					}
					else
					{
						this._UnitTypeID = default(int);
					}
					this.SendPropertyChanged("UnitType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerPetitionTenantInfos(OwnerPetitionTenantInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = this;
		}
		
		private void detach_OwnerPetitionTenantInfos(OwnerPetitionTenantInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = null;
		}
		
		private void attach_OwnerPetitionRentalIncrementInfos(OwnerPetitionRentalIncrementInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = this;
		}
		
		private void detach_OwnerPetitionRentalIncrementInfos(OwnerPetitionRentalIncrementInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = null;
		}
		
		private void attach_OwnerPetitionInfos(OwnerPetitionInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = this;
		}
		
		private void detach_OwnerPetitionInfos(OwnerPetitionInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionApplicantInfo")]
	public partial class OwnerPetitionApplicantInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerPetitionApplicantInfoID;
		
		private int _ApplicantUserID;
		
		private System.Nullable<bool> _bThirdPartyRepresentation;
		
		private int _ThirdPartyUserID;
		
		private System.Nullable<bool> _bBusinessLicensePaid;
		
		private string _BusinessLicenseNumber;
		
		private System.Nullable<bool> _bRentAdjustmentProgramFeePaid;
		
		private System.Nullable<System.DateTime> _BuildingAcquiredDate;
		
		private System.Nullable<int> _NumberOfUnits;
		
		private System.Nullable<bool> _bMoreThanOneStreetOnParcel;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private bool _bPetitionFiled;
		
		private System.Nullable<int> _RangeID;
		
		private EntitySet<OwnerRentIncreaseReasonInfo> _OwnerRentIncreaseReasonInfos;
		
		private EntitySet<OwnerPetitionInfo> _OwnerPetitionInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerPetitionApplicantInfoIDChanging(int value);
    partial void OnOwnerPetitionApplicantInfoIDChanged();
    partial void OnApplicantUserIDChanging(int value);
    partial void OnApplicantUserIDChanged();
    partial void OnbThirdPartyRepresentationChanging(System.Nullable<bool> value);
    partial void OnbThirdPartyRepresentationChanged();
    partial void OnThirdPartyUserIDChanging(int value);
    partial void OnThirdPartyUserIDChanged();
    partial void OnbBusinessLicensePaidChanging(System.Nullable<bool> value);
    partial void OnbBusinessLicensePaidChanged();
    partial void OnBusinessLicenseNumberChanging(string value);
    partial void OnBusinessLicenseNumberChanged();
    partial void OnbRentAdjustmentProgramFeePaidChanging(System.Nullable<bool> value);
    partial void OnbRentAdjustmentProgramFeePaidChanged();
    partial void OnBuildingAcquiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBuildingAcquiredDateChanged();
    partial void OnNumberOfUnitsChanging(System.Nullable<int> value);
    partial void OnNumberOfUnitsChanged();
    partial void OnbMoreThanOneStreetOnParcelChanging(System.Nullable<bool> value);
    partial void OnbMoreThanOneStreetOnParcelChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnbPetitionFiledChanging(bool value);
    partial void OnbPetitionFiledChanged();
    partial void OnRangeIDChanging(System.Nullable<int> value);
    partial void OnRangeIDChanged();
    #endregion
		
		public OwnerPetitionApplicantInfo()
		{
			this._OwnerRentIncreaseReasonInfos = new EntitySet<OwnerRentIncreaseReasonInfo>(new Action<OwnerRentIncreaseReasonInfo>(this.attach_OwnerRentIncreaseReasonInfos), new Action<OwnerRentIncreaseReasonInfo>(this.detach_OwnerRentIncreaseReasonInfos));
			this._OwnerPetitionInfos = new EntitySet<OwnerPetitionInfo>(new Action<OwnerPetitionInfo>(this.attach_OwnerPetitionInfos), new Action<OwnerPetitionInfo>(this.detach_OwnerPetitionInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPetitionApplicantInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerPetitionApplicantInfoID
		{
			get
			{
				return this._OwnerPetitionApplicantInfoID;
			}
			set
			{
				if ((this._OwnerPetitionApplicantInfoID != value))
				{
					this.OnOwnerPetitionApplicantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPetitionApplicantInfoID = value;
					this.SendPropertyChanged("OwnerPetitionApplicantInfoID");
					this.OnOwnerPetitionApplicantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantUserID", DbType="Int NOT NULL")]
		public int ApplicantUserID
		{
			get
			{
				return this._ApplicantUserID;
			}
			set
			{
				if ((this._ApplicantUserID != value))
				{
					this.OnApplicantUserIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantUserID = value;
					this.SendPropertyChanged("ApplicantUserID");
					this.OnApplicantUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyRepresentation", DbType="Bit")]
		public System.Nullable<bool> bThirdPartyRepresentation
		{
			get
			{
				return this._bThirdPartyRepresentation;
			}
			set
			{
				if ((this._bThirdPartyRepresentation != value))
				{
					this.OnbThirdPartyRepresentationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyRepresentation = value;
					this.SendPropertyChanged("bThirdPartyRepresentation");
					this.OnbThirdPartyRepresentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdPartyUserID", DbType="Int NOT NULL")]
		public int ThirdPartyUserID
		{
			get
			{
				return this._ThirdPartyUserID;
			}
			set
			{
				if ((this._ThirdPartyUserID != value))
				{
					this.OnThirdPartyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdPartyUserID = value;
					this.SendPropertyChanged("ThirdPartyUserID");
					this.OnThirdPartyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bBusinessLicensePaid", DbType="Bit")]
		public System.Nullable<bool> bBusinessLicensePaid
		{
			get
			{
				return this._bBusinessLicensePaid;
			}
			set
			{
				if ((this._bBusinessLicensePaid != value))
				{
					this.OnbBusinessLicensePaidChanging(value);
					this.SendPropertyChanging();
					this._bBusinessLicensePaid = value;
					this.SendPropertyChanged("bBusinessLicensePaid");
					this.OnbBusinessLicensePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseNumber", DbType="VarChar(30)")]
		public string BusinessLicenseNumber
		{
			get
			{
				return this._BusinessLicenseNumber;
			}
			set
			{
				if ((this._BusinessLicenseNumber != value))
				{
					this.OnBusinessLicenseNumberChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseNumber = value;
					this.SendPropertyChanged("BusinessLicenseNumber");
					this.OnBusinessLicenseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentAdjustmentProgramFeePaid", DbType="Bit")]
		public System.Nullable<bool> bRentAdjustmentProgramFeePaid
		{
			get
			{
				return this._bRentAdjustmentProgramFeePaid;
			}
			set
			{
				if ((this._bRentAdjustmentProgramFeePaid != value))
				{
					this.OnbRentAdjustmentProgramFeePaidChanging(value);
					this.SendPropertyChanging();
					this._bRentAdjustmentProgramFeePaid = value;
					this.SendPropertyChanged("bRentAdjustmentProgramFeePaid");
					this.OnbRentAdjustmentProgramFeePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingAcquiredDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BuildingAcquiredDate
		{
			get
			{
				return this._BuildingAcquiredDate;
			}
			set
			{
				if ((this._BuildingAcquiredDate != value))
				{
					this.OnBuildingAcquiredDateChanging(value);
					this.SendPropertyChanging();
					this._BuildingAcquiredDate = value;
					this.SendPropertyChanged("BuildingAcquiredDate");
					this.OnBuildingAcquiredDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfUnits", DbType="Int")]
		public System.Nullable<int> NumberOfUnits
		{
			get
			{
				return this._NumberOfUnits;
			}
			set
			{
				if ((this._NumberOfUnits != value))
				{
					this.OnNumberOfUnitsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfUnits = value;
					this.SendPropertyChanged("NumberOfUnits");
					this.OnNumberOfUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bMoreThanOneStreetOnParcel", DbType="Bit")]
		public System.Nullable<bool> bMoreThanOneStreetOnParcel
		{
			get
			{
				return this._bMoreThanOneStreetOnParcel;
			}
			set
			{
				if ((this._bMoreThanOneStreetOnParcel != value))
				{
					this.OnbMoreThanOneStreetOnParcelChanging(value);
					this.SendPropertyChanging();
					this._bMoreThanOneStreetOnParcel = value;
					this.SendPropertyChanged("bMoreThanOneStreetOnParcel");
					this.OnbMoreThanOneStreetOnParcelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPetitionFiled", DbType="Bit NOT NULL")]
		public bool bPetitionFiled
		{
			get
			{
				return this._bPetitionFiled;
			}
			set
			{
				if ((this._bPetitionFiled != value))
				{
					this.OnbPetitionFiledChanging(value);
					this.SendPropertyChanging();
					this._bPetitionFiled = value;
					this.SendPropertyChanged("bPetitionFiled");
					this.OnbPetitionFiledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangeID", DbType="Int")]
		public System.Nullable<int> RangeID
		{
			get
			{
				return this._RangeID;
			}
			set
			{
				if ((this._RangeID != value))
				{
					this.OnRangeIDChanging(value);
					this.SendPropertyChanging();
					this._RangeID = value;
					this.SendPropertyChanged("RangeID");
					this.OnRangeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionApplicantInfo_OwnerRentIncreaseReasonInfo", Storage="_OwnerRentIncreaseReasonInfos", ThisKey="OwnerPetitionApplicantInfoID", OtherKey="OwnerPetitionApplicantInfoID")]
		public EntitySet<OwnerRentIncreaseReasonInfo> OwnerRentIncreaseReasonInfos
		{
			get
			{
				return this._OwnerRentIncreaseReasonInfos;
			}
			set
			{
				this._OwnerRentIncreaseReasonInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionApplicantInfo_OwnerPetitionInfo", Storage="_OwnerPetitionInfos", ThisKey="OwnerPetitionApplicantInfoID", OtherKey="OwnerPetitionApplicantInfoID")]
		public EntitySet<OwnerPetitionInfo> OwnerPetitionInfos
		{
			get
			{
				return this._OwnerPetitionInfos;
			}
			set
			{
				this._OwnerPetitionInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerRentIncreaseReasonInfos(OwnerRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionApplicantInfo = this;
		}
		
		private void detach_OwnerRentIncreaseReasonInfos(OwnerRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionApplicantInfo = null;
		}
		
		private void attach_OwnerPetitionInfos(OwnerPetitionInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionApplicantInfo = this;
		}
		
		private void detach_OwnerPetitionInfos(OwnerPetitionInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionApplicantInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CaseDetails")]
	public partial class CaseDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _C_ID;
		
		private int _PetitionID;
		
		private System.Nullable<int> _TenantAppealID;
		
		private System.Nullable<int> _PetitionCategoryID;
		
		private System.Nullable<int> _TenantResponseID;
		
		private System.Nullable<int> _OwnerResponseID;
		
		private System.Nullable<int> _CaseFiledBy;
		
		private System.Nullable<bool> _bCaseFiledByThirdParty;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _LastModifiedByType;
		
		private System.Nullable<int> _LastModifiedBy;
		
		private System.Nullable<System.DateTime> _LastModifiedDate;
		
		private System.Nullable<System.DateTime> _HearingDate;
		
		private System.Nullable<System.DateTime> _AppealDate;
		
		private System.Nullable<int> _HearingOfficerUserID;
		
		private System.Nullable<int> _CityAnalystUserID;
		
		private string _CaseID;
		
		private EntitySet<TenantResponseApplicationInfo> _TenantResponseApplicationInfos;
		
		private EntityRef<TenantAppealDetail> _TenantAppealDetail;
		
		private EntityRef<PetitionCategory> _PetitionCategory;
		
		private EntityRef<PetitionDetail> _PetitionDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC_IDChanging(int value);
    partial void OnC_IDChanged();
    partial void OnPetitionIDChanging(int value);
    partial void OnPetitionIDChanged();
    partial void OnTenantAppealIDChanging(System.Nullable<int> value);
    partial void OnTenantAppealIDChanged();
    partial void OnPetitionCategoryIDChanging(System.Nullable<int> value);
    partial void OnPetitionCategoryIDChanged();
    partial void OnTenantResponseIDChanging(System.Nullable<int> value);
    partial void OnTenantResponseIDChanged();
    partial void OnOwnerResponseIDChanging(System.Nullable<int> value);
    partial void OnOwnerResponseIDChanged();
    partial void OnCaseFiledByChanging(System.Nullable<int> value);
    partial void OnCaseFiledByChanged();
    partial void OnbCaseFiledByThirdPartyChanging(System.Nullable<bool> value);
    partial void OnbCaseFiledByThirdPartyChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnLastModifiedByTypeChanging(System.Nullable<int> value);
    partial void OnLastModifiedByTypeChanged();
    partial void OnLastModifiedByChanging(System.Nullable<int> value);
    partial void OnLastModifiedByChanged();
    partial void OnLastModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDateChanged();
    partial void OnHearingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHearingDateChanged();
    partial void OnAppealDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAppealDateChanged();
    partial void OnHearingOfficerUserIDChanging(System.Nullable<int> value);
    partial void OnHearingOfficerUserIDChanged();
    partial void OnCityAnalystUserIDChanging(System.Nullable<int> value);
    partial void OnCityAnalystUserIDChanged();
    partial void OnCaseIDChanging(string value);
    partial void OnCaseIDChanged();
    #endregion
		
		public CaseDetail()
		{
			this._TenantResponseApplicationInfos = new EntitySet<TenantResponseApplicationInfo>(new Action<TenantResponseApplicationInfo>(this.attach_TenantResponseApplicationInfos), new Action<TenantResponseApplicationInfo>(this.detach_TenantResponseApplicationInfos));
			this._TenantAppealDetail = default(EntityRef<TenantAppealDetail>);
			this._PetitionCategory = default(EntityRef<PetitionCategory>);
			this._PetitionDetail = default(EntityRef<PetitionDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int C_ID
		{
			get
			{
				return this._C_ID;
			}
			set
			{
				if ((this._C_ID != value))
				{
					this.OnC_IDChanging(value);
					this.SendPropertyChanging();
					this._C_ID = value;
					this.SendPropertyChanged("C_ID");
					this.OnC_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionID", DbType="Int NOT NULL")]
		public int PetitionID
		{
			get
			{
				return this._PetitionID;
			}
			set
			{
				if ((this._PetitionID != value))
				{
					if (this._PetitionDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionID = value;
					this.SendPropertyChanged("PetitionID");
					this.OnPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantAppealID", DbType="Int")]
		public System.Nullable<int> TenantAppealID
		{
			get
			{
				return this._TenantAppealID;
			}
			set
			{
				if ((this._TenantAppealID != value))
				{
					if (this._TenantAppealDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantAppealIDChanging(value);
					this.SendPropertyChanging();
					this._TenantAppealID = value;
					this.SendPropertyChanged("TenantAppealID");
					this.OnTenantAppealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionCategoryID", DbType="Int")]
		public System.Nullable<int> PetitionCategoryID
		{
			get
			{
				return this._PetitionCategoryID;
			}
			set
			{
				if ((this._PetitionCategoryID != value))
				{
					if (this._PetitionCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetitionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionCategoryID = value;
					this.SendPropertyChanged("PetitionCategoryID");
					this.OnPetitionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantResponseID", DbType="Int")]
		public System.Nullable<int> TenantResponseID
		{
			get
			{
				return this._TenantResponseID;
			}
			set
			{
				if ((this._TenantResponseID != value))
				{
					this.OnTenantResponseIDChanging(value);
					this.SendPropertyChanging();
					this._TenantResponseID = value;
					this.SendPropertyChanged("TenantResponseID");
					this.OnTenantResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerResponseID", DbType="Int")]
		public System.Nullable<int> OwnerResponseID
		{
			get
			{
				return this._OwnerResponseID;
			}
			set
			{
				if ((this._OwnerResponseID != value))
				{
					this.OnOwnerResponseIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerResponseID = value;
					this.SendPropertyChanged("OwnerResponseID");
					this.OnOwnerResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseFiledBy", DbType="Int")]
		public System.Nullable<int> CaseFiledBy
		{
			get
			{
				return this._CaseFiledBy;
			}
			set
			{
				if ((this._CaseFiledBy != value))
				{
					this.OnCaseFiledByChanging(value);
					this.SendPropertyChanging();
					this._CaseFiledBy = value;
					this.SendPropertyChanged("CaseFiledBy");
					this.OnCaseFiledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bCaseFiledByThirdParty", DbType="Bit")]
		public System.Nullable<bool> bCaseFiledByThirdParty
		{
			get
			{
				return this._bCaseFiledByThirdParty;
			}
			set
			{
				if ((this._bCaseFiledByThirdParty != value))
				{
					this.OnbCaseFiledByThirdPartyChanging(value);
					this.SendPropertyChanging();
					this._bCaseFiledByThirdParty = value;
					this.SendPropertyChanged("bCaseFiledByThirdParty");
					this.OnbCaseFiledByThirdPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedByType", DbType="Int")]
		public System.Nullable<int> LastModifiedByType
		{
			get
			{
				return this._LastModifiedByType;
			}
			set
			{
				if ((this._LastModifiedByType != value))
				{
					this.OnLastModifiedByTypeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedByType = value;
					this.SendPropertyChanged("LastModifiedByType");
					this.OnLastModifiedByTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="Int")]
		public System.Nullable<int> LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> HearingDate
		{
			get
			{
				return this._HearingDate;
			}
			set
			{
				if ((this._HearingDate != value))
				{
					this.OnHearingDateChanging(value);
					this.SendPropertyChanging();
					this._HearingDate = value;
					this.SendPropertyChanged("HearingDate");
					this.OnHearingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AppealDate
		{
			get
			{
				return this._AppealDate;
			}
			set
			{
				if ((this._AppealDate != value))
				{
					this.OnAppealDateChanging(value);
					this.SendPropertyChanging();
					this._AppealDate = value;
					this.SendPropertyChanged("AppealDate");
					this.OnAppealDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearingOfficerUserID", DbType="Int")]
		public System.Nullable<int> HearingOfficerUserID
		{
			get
			{
				return this._HearingOfficerUserID;
			}
			set
			{
				if ((this._HearingOfficerUserID != value))
				{
					this.OnHearingOfficerUserIDChanging(value);
					this.SendPropertyChanging();
					this._HearingOfficerUserID = value;
					this.SendPropertyChanged("HearingOfficerUserID");
					this.OnHearingOfficerUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityAnalystUserID", DbType="Int")]
		public System.Nullable<int> CityAnalystUserID
		{
			get
			{
				return this._CityAnalystUserID;
			}
			set
			{
				if ((this._CityAnalystUserID != value))
				{
					this.OnCityAnalystUserIDChanging(value);
					this.SendPropertyChanging();
					this._CityAnalystUserID = value;
					this.SendPropertyChanged("CityAnalystUserID");
					this.OnCityAnalystUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseID", DbType="VarChar(20)")]
		public string CaseID
		{
			get
			{
				return this._CaseID;
			}
			set
			{
				if ((this._CaseID != value))
				{
					this.OnCaseIDChanging(value);
					this.SendPropertyChanging();
					this._CaseID = value;
					this.SendPropertyChanged("CaseID");
					this.OnCaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaseDetail_TenantResponseApplicationInfo", Storage="_TenantResponseApplicationInfos", ThisKey="C_ID", OtherKey="C_ID")]
		public EntitySet<TenantResponseApplicationInfo> TenantResponseApplicationInfos
		{
			get
			{
				return this._TenantResponseApplicationInfos;
			}
			set
			{
				this._TenantResponseApplicationInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantAppealDetail_CaseDetail", Storage="_TenantAppealDetail", ThisKey="TenantAppealID", OtherKey="AppealID", IsForeignKey=true)]
		public TenantAppealDetail TenantAppealDetail
		{
			get
			{
				return this._TenantAppealDetail.Entity;
			}
			set
			{
				TenantAppealDetail previousValue = this._TenantAppealDetail.Entity;
				if (((previousValue != value) 
							|| (this._TenantAppealDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantAppealDetail.Entity = null;
						previousValue.CaseDetails.Remove(this);
					}
					this._TenantAppealDetail.Entity = value;
					if ((value != null))
					{
						value.CaseDetails.Add(this);
						this._TenantAppealID = value.AppealID;
					}
					else
					{
						this._TenantAppealID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TenantAppealDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionCategory_CaseDetail", Storage="_PetitionCategory", ThisKey="PetitionCategoryID", OtherKey="PetitionCategoryID", IsForeignKey=true)]
		public PetitionCategory PetitionCategory
		{
			get
			{
				return this._PetitionCategory.Entity;
			}
			set
			{
				PetitionCategory previousValue = this._PetitionCategory.Entity;
				if (((previousValue != value) 
							|| (this._PetitionCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PetitionCategory.Entity = null;
						previousValue.CaseDetails.Remove(this);
					}
					this._PetitionCategory.Entity = value;
					if ((value != null))
					{
						value.CaseDetails.Add(this);
						this._PetitionCategoryID = value.PetitionCategoryID;
					}
					else
					{
						this._PetitionCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PetitionCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionDetail_CaseDetail", Storage="_PetitionDetail", ThisKey="PetitionID", OtherKey="PetitionID", IsForeignKey=true)]
		public PetitionDetail PetitionDetail
		{
			get
			{
				return this._PetitionDetail.Entity;
			}
			set
			{
				PetitionDetail previousValue = this._PetitionDetail.Entity;
				if (((previousValue != value) 
							|| (this._PetitionDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PetitionDetail.Entity = null;
						previousValue.CaseDetails.Remove(this);
					}
					this._PetitionDetail.Entity = value;
					if ((value != null))
					{
						value.CaseDetails.Add(this);
						this._PetitionID = value.PetitionID;
					}
					else
					{
						this._PetitionID = default(int);
					}
					this.SendPropertyChanged("PetitionDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TenantResponseApplicationInfos(TenantResponseApplicationInfo entity)
		{
			this.SendPropertyChanging();
			entity.CaseDetail = this;
		}
		
		private void detach_TenantResponseApplicationInfos(TenantResponseApplicationInfo entity)
		{
			this.SendPropertyChanging();
			entity.CaseDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantRentalHistory")]
	public partial class TenantRentalHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantRentalHistoryID;
		
		private int _PetitionID;
		
		private System.Nullable<System.DateTime> _MoveInDate;
		
		private System.Nullable<decimal> _InitialRent;
		
		private System.Nullable<bool> _bRAPNoticeGiven;
		
		private System.Nullable<System.DateTime> _RAPNoticeGivenDate;
		
		private System.Nullable<bool> _bRentControlledByAgency;
		
		private System.Nullable<bool> _bPetitionFiledPrviously;
		
		private string _PreviousCaseIDs;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<TenantPetitionInfo> _TenantPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantRentalHistoryIDChanging(int value);
    partial void OnTenantRentalHistoryIDChanged();
    partial void OnPetitionIDChanging(int value);
    partial void OnPetitionIDChanged();
    partial void OnMoveInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMoveInDateChanged();
    partial void OnInitialRentChanging(System.Nullable<decimal> value);
    partial void OnInitialRentChanged();
    partial void OnbRAPNoticeGivenChanging(System.Nullable<bool> value);
    partial void OnbRAPNoticeGivenChanged();
    partial void OnRAPNoticeGivenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRAPNoticeGivenDateChanged();
    partial void OnbRentControlledByAgencyChanging(System.Nullable<bool> value);
    partial void OnbRentControlledByAgencyChanged();
    partial void OnbPetitionFiledPrviouslyChanging(System.Nullable<bool> value);
    partial void OnbPetitionFiledPrviouslyChanged();
    partial void OnPreviousCaseIDsChanging(string value);
    partial void OnPreviousCaseIDsChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TenantRentalHistory()
		{
			this._TenantPetitionInfo = default(EntityRef<TenantPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantRentalHistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantRentalHistoryID
		{
			get
			{
				return this._TenantRentalHistoryID;
			}
			set
			{
				if ((this._TenantRentalHistoryID != value))
				{
					this.OnTenantRentalHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._TenantRentalHistoryID = value;
					this.SendPropertyChanged("TenantRentalHistoryID");
					this.OnTenantRentalHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionID", DbType="Int NOT NULL")]
		public int PetitionID
		{
			get
			{
				return this._PetitionID;
			}
			set
			{
				if ((this._PetitionID != value))
				{
					if (this._TenantPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionID = value;
					this.SendPropertyChanged("PetitionID");
					this.OnPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoveInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MoveInDate
		{
			get
			{
				return this._MoveInDate;
			}
			set
			{
				if ((this._MoveInDate != value))
				{
					this.OnMoveInDateChanging(value);
					this.SendPropertyChanging();
					this._MoveInDate = value;
					this.SendPropertyChanged("MoveInDate");
					this.OnMoveInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialRent", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> InitialRent
		{
			get
			{
				return this._InitialRent;
			}
			set
			{
				if ((this._InitialRent != value))
				{
					this.OnInitialRentChanging(value);
					this.SendPropertyChanging();
					this._InitialRent = value;
					this.SendPropertyChanged("InitialRent");
					this.OnInitialRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRAPNoticeGiven", DbType="Bit")]
		public System.Nullable<bool> bRAPNoticeGiven
		{
			get
			{
				return this._bRAPNoticeGiven;
			}
			set
			{
				if ((this._bRAPNoticeGiven != value))
				{
					this.OnbRAPNoticeGivenChanging(value);
					this.SendPropertyChanging();
					this._bRAPNoticeGiven = value;
					this.SendPropertyChanged("bRAPNoticeGiven");
					this.OnbRAPNoticeGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAPNoticeGivenDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RAPNoticeGivenDate
		{
			get
			{
				return this._RAPNoticeGivenDate;
			}
			set
			{
				if ((this._RAPNoticeGivenDate != value))
				{
					this.OnRAPNoticeGivenDateChanging(value);
					this.SendPropertyChanging();
					this._RAPNoticeGivenDate = value;
					this.SendPropertyChanged("RAPNoticeGivenDate");
					this.OnRAPNoticeGivenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentControlledByAgency", DbType="Bit")]
		public System.Nullable<bool> bRentControlledByAgency
		{
			get
			{
				return this._bRentControlledByAgency;
			}
			set
			{
				if ((this._bRentControlledByAgency != value))
				{
					this.OnbRentControlledByAgencyChanging(value);
					this.SendPropertyChanging();
					this._bRentControlledByAgency = value;
					this.SendPropertyChanged("bRentControlledByAgency");
					this.OnbRentControlledByAgencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPetitionFiledPrviously", DbType="Bit")]
		public System.Nullable<bool> bPetitionFiledPrviously
		{
			get
			{
				return this._bPetitionFiledPrviously;
			}
			set
			{
				if ((this._bPetitionFiledPrviously != value))
				{
					this.OnbPetitionFiledPrviouslyChanging(value);
					this.SendPropertyChanging();
					this._bPetitionFiledPrviously = value;
					this.SendPropertyChanged("bPetitionFiledPrviously");
					this.OnbPetitionFiledPrviouslyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousCaseIDs", DbType="VarChar(MAX)")]
		public string PreviousCaseIDs
		{
			get
			{
				return this._PreviousCaseIDs;
			}
			set
			{
				if ((this._PreviousCaseIDs != value))
				{
					this.OnPreviousCaseIDsChanging(value);
					this.SendPropertyChanging();
					this._PreviousCaseIDs = value;
					this.SendPropertyChanged("PreviousCaseIDs");
					this.OnPreviousCaseIDsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantRentalHistory", Storage="_TenantPetitionInfo", ThisKey="PetitionID", OtherKey="TenantPetitionID", IsForeignKey=true)]
		public TenantPetitionInfo TenantPetitionInfo
		{
			get
			{
				return this._TenantPetitionInfo.Entity;
			}
			set
			{
				TenantPetitionInfo previousValue = this._TenantPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantPetitionInfo.Entity = null;
						previousValue.TenantRentalHistories.Remove(this);
					}
					this._TenantPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.TenantRentalHistories.Add(this);
						this._PetitionID = value.TenantPetitionID;
					}
					else
					{
						this._PetitionID = default(int);
					}
					this.SendPropertyChanged("TenantPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServeAppeal")]
	public partial class ServeAppeal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppealServeID;
		
		private System.Nullable<int> _AppealID;
		
		private System.Nullable<bool> _bAcknowledgeNamePin;
		
		private System.Nullable<bool> _bThirdParty;
		
		private System.Nullable<bool> _bDeclaration;
		
		private System.Nullable<System.DateTime> _PenaltyDate;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _bDeclartionOfOriginalDocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppealServeIDChanging(int value);
    partial void OnAppealServeIDChanged();
    partial void OnAppealIDChanging(System.Nullable<int> value);
    partial void OnAppealIDChanged();
    partial void OnbAcknowledgeNamePinChanging(System.Nullable<bool> value);
    partial void OnbAcknowledgeNamePinChanged();
    partial void OnbThirdPartyChanging(System.Nullable<bool> value);
    partial void OnbThirdPartyChanged();
    partial void OnbDeclarationChanging(System.Nullable<bool> value);
    partial void OnbDeclarationChanged();
    partial void OnPenaltyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPenaltyDateChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnbDeclartionOfOriginalDocsChanging(System.Nullable<bool> value);
    partial void OnbDeclartionOfOriginalDocsChanged();
    #endregion
		
		public ServeAppeal()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealServeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppealServeID
		{
			get
			{
				return this._AppealServeID;
			}
			set
			{
				if ((this._AppealServeID != value))
				{
					this.OnAppealServeIDChanging(value);
					this.SendPropertyChanging();
					this._AppealServeID = value;
					this.SendPropertyChanged("AppealServeID");
					this.OnAppealServeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealID", DbType="Int")]
		public System.Nullable<int> AppealID
		{
			get
			{
				return this._AppealID;
			}
			set
			{
				if ((this._AppealID != value))
				{
					this.OnAppealIDChanging(value);
					this.SendPropertyChanging();
					this._AppealID = value;
					this.SendPropertyChanged("AppealID");
					this.OnAppealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bAcknowledgeNamePin", DbType="Bit")]
		public System.Nullable<bool> bAcknowledgeNamePin
		{
			get
			{
				return this._bAcknowledgeNamePin;
			}
			set
			{
				if ((this._bAcknowledgeNamePin != value))
				{
					this.OnbAcknowledgeNamePinChanging(value);
					this.SendPropertyChanging();
					this._bAcknowledgeNamePin = value;
					this.SendPropertyChanged("bAcknowledgeNamePin");
					this.OnbAcknowledgeNamePinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdParty", DbType="Bit")]
		public System.Nullable<bool> bThirdParty
		{
			get
			{
				return this._bThirdParty;
			}
			set
			{
				if ((this._bThirdParty != value))
				{
					this.OnbThirdPartyChanging(value);
					this.SendPropertyChanging();
					this._bThirdParty = value;
					this.SendPropertyChanged("bThirdParty");
					this.OnbThirdPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDeclaration", DbType="Bit")]
		public System.Nullable<bool> bDeclaration
		{
			get
			{
				return this._bDeclaration;
			}
			set
			{
				if ((this._bDeclaration != value))
				{
					this.OnbDeclarationChanging(value);
					this.SendPropertyChanging();
					this._bDeclaration = value;
					this.SendPropertyChanged("bDeclaration");
					this.OnbDeclarationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PenaltyDate", DbType="Date")]
		public System.Nullable<System.DateTime> PenaltyDate
		{
			get
			{
				return this._PenaltyDate;
			}
			set
			{
				if ((this._PenaltyDate != value))
				{
					this.OnPenaltyDateChanging(value);
					this.SendPropertyChanging();
					this._PenaltyDate = value;
					this.SendPropertyChanged("PenaltyDate");
					this.OnPenaltyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="Date")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDeclartionOfOriginalDocs", DbType="Bit")]
		public System.Nullable<bool> bDeclartionOfOriginalDocs
		{
			get
			{
				return this._bDeclartionOfOriginalDocs;
			}
			set
			{
				if ((this._bDeclartionOfOriginalDocs != value))
				{
					this.OnbDeclartionOfOriginalDocsChanging(value);
					this.SendPropertyChanging();
					this._bDeclartionOfOriginalDocs = value;
					this.SendPropertyChanged("bDeclartionOfOriginalDocs");
					this.OnbDeclartionOfOriginalDocsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantResponseExemptContestedInfo")]
	public partial class TenantResponseExemptContestedInfo1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExemptContestedID;
		
		private int _TenantResponseID;
		
		private string _Explaination;
		
		private EntityRef<TenantResponseApplicationInfo> _TenantResponseApplicationInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExemptContestedIDChanging(int value);
    partial void OnExemptContestedIDChanged();
    partial void OnTenantResponseIDChanging(int value);
    partial void OnTenantResponseIDChanged();
    partial void OnExplainationChanging(string value);
    partial void OnExplainationChanged();
    #endregion
		
		public TenantResponseExemptContestedInfo1()
		{
			this._TenantResponseApplicationInfo = default(EntityRef<TenantResponseApplicationInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExemptContestedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExemptContestedID
		{
			get
			{
				return this._ExemptContestedID;
			}
			set
			{
				if ((this._ExemptContestedID != value))
				{
					this.OnExemptContestedIDChanging(value);
					this.SendPropertyChanging();
					this._ExemptContestedID = value;
					this.SendPropertyChanged("ExemptContestedID");
					this.OnExemptContestedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantResponseID", DbType="Int NOT NULL")]
		public int TenantResponseID
		{
			get
			{
				return this._TenantResponseID;
			}
			set
			{
				if ((this._TenantResponseID != value))
				{
					if (this._TenantResponseApplicationInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantResponseIDChanging(value);
					this.SendPropertyChanging();
					this._TenantResponseID = value;
					this.SendPropertyChanged("TenantResponseID");
					this.OnTenantResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Explaination", DbType="VarChar(MAX)")]
		public string Explaination
		{
			get
			{
				return this._Explaination;
			}
			set
			{
				if ((this._Explaination != value))
				{
					this.OnExplainationChanging(value);
					this.SendPropertyChanging();
					this._Explaination = value;
					this.SendPropertyChanged("Explaination");
					this.OnExplainationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantResponseApplicationInfo_TenantResponseExemptContestedInfo1", Storage="_TenantResponseApplicationInfo", ThisKey="TenantResponseID", OtherKey="TenantResponseID", IsForeignKey=true)]
		public TenantResponseApplicationInfo TenantResponseApplicationInfo
		{
			get
			{
				return this._TenantResponseApplicationInfo.Entity;
			}
			set
			{
				TenantResponseApplicationInfo previousValue = this._TenantResponseApplicationInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantResponseApplicationInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantResponseApplicationInfo.Entity = null;
						previousValue.TenantResponseExemptContestedInfo1s.Remove(this);
					}
					this._TenantResponseApplicationInfo.Entity = value;
					if ((value != null))
					{
						value.TenantResponseExemptContestedInfo1s.Add(this);
						this._TenantResponseID = value.TenantResponseID;
					}
					else
					{
						this._TenantResponseID = default(int);
					}
					this.SendPropertyChanged("TenantResponseApplicationInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerRentIncreaseReasons")]
	public partial class OwnerRentIncreaseReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReasonID;
		
		private string _Reason;
		
		private string _ToolTip;
		
		private EntitySet<OwnerRentIncreaseReasonInfo> _OwnerRentIncreaseReasonInfos;
		
		private EntitySet<OwnerResponseRentIncreaseReasonInfo> _OwnerResponseRentIncreaseReasonInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReasonIDChanging(int value);
    partial void OnReasonIDChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnToolTipChanging(string value);
    partial void OnToolTipChanged();
    #endregion
		
		public OwnerRentIncreaseReason()
		{
			this._OwnerRentIncreaseReasonInfos = new EntitySet<OwnerRentIncreaseReasonInfo>(new Action<OwnerRentIncreaseReasonInfo>(this.attach_OwnerRentIncreaseReasonInfos), new Action<OwnerRentIncreaseReasonInfo>(this.detach_OwnerRentIncreaseReasonInfos));
			this._OwnerResponseRentIncreaseReasonInfos = new EntitySet<OwnerResponseRentIncreaseReasonInfo>(new Action<OwnerResponseRentIncreaseReasonInfo>(this.attach_OwnerResponseRentIncreaseReasonInfos), new Action<OwnerResponseRentIncreaseReasonInfo>(this.detach_OwnerResponseRentIncreaseReasonInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReasonID
		{
			get
			{
				return this._ReasonID;
			}
			set
			{
				if ((this._ReasonID != value))
				{
					this.OnReasonIDChanging(value);
					this.SendPropertyChanging();
					this._ReasonID = value;
					this.SendPropertyChanged("ReasonID");
					this.OnReasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolTip", DbType="VarChar(MAX)")]
		public string ToolTip
		{
			get
			{
				return this._ToolTip;
			}
			set
			{
				if ((this._ToolTip != value))
				{
					this.OnToolTipChanging(value);
					this.SendPropertyChanging();
					this._ToolTip = value;
					this.SendPropertyChanged("ToolTip");
					this.OnToolTipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerRentIncreaseReason_OwnerRentIncreaseReasonInfo", Storage="_OwnerRentIncreaseReasonInfos", ThisKey="ReasonID", OtherKey="ReasonID")]
		public EntitySet<OwnerRentIncreaseReasonInfo> OwnerRentIncreaseReasonInfos
		{
			get
			{
				return this._OwnerRentIncreaseReasonInfos;
			}
			set
			{
				this._OwnerRentIncreaseReasonInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerRentIncreaseReason_OwnerResponseRentIncreaseReasonInfo", Storage="_OwnerResponseRentIncreaseReasonInfos", ThisKey="ReasonID", OtherKey="ReasonID")]
		public EntitySet<OwnerResponseRentIncreaseReasonInfo> OwnerResponseRentIncreaseReasonInfos
		{
			get
			{
				return this._OwnerResponseRentIncreaseReasonInfos;
			}
			set
			{
				this._OwnerResponseRentIncreaseReasonInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerRentIncreaseReasonInfos(OwnerRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerRentIncreaseReason = this;
		}
		
		private void detach_OwnerRentIncreaseReasonInfos(OwnerRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerRentIncreaseReason = null;
		}
		
		private void attach_OwnerResponseRentIncreaseReasonInfos(OwnerResponseRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerRentIncreaseReason = this;
		}
		
		private void detach_OwnerResponseRentIncreaseReasonInfos(OwnerResponseRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerRentIncreaseReason = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionVerification")]
	public partial class OwnerPetitionVerification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VerificationID;
		
		private int _PetitionID;
		
		private bool _bDeclarePenalty;
		
		private bool _bThirdParty;
		
		private bool _bThirdPartyMediation;
		
		private bool _bCaseMediation;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<OwnerPetitionInfo> _OwnerPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVerificationIDChanging(int value);
    partial void OnVerificationIDChanged();
    partial void OnPetitionIDChanging(int value);
    partial void OnPetitionIDChanged();
    partial void OnbDeclarePenaltyChanging(bool value);
    partial void OnbDeclarePenaltyChanged();
    partial void OnbThirdPartyChanging(bool value);
    partial void OnbThirdPartyChanged();
    partial void OnbThirdPartyMediationChanging(bool value);
    partial void OnbThirdPartyMediationChanged();
    partial void OnbCaseMediationChanging(bool value);
    partial void OnbCaseMediationChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public OwnerPetitionVerification()
		{
			this._OwnerPetitionInfo = default(EntityRef<OwnerPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VerificationID
		{
			get
			{
				return this._VerificationID;
			}
			set
			{
				if ((this._VerificationID != value))
				{
					this.OnVerificationIDChanging(value);
					this.SendPropertyChanging();
					this._VerificationID = value;
					this.SendPropertyChanged("VerificationID");
					this.OnVerificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionID", DbType="Int NOT NULL")]
		public int PetitionID
		{
			get
			{
				return this._PetitionID;
			}
			set
			{
				if ((this._PetitionID != value))
				{
					if (this._OwnerPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionID = value;
					this.SendPropertyChanged("PetitionID");
					this.OnPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDeclarePenalty", DbType="Bit NOT NULL")]
		public bool bDeclarePenalty
		{
			get
			{
				return this._bDeclarePenalty;
			}
			set
			{
				if ((this._bDeclarePenalty != value))
				{
					this.OnbDeclarePenaltyChanging(value);
					this.SendPropertyChanging();
					this._bDeclarePenalty = value;
					this.SendPropertyChanged("bDeclarePenalty");
					this.OnbDeclarePenaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdParty", DbType="Bit NOT NULL")]
		public bool bThirdParty
		{
			get
			{
				return this._bThirdParty;
			}
			set
			{
				if ((this._bThirdParty != value))
				{
					this.OnbThirdPartyChanging(value);
					this.SendPropertyChanging();
					this._bThirdParty = value;
					this.SendPropertyChanged("bThirdParty");
					this.OnbThirdPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyMediation", DbType="Bit NOT NULL")]
		public bool bThirdPartyMediation
		{
			get
			{
				return this._bThirdPartyMediation;
			}
			set
			{
				if ((this._bThirdPartyMediation != value))
				{
					this.OnbThirdPartyMediationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyMediation = value;
					this.SendPropertyChanged("bThirdPartyMediation");
					this.OnbThirdPartyMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bCaseMediation", DbType="Bit NOT NULL")]
		public bool bCaseMediation
		{
			get
			{
				return this._bCaseMediation;
			}
			set
			{
				if ((this._bCaseMediation != value))
				{
					this.OnbCaseMediationChanging(value);
					this.SendPropertyChanging();
					this._bCaseMediation = value;
					this.SendPropertyChanged("bCaseMediation");
					this.OnbCaseMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="Date NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionInfo_OwnerPetitionVerification", Storage="_OwnerPetitionInfo", ThisKey="PetitionID", OtherKey="OwnerPetitionID", IsForeignKey=true)]
		public OwnerPetitionInfo OwnerPetitionInfo
		{
			get
			{
				return this._OwnerPetitionInfo.Entity;
			}
			set
			{
				OwnerPetitionInfo previousValue = this._OwnerPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionInfo.Entity = null;
						previousValue.OwnerPetitionVerifications.Remove(this);
					}
					this._OwnerPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionVerifications.Add(this);
						this._PetitionID = value.OwnerPetitionID;
					}
					else
					{
						this._PetitionID = default(int);
					}
					this.SendPropertyChanged("OwnerPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerResponseApplicantInfo")]
	public partial class OwnerResponseApplicantInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerResponseApplicantInfoID;
		
		private int _ApplicantUserID;
		
		private System.Nullable<bool> _bThirdPartyRepresentation;
		
		private int _ThirdPartyUserID;
		
		private System.Nullable<bool> _bBusinessLicensePaid;
		
		private string _BusinessLicenseNumber;
		
		private System.Nullable<bool> _bRentAdjustmentProgramFeePaid;
		
		private System.Nullable<System.DateTime> _BuildingAcquiredDate;
		
		private System.Nullable<int> _NumberOfUnits;
		
		private System.Nullable<bool> _bMoreThanOneStreetOnParcel;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _bPetitionFiled;
		
		private System.Nullable<bool> _ResponseFiledByThirdParty;
		
		private string _CaseRespondingTo;
		
		private System.Nullable<int> _RangeID;
		
		private EntitySet<OwnerResponseInfo> _OwnerResponseInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerResponseApplicantInfoIDChanging(int value);
    partial void OnOwnerResponseApplicantInfoIDChanged();
    partial void OnApplicantUserIDChanging(int value);
    partial void OnApplicantUserIDChanged();
    partial void OnbThirdPartyRepresentationChanging(System.Nullable<bool> value);
    partial void OnbThirdPartyRepresentationChanged();
    partial void OnThirdPartyUserIDChanging(int value);
    partial void OnThirdPartyUserIDChanged();
    partial void OnbBusinessLicensePaidChanging(System.Nullable<bool> value);
    partial void OnbBusinessLicensePaidChanged();
    partial void OnBusinessLicenseNumberChanging(string value);
    partial void OnBusinessLicenseNumberChanged();
    partial void OnbRentAdjustmentProgramFeePaidChanging(System.Nullable<bool> value);
    partial void OnbRentAdjustmentProgramFeePaidChanged();
    partial void OnBuildingAcquiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBuildingAcquiredDateChanged();
    partial void OnNumberOfUnitsChanging(System.Nullable<int> value);
    partial void OnNumberOfUnitsChanged();
    partial void OnbMoreThanOneStreetOnParcelChanging(System.Nullable<bool> value);
    partial void OnbMoreThanOneStreetOnParcelChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnbPetitionFiledChanging(System.Nullable<bool> value);
    partial void OnbPetitionFiledChanged();
    partial void OnResponseFiledByThirdPartyChanging(System.Nullable<bool> value);
    partial void OnResponseFiledByThirdPartyChanged();
    partial void OnCaseRespondingToChanging(string value);
    partial void OnCaseRespondingToChanged();
    partial void OnRangeIDChanging(System.Nullable<int> value);
    partial void OnRangeIDChanged();
    #endregion
		
		public OwnerResponseApplicantInfo()
		{
			this._OwnerResponseInfos = new EntitySet<OwnerResponseInfo>(new Action<OwnerResponseInfo>(this.attach_OwnerResponseInfos), new Action<OwnerResponseInfo>(this.detach_OwnerResponseInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerResponseApplicantInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerResponseApplicantInfoID
		{
			get
			{
				return this._OwnerResponseApplicantInfoID;
			}
			set
			{
				if ((this._OwnerResponseApplicantInfoID != value))
				{
					this.OnOwnerResponseApplicantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerResponseApplicantInfoID = value;
					this.SendPropertyChanged("OwnerResponseApplicantInfoID");
					this.OnOwnerResponseApplicantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantUserID", DbType="Int NOT NULL")]
		public int ApplicantUserID
		{
			get
			{
				return this._ApplicantUserID;
			}
			set
			{
				if ((this._ApplicantUserID != value))
				{
					this.OnApplicantUserIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantUserID = value;
					this.SendPropertyChanged("ApplicantUserID");
					this.OnApplicantUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyRepresentation", DbType="Bit")]
		public System.Nullable<bool> bThirdPartyRepresentation
		{
			get
			{
				return this._bThirdPartyRepresentation;
			}
			set
			{
				if ((this._bThirdPartyRepresentation != value))
				{
					this.OnbThirdPartyRepresentationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyRepresentation = value;
					this.SendPropertyChanged("bThirdPartyRepresentation");
					this.OnbThirdPartyRepresentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdPartyUserID", DbType="Int NOT NULL")]
		public int ThirdPartyUserID
		{
			get
			{
				return this._ThirdPartyUserID;
			}
			set
			{
				if ((this._ThirdPartyUserID != value))
				{
					this.OnThirdPartyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdPartyUserID = value;
					this.SendPropertyChanged("ThirdPartyUserID");
					this.OnThirdPartyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bBusinessLicensePaid", DbType="Bit")]
		public System.Nullable<bool> bBusinessLicensePaid
		{
			get
			{
				return this._bBusinessLicensePaid;
			}
			set
			{
				if ((this._bBusinessLicensePaid != value))
				{
					this.OnbBusinessLicensePaidChanging(value);
					this.SendPropertyChanging();
					this._bBusinessLicensePaid = value;
					this.SendPropertyChanged("bBusinessLicensePaid");
					this.OnbBusinessLicensePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseNumber", DbType="VarChar(30)")]
		public string BusinessLicenseNumber
		{
			get
			{
				return this._BusinessLicenseNumber;
			}
			set
			{
				if ((this._BusinessLicenseNumber != value))
				{
					this.OnBusinessLicenseNumberChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseNumber = value;
					this.SendPropertyChanged("BusinessLicenseNumber");
					this.OnBusinessLicenseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentAdjustmentProgramFeePaid", DbType="Bit")]
		public System.Nullable<bool> bRentAdjustmentProgramFeePaid
		{
			get
			{
				return this._bRentAdjustmentProgramFeePaid;
			}
			set
			{
				if ((this._bRentAdjustmentProgramFeePaid != value))
				{
					this.OnbRentAdjustmentProgramFeePaidChanging(value);
					this.SendPropertyChanging();
					this._bRentAdjustmentProgramFeePaid = value;
					this.SendPropertyChanged("bRentAdjustmentProgramFeePaid");
					this.OnbRentAdjustmentProgramFeePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingAcquiredDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BuildingAcquiredDate
		{
			get
			{
				return this._BuildingAcquiredDate;
			}
			set
			{
				if ((this._BuildingAcquiredDate != value))
				{
					this.OnBuildingAcquiredDateChanging(value);
					this.SendPropertyChanging();
					this._BuildingAcquiredDate = value;
					this.SendPropertyChanged("BuildingAcquiredDate");
					this.OnBuildingAcquiredDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfUnits", DbType="Int")]
		public System.Nullable<int> NumberOfUnits
		{
			get
			{
				return this._NumberOfUnits;
			}
			set
			{
				if ((this._NumberOfUnits != value))
				{
					this.OnNumberOfUnitsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfUnits = value;
					this.SendPropertyChanged("NumberOfUnits");
					this.OnNumberOfUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bMoreThanOneStreetOnParcel", DbType="Bit")]
		public System.Nullable<bool> bMoreThanOneStreetOnParcel
		{
			get
			{
				return this._bMoreThanOneStreetOnParcel;
			}
			set
			{
				if ((this._bMoreThanOneStreetOnParcel != value))
				{
					this.OnbMoreThanOneStreetOnParcelChanging(value);
					this.SendPropertyChanging();
					this._bMoreThanOneStreetOnParcel = value;
					this.SendPropertyChanged("bMoreThanOneStreetOnParcel");
					this.OnbMoreThanOneStreetOnParcelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPetitionFiled", DbType="Bit")]
		public System.Nullable<bool> bPetitionFiled
		{
			get
			{
				return this._bPetitionFiled;
			}
			set
			{
				if ((this._bPetitionFiled != value))
				{
					this.OnbPetitionFiledChanging(value);
					this.SendPropertyChanging();
					this._bPetitionFiled = value;
					this.SendPropertyChanged("bPetitionFiled");
					this.OnbPetitionFiledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseFiledByThirdParty", DbType="Bit")]
		public System.Nullable<bool> ResponseFiledByThirdParty
		{
			get
			{
				return this._ResponseFiledByThirdParty;
			}
			set
			{
				if ((this._ResponseFiledByThirdParty != value))
				{
					this.OnResponseFiledByThirdPartyChanging(value);
					this.SendPropertyChanging();
					this._ResponseFiledByThirdParty = value;
					this.SendPropertyChanged("ResponseFiledByThirdParty");
					this.OnResponseFiledByThirdPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseRespondingTo", DbType="VarChar(10)")]
		public string CaseRespondingTo
		{
			get
			{
				return this._CaseRespondingTo;
			}
			set
			{
				if ((this._CaseRespondingTo != value))
				{
					this.OnCaseRespondingToChanging(value);
					this.SendPropertyChanging();
					this._CaseRespondingTo = value;
					this.SendPropertyChanged("CaseRespondingTo");
					this.OnCaseRespondingToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangeID", DbType="Int")]
		public System.Nullable<int> RangeID
		{
			get
			{
				return this._RangeID;
			}
			set
			{
				if ((this._RangeID != value))
				{
					this.OnRangeIDChanging(value);
					this.SendPropertyChanging();
					this._RangeID = value;
					this.SendPropertyChanged("RangeID");
					this.OnRangeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponseApplicantInfo_OwnerResponseInfo", Storage="_OwnerResponseInfos", ThisKey="OwnerResponseApplicantInfoID", OtherKey="OwnerResponseApplicantInfoID")]
		public EntitySet<OwnerResponseInfo> OwnerResponseInfos
		{
			get
			{
				return this._OwnerResponseInfos;
			}
			set
			{
				this._OwnerResponseInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerResponseInfos(OwnerResponseInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponseApplicantInfo = this;
		}
		
		private void detach_OwnerResponseInfos(OwnerResponseInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerResponseApplicantInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerResponseVerification")]
	public partial class OwnerResponseVerification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VerificationID;
		
		private int _PetitionID;
		
		private bool _bDeclarePenalty;
		
		private bool _bThirdParty;
		
		private bool _bThirdPartyMediation;
		
		private bool _bCaseMediation;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<OwnerResponseInfo> _OwnerResponseInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVerificationIDChanging(int value);
    partial void OnVerificationIDChanged();
    partial void OnPetitionIDChanging(int value);
    partial void OnPetitionIDChanged();
    partial void OnbDeclarePenaltyChanging(bool value);
    partial void OnbDeclarePenaltyChanged();
    partial void OnbThirdPartyChanging(bool value);
    partial void OnbThirdPartyChanged();
    partial void OnbThirdPartyMediationChanging(bool value);
    partial void OnbThirdPartyMediationChanged();
    partial void OnbCaseMediationChanging(bool value);
    partial void OnbCaseMediationChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public OwnerResponseVerification()
		{
			this._OwnerResponseInfo = default(EntityRef<OwnerResponseInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VerificationID
		{
			get
			{
				return this._VerificationID;
			}
			set
			{
				if ((this._VerificationID != value))
				{
					this.OnVerificationIDChanging(value);
					this.SendPropertyChanging();
					this._VerificationID = value;
					this.SendPropertyChanged("VerificationID");
					this.OnVerificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionID", DbType="Int NOT NULL")]
		public int PetitionID
		{
			get
			{
				return this._PetitionID;
			}
			set
			{
				if ((this._PetitionID != value))
				{
					if (this._OwnerResponseInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionID = value;
					this.SendPropertyChanged("PetitionID");
					this.OnPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDeclarePenalty", DbType="Bit NOT NULL")]
		public bool bDeclarePenalty
		{
			get
			{
				return this._bDeclarePenalty;
			}
			set
			{
				if ((this._bDeclarePenalty != value))
				{
					this.OnbDeclarePenaltyChanging(value);
					this.SendPropertyChanging();
					this._bDeclarePenalty = value;
					this.SendPropertyChanged("bDeclarePenalty");
					this.OnbDeclarePenaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdParty", DbType="Bit NOT NULL")]
		public bool bThirdParty
		{
			get
			{
				return this._bThirdParty;
			}
			set
			{
				if ((this._bThirdParty != value))
				{
					this.OnbThirdPartyChanging(value);
					this.SendPropertyChanging();
					this._bThirdParty = value;
					this.SendPropertyChanged("bThirdParty");
					this.OnbThirdPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyMediation", DbType="Bit NOT NULL")]
		public bool bThirdPartyMediation
		{
			get
			{
				return this._bThirdPartyMediation;
			}
			set
			{
				if ((this._bThirdPartyMediation != value))
				{
					this.OnbThirdPartyMediationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyMediation = value;
					this.SendPropertyChanged("bThirdPartyMediation");
					this.OnbThirdPartyMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bCaseMediation", DbType="Bit NOT NULL")]
		public bool bCaseMediation
		{
			get
			{
				return this._bCaseMediation;
			}
			set
			{
				if ((this._bCaseMediation != value))
				{
					this.OnbCaseMediationChanging(value);
					this.SendPropertyChanging();
					this._bCaseMediation = value;
					this.SendPropertyChanged("bCaseMediation");
					this.OnbCaseMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="Date NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerResponseInfo_OwnerResponseVerification", Storage="_OwnerResponseInfo", ThisKey="PetitionID", OtherKey="OwnerResponseID", IsForeignKey=true)]
		public OwnerResponseInfo OwnerResponseInfo
		{
			get
			{
				return this._OwnerResponseInfo.Entity;
			}
			set
			{
				OwnerResponseInfo previousValue = this._OwnerResponseInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerResponseInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerResponseInfo.Entity = null;
						previousValue.OwnerResponseVerifications.Remove(this);
					}
					this._OwnerResponseInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerResponseVerifications.Add(this);
						this._PetitionID = value.OwnerResponseID;
					}
					else
					{
						this._PetitionID = default(int);
					}
					this.SendPropertyChanged("OwnerResponseInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
