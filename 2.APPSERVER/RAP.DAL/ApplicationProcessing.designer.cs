#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RAP.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OAKRAP")]
	public partial class ApplicationProcessingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCurrentOnRentStatus(CurrentOnRentStatus instance);
    partial void UpdateCurrentOnRentStatus(CurrentOnRentStatus instance);
    partial void DeleteCurrentOnRentStatus(CurrentOnRentStatus instance);
    partial void InsertPetitionGround(PetitionGround instance);
    partial void UpdatePetitionGround(PetitionGround instance);
    partial void DeletePetitionGround(PetitionGround instance);
    partial void InsertUnitType(UnitType instance);
    partial void UpdateUnitType(UnitType instance);
    partial void DeleteUnitType(UnitType instance);
    partial void InsertTenantProblemInfo(TenantProblemInfo instance);
    partial void UpdateTenantProblemInfo(TenantProblemInfo instance);
    partial void DeleteTenantProblemInfo(TenantProblemInfo instance);
    partial void InsertTenantLostServiceInfo(TenantLostServiceInfo instance);
    partial void UpdateTenantLostServiceInfo(TenantLostServiceInfo instance);
    partial void DeleteTenantLostServiceInfo(TenantLostServiceInfo instance);
    partial void InsertTenantPetitionGroundInfo(TenantPetitionGroundInfo instance);
    partial void UpdateTenantPetitionGroundInfo(TenantPetitionGroundInfo instance);
    partial void DeleteTenantPetitionGroundInfo(TenantPetitionGroundInfo instance);
    partial void InsertTenantRentalIncrementInfo(TenantRentalIncrementInfo instance);
    partial void UpdateTenantRentalIncrementInfo(TenantRentalIncrementInfo instance);
    partial void DeleteTenantRentalIncrementInfo(TenantRentalIncrementInfo instance);
    partial void InsertAppealGround(AppealGround instance);
    partial void UpdateAppealGround(AppealGround instance);
    partial void DeleteAppealGround(AppealGround instance);
    partial void InsertTenantAppealDetail(TenantAppealDetail instance);
    partial void UpdateTenantAppealDetail(TenantAppealDetail instance);
    partial void DeleteTenantAppealDetail(TenantAppealDetail instance);
    partial void InsertTenantAppealGroundInfo(TenantAppealGroundInfo instance);
    partial void UpdateTenantAppealGroundInfo(TenantAppealGroundInfo instance);
    partial void DeleteTenantAppealGroundInfo(TenantAppealGroundInfo instance);
    partial void InsertAppealOpposingParty(AppealOpposingParty instance);
    partial void UpdateAppealOpposingParty(AppealOpposingParty instance);
    partial void DeleteAppealOpposingParty(AppealOpposingParty instance);
    partial void InsertTenantPetitionInfo(TenantPetitionInfo instance);
    partial void UpdateTenantPetitionInfo(TenantPetitionInfo instance);
    partial void DeleteTenantPetitionInfo(TenantPetitionInfo instance);
    partial void InsertOwnerPetitionInfo(OwnerPetitionInfo instance);
    partial void UpdateOwnerPetitionInfo(OwnerPetitionInfo instance);
    partial void DeleteOwnerPetitionInfo(OwnerPetitionInfo instance);
    partial void InsertOwnerPetitionRentalIncrementInfo(OwnerPetitionRentalIncrementInfo instance);
    partial void UpdateOwnerPetitionRentalIncrementInfo(OwnerPetitionRentalIncrementInfo instance);
    partial void DeleteOwnerPetitionRentalIncrementInfo(OwnerPetitionRentalIncrementInfo instance);
    partial void InsertOwnerPetitionTenantInfo(OwnerPetitionTenantInfo instance);
    partial void UpdateOwnerPetitionTenantInfo(OwnerPetitionTenantInfo instance);
    partial void DeleteOwnerPetitionTenantInfo(OwnerPetitionTenantInfo instance);
    partial void InsertOwnerRentIncreaseReason(OwnerRentIncreaseReason instance);
    partial void UpdateOwnerRentIncreaseReason(OwnerRentIncreaseReason instance);
    partial void DeleteOwnerRentIncreaseReason(OwnerRentIncreaseReason instance);
    partial void InsertOwnerPetitionPropertyInfo(OwnerPetitionPropertyInfo instance);
    partial void UpdateOwnerPetitionPropertyInfo(OwnerPetitionPropertyInfo instance);
    partial void DeleteOwnerPetitionPropertyInfo(OwnerPetitionPropertyInfo instance);
    partial void InsertPetitionDetail(PetitionDetail instance);
    partial void UpdatePetitionDetail(PetitionDetail instance);
    partial void DeletePetitionDetail(PetitionDetail instance);
    partial void InsertCaseDetail(CaseDetail instance);
    partial void UpdateCaseDetail(CaseDetail instance);
    partial void DeleteCaseDetail(CaseDetail instance);
    partial void InsertPetitionCategory(PetitionCategory instance);
    partial void UpdatePetitionCategory(PetitionCategory instance);
    partial void DeletePetitionCategory(PetitionCategory instance);
    partial void InsertOwnerPetitionApplicantInfo(OwnerPetitionApplicantInfo instance);
    partial void UpdateOwnerPetitionApplicantInfo(OwnerPetitionApplicantInfo instance);
    partial void DeleteOwnerPetitionApplicantInfo(OwnerPetitionApplicantInfo instance);
    partial void InsertOwnerRentIncreaseReasonInfo(OwnerRentIncreaseReasonInfo instance);
    partial void UpdateOwnerRentIncreaseReasonInfo(OwnerRentIncreaseReasonInfo instance);
    partial void DeleteOwnerRentIncreaseReasonInfo(OwnerRentIncreaseReasonInfo instance);
    partial void InsertNumberRangeForUnit(NumberRangeForUnit instance);
    partial void UpdateNumberRangeForUnit(NumberRangeForUnit instance);
    partial void DeleteNumberRangeForUnit(NumberRangeForUnit instance);
    #endregion
		
		public ApplicationProcessingDataContext() : 
				base(global::RAP.DAL.Properties.Settings.Default.OAKRAPConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ApplicationProcessingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApplicationProcessingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApplicationProcessingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApplicationProcessingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CurrentOnRentStatus> CurrentOnRentStatus
		{
			get
			{
				return this.GetTable<CurrentOnRentStatus>();
			}
		}
		
		public System.Data.Linq.Table<PetitionGround> PetitionGrounds
		{
			get
			{
				return this.GetTable<PetitionGround>();
			}
		}
		
		public System.Data.Linq.Table<UnitType> UnitTypes
		{
			get
			{
				return this.GetTable<UnitType>();
			}
		}
		
		public System.Data.Linq.Table<TenantProblemInfo> TenantProblemInfos
		{
			get
			{
				return this.GetTable<TenantProblemInfo>();
			}
		}
		
		public System.Data.Linq.Table<TenantLostServiceInfo> TenantLostServiceInfos
		{
			get
			{
				return this.GetTable<TenantLostServiceInfo>();
			}
		}
		
		public System.Data.Linq.Table<TenantPetitionGroundInfo> TenantPetitionGroundInfos
		{
			get
			{
				return this.GetTable<TenantPetitionGroundInfo>();
			}
		}
		
		public System.Data.Linq.Table<TenantRentalIncrementInfo> TenantRentalIncrementInfos
		{
			get
			{
				return this.GetTable<TenantRentalIncrementInfo>();
			}
		}
		
		public System.Data.Linq.Table<AppealGround> AppealGrounds
		{
			get
			{
				return this.GetTable<AppealGround>();
			}
		}
		
		public System.Data.Linq.Table<TenantAppealDetail> TenantAppealDetails
		{
			get
			{
				return this.GetTable<TenantAppealDetail>();
			}
		}
		
		public System.Data.Linq.Table<TenantAppealGroundInfo> TenantAppealGroundInfos
		{
			get
			{
				return this.GetTable<TenantAppealGroundInfo>();
			}
		}
		
		public System.Data.Linq.Table<AppealOpposingParty> AppealOpposingParties
		{
			get
			{
				return this.GetTable<AppealOpposingParty>();
			}
		}
		
		public System.Data.Linq.Table<TenantPetitionInfo> TenantPetitionInfos
		{
			get
			{
				return this.GetTable<TenantPetitionInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionInfo> OwnerPetitionInfos
		{
			get
			{
				return this.GetTable<OwnerPetitionInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionRentalIncrementInfo> OwnerPetitionRentalIncrementInfos
		{
			get
			{
				return this.GetTable<OwnerPetitionRentalIncrementInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionTenantInfo> OwnerPetitionTenantInfos
		{
			get
			{
				return this.GetTable<OwnerPetitionTenantInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerRentIncreaseReason> OwnerRentIncreaseReasons
		{
			get
			{
				return this.GetTable<OwnerRentIncreaseReason>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionPropertyInfo> OwnerPetitionPropertyInfos
		{
			get
			{
				return this.GetTable<OwnerPetitionPropertyInfo>();
			}
		}
		
		public System.Data.Linq.Table<PetitionDetail> PetitionDetails
		{
			get
			{
				return this.GetTable<PetitionDetail>();
			}
		}
		
		public System.Data.Linq.Table<CaseDetail> CaseDetails
		{
			get
			{
				return this.GetTable<CaseDetail>();
			}
		}
		
		public System.Data.Linq.Table<PetitionCategory> PetitionCategories
		{
			get
			{
				return this.GetTable<PetitionCategory>();
			}
		}
		
		public System.Data.Linq.Table<OwnerPetitionApplicantInfo> OwnerPetitionApplicantInfos
		{
			get
			{
				return this.GetTable<OwnerPetitionApplicantInfo>();
			}
		}
		
		public System.Data.Linq.Table<OwnerRentIncreaseReasonInfo> OwnerRentIncreaseReasonInfos
		{
			get
			{
				return this.GetTable<OwnerRentIncreaseReasonInfo>();
			}
		}
		
		public System.Data.Linq.Table<NumberRangeForUnit> NumberRangeForUnits
		{
			get
			{
				return this.GetTable<NumberRangeForUnit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentOnRentStatus")]
	public partial class CurrentOnRentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentStatusID;
		
		private string _RentStatus;
		
		private EntitySet<OwnerPetitionPropertyInfo> _OwnerPetitionPropertyInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentStatusIDChanging(int value);
    partial void OnRentStatusIDChanged();
    partial void OnRentStatusChanging(string value);
    partial void OnRentStatusChanged();
    #endregion
		
		public CurrentOnRentStatus()
		{
			this._OwnerPetitionPropertyInfos = new EntitySet<OwnerPetitionPropertyInfo>(new Action<OwnerPetitionPropertyInfo>(this.attach_OwnerPetitionPropertyInfos), new Action<OwnerPetitionPropertyInfo>(this.detach_OwnerPetitionPropertyInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentStatusID
		{
			get
			{
				return this._RentStatusID;
			}
			set
			{
				if ((this._RentStatusID != value))
				{
					this.OnRentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._RentStatusID = value;
					this.SendPropertyChanged("RentStatusID");
					this.OnRentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentStatus", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RentStatus
		{
			get
			{
				return this._RentStatus;
			}
			set
			{
				if ((this._RentStatus != value))
				{
					this.OnRentStatusChanging(value);
					this.SendPropertyChanging();
					this._RentStatus = value;
					this.SendPropertyChanged("RentStatus");
					this.OnRentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentOnRentStatus_OwnerPetitionPropertyInfo", Storage="_OwnerPetitionPropertyInfos", ThisKey="RentStatusID", OtherKey="RentStatusID")]
		public EntitySet<OwnerPetitionPropertyInfo> OwnerPetitionPropertyInfos
		{
			get
			{
				return this._OwnerPetitionPropertyInfos;
			}
			set
			{
				this._OwnerPetitionPropertyInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerPetitionPropertyInfos(OwnerPetitionPropertyInfo entity)
		{
			this.SendPropertyChanging();
			entity.CurrentOnRentStatus = this;
		}
		
		private void detach_OwnerPetitionPropertyInfos(OwnerPetitionPropertyInfo entity)
		{
			this.SendPropertyChanging();
			entity.CurrentOnRentStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PetitionGrounds")]
	public partial class PetitionGround : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PetitionGroundID;
		
		private string _PetitionDescription;
		
		private EntitySet<TenantPetitionGroundInfo> _TenantPetitionGroundInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPetitionGroundIDChanging(int value);
    partial void OnPetitionGroundIDChanged();
    partial void OnPetitionDescriptionChanging(string value);
    partial void OnPetitionDescriptionChanged();
    #endregion
		
		public PetitionGround()
		{
			this._TenantPetitionGroundInfos = new EntitySet<TenantPetitionGroundInfo>(new Action<TenantPetitionGroundInfo>(this.attach_TenantPetitionGroundInfos), new Action<TenantPetitionGroundInfo>(this.detach_TenantPetitionGroundInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionGroundID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PetitionGroundID
		{
			get
			{
				return this._PetitionGroundID;
			}
			set
			{
				if ((this._PetitionGroundID != value))
				{
					this.OnPetitionGroundIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionGroundID = value;
					this.SendPropertyChanged("PetitionGroundID");
					this.OnPetitionGroundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PetitionDescription
		{
			get
			{
				return this._PetitionDescription;
			}
			set
			{
				if ((this._PetitionDescription != value))
				{
					this.OnPetitionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PetitionDescription = value;
					this.SendPropertyChanged("PetitionDescription");
					this.OnPetitionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionGround_TenantPetitionGroundInfo", Storage="_TenantPetitionGroundInfos", ThisKey="PetitionGroundID", OtherKey="PetitionGroundID")]
		public EntitySet<TenantPetitionGroundInfo> TenantPetitionGroundInfos
		{
			get
			{
				return this._TenantPetitionGroundInfos;
			}
			set
			{
				this._TenantPetitionGroundInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TenantPetitionGroundInfos(TenantPetitionGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.PetitionGround = this;
		}
		
		private void detach_TenantPetitionGroundInfos(TenantPetitionGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.PetitionGround = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitType")]
	public partial class UnitType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitTypeID;
		
		private string _Description;
		
		private EntitySet<OwnerPetitionPropertyInfo> _OwnerPetitionPropertyInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitTypeIDChanging(int value);
    partial void OnUnitTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UnitType()
		{
			this._OwnerPetitionPropertyInfos = new EntitySet<OwnerPetitionPropertyInfo>(new Action<OwnerPetitionPropertyInfo>(this.attach_OwnerPetitionPropertyInfos), new Action<OwnerPetitionPropertyInfo>(this.detach_OwnerPetitionPropertyInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UnitTypeID
		{
			get
			{
				return this._UnitTypeID;
			}
			set
			{
				if ((this._UnitTypeID != value))
				{
					this.OnUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UnitTypeID = value;
					this.SendPropertyChanged("UnitTypeID");
					this.OnUnitTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitType_OwnerPetitionPropertyInfo", Storage="_OwnerPetitionPropertyInfos", ThisKey="UnitTypeID", OtherKey="UnitTypeID")]
		public EntitySet<OwnerPetitionPropertyInfo> OwnerPetitionPropertyInfos
		{
			get
			{
				return this._OwnerPetitionPropertyInfos;
			}
			set
			{
				this._OwnerPetitionPropertyInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerPetitionPropertyInfos(OwnerPetitionPropertyInfo entity)
		{
			this.SendPropertyChanging();
			entity.UnitType = this;
		}
		
		private void detach_OwnerPetitionPropertyInfos(OwnerPetitionPropertyInfo entity)
		{
			this.SendPropertyChanging();
			entity.UnitType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantProblemInfo")]
	public partial class TenantProblemInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemInfoID;
		
		private int _TenantPetitionID;
		
		private string _ProblemDescription;
		
		private decimal _EstimatedLoss;
		
		private System.DateTime _ProblemBeganDate;
		
		private System.DateTime _PayingToProblemBeganDate;
		
		private EntityRef<TenantPetitionInfo> _TenantPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemInfoIDChanging(int value);
    partial void OnProblemInfoIDChanged();
    partial void OnTenantPetitionIDChanging(int value);
    partial void OnTenantPetitionIDChanged();
    partial void OnProblemDescriptionChanging(string value);
    partial void OnProblemDescriptionChanged();
    partial void OnEstimatedLossChanging(decimal value);
    partial void OnEstimatedLossChanged();
    partial void OnProblemBeganDateChanging(System.DateTime value);
    partial void OnProblemBeganDateChanged();
    partial void OnPayingToProblemBeganDateChanging(System.DateTime value);
    partial void OnPayingToProblemBeganDateChanged();
    #endregion
		
		public TenantProblemInfo()
		{
			this._TenantPetitionInfo = default(EntityRef<TenantPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProblemInfoID
		{
			get
			{
				return this._ProblemInfoID;
			}
			set
			{
				if ((this._ProblemInfoID != value))
				{
					this.OnProblemInfoIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemInfoID = value;
					this.SendPropertyChanged("ProblemInfoID");
					this.OnProblemInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", DbType="Int NOT NULL")]
		public int TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					if (this._TenantPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProblemDescription
		{
			get
			{
				return this._ProblemDescription;
			}
			set
			{
				if ((this._ProblemDescription != value))
				{
					this.OnProblemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProblemDescription = value;
					this.SendPropertyChanged("ProblemDescription");
					this.OnProblemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedLoss", DbType="Decimal(6,2) NOT NULL")]
		public decimal EstimatedLoss
		{
			get
			{
				return this._EstimatedLoss;
			}
			set
			{
				if ((this._EstimatedLoss != value))
				{
					this.OnEstimatedLossChanging(value);
					this.SendPropertyChanging();
					this._EstimatedLoss = value;
					this.SendPropertyChanged("EstimatedLoss");
					this.OnEstimatedLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemBeganDate", DbType="DateTime NOT NULL")]
		public System.DateTime ProblemBeganDate
		{
			get
			{
				return this._ProblemBeganDate;
			}
			set
			{
				if ((this._ProblemBeganDate != value))
				{
					this.OnProblemBeganDateChanging(value);
					this.SendPropertyChanging();
					this._ProblemBeganDate = value;
					this.SendPropertyChanged("ProblemBeganDate");
					this.OnProblemBeganDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayingToProblemBeganDate", DbType="DateTime NOT NULL")]
		public System.DateTime PayingToProblemBeganDate
		{
			get
			{
				return this._PayingToProblemBeganDate;
			}
			set
			{
				if ((this._PayingToProblemBeganDate != value))
				{
					this.OnPayingToProblemBeganDateChanging(value);
					this.SendPropertyChanging();
					this._PayingToProblemBeganDate = value;
					this.SendPropertyChanged("PayingToProblemBeganDate");
					this.OnPayingToProblemBeganDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantProblemInfo", Storage="_TenantPetitionInfo", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID", IsForeignKey=true)]
		public TenantPetitionInfo TenantPetitionInfo
		{
			get
			{
				return this._TenantPetitionInfo.Entity;
			}
			set
			{
				TenantPetitionInfo previousValue = this._TenantPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantPetitionInfo.Entity = null;
						previousValue.TenantProblemInfos.Remove(this);
					}
					this._TenantPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.TenantProblemInfos.Add(this);
						this._TenantPetitionID = value.TenantPetitionID;
					}
					else
					{
						this._TenantPetitionID = default(int);
					}
					this.SendPropertyChanged("TenantPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantLostServiceInfo")]
	public partial class TenantLostServiceInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LostServiceInfoID;
		
		private int _TenantPetitionID;
		
		private string _ReducedServiceDescription;
		
		private decimal _EstimatedLoss;
		
		private System.DateTime _LossBeganDate;
		
		private System.DateTime _PayingToServiceBeganDate;
		
		private EntityRef<TenantPetitionInfo> _TenantPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLostServiceInfoIDChanging(int value);
    partial void OnLostServiceInfoIDChanged();
    partial void OnTenantPetitionIDChanging(int value);
    partial void OnTenantPetitionIDChanged();
    partial void OnReducedServiceDescriptionChanging(string value);
    partial void OnReducedServiceDescriptionChanged();
    partial void OnEstimatedLossChanging(decimal value);
    partial void OnEstimatedLossChanged();
    partial void OnLossBeganDateChanging(System.DateTime value);
    partial void OnLossBeganDateChanged();
    partial void OnPayingToServiceBeganDateChanging(System.DateTime value);
    partial void OnPayingToServiceBeganDateChanged();
    #endregion
		
		public TenantLostServiceInfo()
		{
			this._TenantPetitionInfo = default(EntityRef<TenantPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LostServiceInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LostServiceInfoID
		{
			get
			{
				return this._LostServiceInfoID;
			}
			set
			{
				if ((this._LostServiceInfoID != value))
				{
					this.OnLostServiceInfoIDChanging(value);
					this.SendPropertyChanging();
					this._LostServiceInfoID = value;
					this.SendPropertyChanged("LostServiceInfoID");
					this.OnLostServiceInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", DbType="Int NOT NULL")]
		public int TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					if (this._TenantPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReducedServiceDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ReducedServiceDescription
		{
			get
			{
				return this._ReducedServiceDescription;
			}
			set
			{
				if ((this._ReducedServiceDescription != value))
				{
					this.OnReducedServiceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ReducedServiceDescription = value;
					this.SendPropertyChanged("ReducedServiceDescription");
					this.OnReducedServiceDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedLoss", DbType="Decimal(6,2) NOT NULL")]
		public decimal EstimatedLoss
		{
			get
			{
				return this._EstimatedLoss;
			}
			set
			{
				if ((this._EstimatedLoss != value))
				{
					this.OnEstimatedLossChanging(value);
					this.SendPropertyChanging();
					this._EstimatedLoss = value;
					this.SendPropertyChanged("EstimatedLoss");
					this.OnEstimatedLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LossBeganDate", DbType="DateTime NOT NULL")]
		public System.DateTime LossBeganDate
		{
			get
			{
				return this._LossBeganDate;
			}
			set
			{
				if ((this._LossBeganDate != value))
				{
					this.OnLossBeganDateChanging(value);
					this.SendPropertyChanging();
					this._LossBeganDate = value;
					this.SendPropertyChanged("LossBeganDate");
					this.OnLossBeganDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayingToServiceBeganDate", DbType="DateTime NOT NULL")]
		public System.DateTime PayingToServiceBeganDate
		{
			get
			{
				return this._PayingToServiceBeganDate;
			}
			set
			{
				if ((this._PayingToServiceBeganDate != value))
				{
					this.OnPayingToServiceBeganDateChanging(value);
					this.SendPropertyChanging();
					this._PayingToServiceBeganDate = value;
					this.SendPropertyChanged("PayingToServiceBeganDate");
					this.OnPayingToServiceBeganDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantLostServiceInfo", Storage="_TenantPetitionInfo", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID", IsForeignKey=true)]
		public TenantPetitionInfo TenantPetitionInfo
		{
			get
			{
				return this._TenantPetitionInfo.Entity;
			}
			set
			{
				TenantPetitionInfo previousValue = this._TenantPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantPetitionInfo.Entity = null;
						previousValue.TenantLostServiceInfos.Remove(this);
					}
					this._TenantPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.TenantLostServiceInfos.Add(this);
						this._TenantPetitionID = value.TenantPetitionID;
					}
					else
					{
						this._TenantPetitionID = default(int);
					}
					this.SendPropertyChanged("TenantPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantPetitionGroundInfo")]
	public partial class TenantPetitionGroundInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantPetitionGroudID;
		
		private int _TenantPetitionID;
		
		private int _PetitionGroundID;
		
		private EntityRef<PetitionGround> _PetitionGround;
		
		private EntityRef<TenantPetitionInfo> _TenantPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantPetitionGroudIDChanging(int value);
    partial void OnTenantPetitionGroudIDChanged();
    partial void OnTenantPetitionIDChanging(int value);
    partial void OnTenantPetitionIDChanged();
    partial void OnPetitionGroundIDChanging(int value);
    partial void OnPetitionGroundIDChanged();
    #endregion
		
		public TenantPetitionGroundInfo()
		{
			this._PetitionGround = default(EntityRef<PetitionGround>);
			this._TenantPetitionInfo = default(EntityRef<TenantPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionGroudID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantPetitionGroudID
		{
			get
			{
				return this._TenantPetitionGroudID;
			}
			set
			{
				if ((this._TenantPetitionGroudID != value))
				{
					this.OnTenantPetitionGroudIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionGroudID = value;
					this.SendPropertyChanged("TenantPetitionGroudID");
					this.OnTenantPetitionGroudIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", DbType="Int NOT NULL")]
		public int TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					if (this._TenantPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionGroundID", DbType="Int NOT NULL")]
		public int PetitionGroundID
		{
			get
			{
				return this._PetitionGroundID;
			}
			set
			{
				if ((this._PetitionGroundID != value))
				{
					if (this._PetitionGround.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetitionGroundIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionGroundID = value;
					this.SendPropertyChanged("PetitionGroundID");
					this.OnPetitionGroundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionGround_TenantPetitionGroundInfo", Storage="_PetitionGround", ThisKey="PetitionGroundID", OtherKey="PetitionGroundID", IsForeignKey=true)]
		public PetitionGround PetitionGround
		{
			get
			{
				return this._PetitionGround.Entity;
			}
			set
			{
				PetitionGround previousValue = this._PetitionGround.Entity;
				if (((previousValue != value) 
							|| (this._PetitionGround.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PetitionGround.Entity = null;
						previousValue.TenantPetitionGroundInfos.Remove(this);
					}
					this._PetitionGround.Entity = value;
					if ((value != null))
					{
						value.TenantPetitionGroundInfos.Add(this);
						this._PetitionGroundID = value.PetitionGroundID;
					}
					else
					{
						this._PetitionGroundID = default(int);
					}
					this.SendPropertyChanged("PetitionGround");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantPetitionGroundInfo", Storage="_TenantPetitionInfo", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID", IsForeignKey=true)]
		public TenantPetitionInfo TenantPetitionInfo
		{
			get
			{
				return this._TenantPetitionInfo.Entity;
			}
			set
			{
				TenantPetitionInfo previousValue = this._TenantPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantPetitionInfo.Entity = null;
						previousValue.TenantPetitionGroundInfos.Remove(this);
					}
					this._TenantPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.TenantPetitionGroundInfos.Add(this);
						this._TenantPetitionID = value.TenantPetitionID;
					}
					else
					{
						this._TenantPetitionID = default(int);
					}
					this.SendPropertyChanged("TenantPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantRentalIncrementInfo")]
	public partial class TenantRentalIncrementInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentalIncreaseInfoID;
		
		private int _TenantPetitionID;
		
		private System.Nullable<bool> _bRentIncreaseNoticeGiven;
		
		private System.Nullable<System.DateTime> _RentIncreaseNoticeDate;
		
		private System.Nullable<System.DateTime> _RentIncreaseEffectiveDate;
		
		private System.Nullable<decimal> _RentIncreasedFrom;
		
		private System.Nullable<decimal> _RentIncreasedTo;
		
		private System.Nullable<bool> _bRentIncreaseContested;
		
		private EntityRef<TenantPetitionInfo> _TenantPetitionInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentalIncreaseInfoIDChanging(int value);
    partial void OnRentalIncreaseInfoIDChanged();
    partial void OnTenantPetitionIDChanging(int value);
    partial void OnTenantPetitionIDChanged();
    partial void OnbRentIncreaseNoticeGivenChanging(System.Nullable<bool> value);
    partial void OnbRentIncreaseNoticeGivenChanged();
    partial void OnRentIncreaseNoticeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseNoticeDateChanged();
    partial void OnRentIncreaseEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseEffectiveDateChanged();
    partial void OnRentIncreasedFromChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedFromChanged();
    partial void OnRentIncreasedToChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedToChanged();
    partial void OnbRentIncreaseContestedChanging(System.Nullable<bool> value);
    partial void OnbRentIncreaseContestedChanged();
    #endregion
		
		public TenantRentalIncrementInfo()
		{
			this._TenantPetitionInfo = default(EntityRef<TenantPetitionInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalIncreaseInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentalIncreaseInfoID
		{
			get
			{
				return this._RentalIncreaseInfoID;
			}
			set
			{
				if ((this._RentalIncreaseInfoID != value))
				{
					this.OnRentalIncreaseInfoIDChanging(value);
					this.SendPropertyChanging();
					this._RentalIncreaseInfoID = value;
					this.SendPropertyChanged("RentalIncreaseInfoID");
					this.OnRentalIncreaseInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", DbType="Int NOT NULL")]
		public int TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					if (this._TenantPetitionInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentIncreaseNoticeGiven", DbType="Bit")]
		public System.Nullable<bool> bRentIncreaseNoticeGiven
		{
			get
			{
				return this._bRentIncreaseNoticeGiven;
			}
			set
			{
				if ((this._bRentIncreaseNoticeGiven != value))
				{
					this.OnbRentIncreaseNoticeGivenChanging(value);
					this.SendPropertyChanging();
					this._bRentIncreaseNoticeGiven = value;
					this.SendPropertyChanged("bRentIncreaseNoticeGiven");
					this.OnbRentIncreaseNoticeGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseNoticeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseNoticeDate
		{
			get
			{
				return this._RentIncreaseNoticeDate;
			}
			set
			{
				if ((this._RentIncreaseNoticeDate != value))
				{
					this.OnRentIncreaseNoticeDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseNoticeDate = value;
					this.SendPropertyChanged("RentIncreaseNoticeDate");
					this.OnRentIncreaseNoticeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseEffectiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseEffectiveDate
		{
			get
			{
				return this._RentIncreaseEffectiveDate;
			}
			set
			{
				if ((this._RentIncreaseEffectiveDate != value))
				{
					this.OnRentIncreaseEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseEffectiveDate = value;
					this.SendPropertyChanged("RentIncreaseEffectiveDate");
					this.OnRentIncreaseEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedFrom", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedFrom
		{
			get
			{
				return this._RentIncreasedFrom;
			}
			set
			{
				if ((this._RentIncreasedFrom != value))
				{
					this.OnRentIncreasedFromChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedFrom = value;
					this.SendPropertyChanged("RentIncreasedFrom");
					this.OnRentIncreasedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedTo", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedTo
		{
			get
			{
				return this._RentIncreasedTo;
			}
			set
			{
				if ((this._RentIncreasedTo != value))
				{
					this.OnRentIncreasedToChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedTo = value;
					this.SendPropertyChanged("RentIncreasedTo");
					this.OnRentIncreasedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentIncreaseContested", DbType="Bit")]
		public System.Nullable<bool> bRentIncreaseContested
		{
			get
			{
				return this._bRentIncreaseContested;
			}
			set
			{
				if ((this._bRentIncreaseContested != value))
				{
					this.OnbRentIncreaseContestedChanging(value);
					this.SendPropertyChanging();
					this._bRentIncreaseContested = value;
					this.SendPropertyChanged("bRentIncreaseContested");
					this.OnbRentIncreaseContestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantRentalIncrementInfo", Storage="_TenantPetitionInfo", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID", IsForeignKey=true)]
		public TenantPetitionInfo TenantPetitionInfo
		{
			get
			{
				return this._TenantPetitionInfo.Entity;
			}
			set
			{
				TenantPetitionInfo previousValue = this._TenantPetitionInfo.Entity;
				if (((previousValue != value) 
							|| (this._TenantPetitionInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantPetitionInfo.Entity = null;
						previousValue.TenantRentalIncrementInfos.Remove(this);
					}
					this._TenantPetitionInfo.Entity = value;
					if ((value != null))
					{
						value.TenantRentalIncrementInfos.Add(this);
						this._TenantPetitionID = value.TenantPetitionID;
					}
					else
					{
						this._TenantPetitionID = default(int);
					}
					this.SendPropertyChanged("TenantPetitionInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppealGrounds")]
	public partial class AppealGround : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppealGroundID;
		
		private string _AppealDescription;
		
		private EntitySet<TenantAppealGroundInfo> _TenantAppealGroundInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppealGroundIDChanging(int value);
    partial void OnAppealGroundIDChanged();
    partial void OnAppealDescriptionChanging(string value);
    partial void OnAppealDescriptionChanged();
    #endregion
		
		public AppealGround()
		{
			this._TenantAppealGroundInfos = new EntitySet<TenantAppealGroundInfo>(new Action<TenantAppealGroundInfo>(this.attach_TenantAppealGroundInfos), new Action<TenantAppealGroundInfo>(this.detach_TenantAppealGroundInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealGroundID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppealGroundID
		{
			get
			{
				return this._AppealGroundID;
			}
			set
			{
				if ((this._AppealGroundID != value))
				{
					this.OnAppealGroundIDChanging(value);
					this.SendPropertyChanging();
					this._AppealGroundID = value;
					this.SendPropertyChanged("AppealGroundID");
					this.OnAppealGroundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AppealDescription
		{
			get
			{
				return this._AppealDescription;
			}
			set
			{
				if ((this._AppealDescription != value))
				{
					this.OnAppealDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AppealDescription = value;
					this.SendPropertyChanged("AppealDescription");
					this.OnAppealDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppealGround_TenantAppealGroundInfo", Storage="_TenantAppealGroundInfos", ThisKey="AppealGroundID", OtherKey="AppealGroundID")]
		public EntitySet<TenantAppealGroundInfo> TenantAppealGroundInfos
		{
			get
			{
				return this._TenantAppealGroundInfos;
			}
			set
			{
				this._TenantAppealGroundInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TenantAppealGroundInfos(TenantAppealGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.AppealGround = this;
		}
		
		private void detach_TenantAppealGroundInfos(TenantAppealGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.AppealGround = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantAppealDetails")]
	public partial class TenantAppealDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantAppealID;
		
		private bool _bThirdPartyRepresentation;
		
		private int _ThirdPartyUserID;
		
		private System.Nullable<System.DateTime> _OpposingPartyCommunicateDate;
		
		private System.Nullable<int> _AppealFiledBy;
		
		private System.DateTime _CreatedDate;
		
		private EntitySet<CaseDetail> _CaseDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantAppealIDChanging(int value);
    partial void OnTenantAppealIDChanged();
    partial void OnbThirdPartyRepresentationChanging(bool value);
    partial void OnbThirdPartyRepresentationChanged();
    partial void OnThirdPartyUserIDChanging(int value);
    partial void OnThirdPartyUserIDChanged();
    partial void OnOpposingPartyCommunicateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpposingPartyCommunicateDateChanged();
    partial void OnAppealFiledByChanging(System.Nullable<int> value);
    partial void OnAppealFiledByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TenantAppealDetail()
		{
			this._CaseDetails = new EntitySet<CaseDetail>(new Action<CaseDetail>(this.attach_CaseDetails), new Action<CaseDetail>(this.detach_CaseDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantAppealID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantAppealID
		{
			get
			{
				return this._TenantAppealID;
			}
			set
			{
				if ((this._TenantAppealID != value))
				{
					this.OnTenantAppealIDChanging(value);
					this.SendPropertyChanging();
					this._TenantAppealID = value;
					this.SendPropertyChanged("TenantAppealID");
					this.OnTenantAppealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyRepresentation", DbType="Bit NOT NULL")]
		public bool bThirdPartyRepresentation
		{
			get
			{
				return this._bThirdPartyRepresentation;
			}
			set
			{
				if ((this._bThirdPartyRepresentation != value))
				{
					this.OnbThirdPartyRepresentationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyRepresentation = value;
					this.SendPropertyChanged("bThirdPartyRepresentation");
					this.OnbThirdPartyRepresentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdPartyUserID", DbType="Int NOT NULL")]
		public int ThirdPartyUserID
		{
			get
			{
				return this._ThirdPartyUserID;
			}
			set
			{
				if ((this._ThirdPartyUserID != value))
				{
					this.OnThirdPartyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdPartyUserID = value;
					this.SendPropertyChanged("ThirdPartyUserID");
					this.OnThirdPartyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpposingPartyCommunicateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OpposingPartyCommunicateDate
		{
			get
			{
				return this._OpposingPartyCommunicateDate;
			}
			set
			{
				if ((this._OpposingPartyCommunicateDate != value))
				{
					this.OnOpposingPartyCommunicateDateChanging(value);
					this.SendPropertyChanging();
					this._OpposingPartyCommunicateDate = value;
					this.SendPropertyChanged("OpposingPartyCommunicateDate");
					this.OnOpposingPartyCommunicateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealFiledBy", DbType="Int")]
		public System.Nullable<int> AppealFiledBy
		{
			get
			{
				return this._AppealFiledBy;
			}
			set
			{
				if ((this._AppealFiledBy != value))
				{
					this.OnAppealFiledByChanging(value);
					this.SendPropertyChanging();
					this._AppealFiledBy = value;
					this.SendPropertyChanged("AppealFiledBy");
					this.OnAppealFiledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantAppealDetail_CaseDetail", Storage="_CaseDetails", ThisKey="TenantAppealID", OtherKey="TenantAppealID")]
		public EntitySet<CaseDetail> CaseDetails
		{
			get
			{
				return this._CaseDetails;
			}
			set
			{
				this._CaseDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.TenantAppealDetail = this;
		}
		
		private void detach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.TenantAppealDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantAppealGroundInfo")]
	public partial class TenantAppealGroundInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantAppealGroudID;
		
		private int _AppealID;
		
		private int _AppealGroundID;
		
		private bool _IsDeleted;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<AppealGround> _AppealGround;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantAppealGroudIDChanging(int value);
    partial void OnTenantAppealGroudIDChanged();
    partial void OnAppealIDChanging(int value);
    partial void OnAppealIDChanged();
    partial void OnAppealGroundIDChanging(int value);
    partial void OnAppealGroundIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TenantAppealGroundInfo()
		{
			this._AppealGround = default(EntityRef<AppealGround>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantAppealGroudID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantAppealGroudID
		{
			get
			{
				return this._TenantAppealGroudID;
			}
			set
			{
				if ((this._TenantAppealGroudID != value))
				{
					this.OnTenantAppealGroudIDChanging(value);
					this.SendPropertyChanging();
					this._TenantAppealGroudID = value;
					this.SendPropertyChanged("TenantAppealGroudID");
					this.OnTenantAppealGroudIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealID", DbType="Int NOT NULL")]
		public int AppealID
		{
			get
			{
				return this._AppealID;
			}
			set
			{
				if ((this._AppealID != value))
				{
					this.OnAppealIDChanging(value);
					this.SendPropertyChanging();
					this._AppealID = value;
					this.SendPropertyChanged("AppealID");
					this.OnAppealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealGroundID", DbType="Int NOT NULL")]
		public int AppealGroundID
		{
			get
			{
				return this._AppealGroundID;
			}
			set
			{
				if ((this._AppealGroundID != value))
				{
					if (this._AppealGround.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppealGroundIDChanging(value);
					this.SendPropertyChanging();
					this._AppealGroundID = value;
					this.SendPropertyChanged("AppealGroundID");
					this.OnAppealGroundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppealGround_TenantAppealGroundInfo", Storage="_AppealGround", ThisKey="AppealGroundID", OtherKey="AppealGroundID", IsForeignKey=true)]
		public AppealGround AppealGround
		{
			get
			{
				return this._AppealGround.Entity;
			}
			set
			{
				AppealGround previousValue = this._AppealGround.Entity;
				if (((previousValue != value) 
							|| (this._AppealGround.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppealGround.Entity = null;
						previousValue.TenantAppealGroundInfos.Remove(this);
					}
					this._AppealGround.Entity = value;
					if ((value != null))
					{
						value.TenantAppealGroundInfos.Add(this);
						this._AppealGroundID = value.AppealGroundID;
					}
					else
					{
						this._AppealGroundID = default(int);
					}
					this.SendPropertyChanged("AppealGround");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppealOpposingParty")]
	public partial class AppealOpposingParty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppealOpposingPartyID;
		
		private int _AppealID;
		
		private int _OpposingPartyID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppealOpposingPartyIDChanging(int value);
    partial void OnAppealOpposingPartyIDChanged();
    partial void OnAppealIDChanging(int value);
    partial void OnAppealIDChanged();
    partial void OnOpposingPartyIDChanging(int value);
    partial void OnOpposingPartyIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public AppealOpposingParty()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealOpposingPartyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppealOpposingPartyID
		{
			get
			{
				return this._AppealOpposingPartyID;
			}
			set
			{
				if ((this._AppealOpposingPartyID != value))
				{
					this.OnAppealOpposingPartyIDChanging(value);
					this.SendPropertyChanging();
					this._AppealOpposingPartyID = value;
					this.SendPropertyChanged("AppealOpposingPartyID");
					this.OnAppealOpposingPartyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealID", DbType="Int NOT NULL")]
		public int AppealID
		{
			get
			{
				return this._AppealID;
			}
			set
			{
				if ((this._AppealID != value))
				{
					this.OnAppealIDChanging(value);
					this.SendPropertyChanging();
					this._AppealID = value;
					this.SendPropertyChanged("AppealID");
					this.OnAppealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpposingPartyID", DbType="Int NOT NULL")]
		public int OpposingPartyID
		{
			get
			{
				return this._OpposingPartyID;
			}
			set
			{
				if ((this._OpposingPartyID != value))
				{
					this.OnOpposingPartyIDChanging(value);
					this.SendPropertyChanging();
					this._OpposingPartyID = value;
					this.SendPropertyChanged("OpposingPartyID");
					this.OnOpposingPartyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantPetitionInfo")]
	public partial class TenantPetitionInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantPetitionID;
		
		private System.Nullable<int> _ThirdPartyUserID;
		
		private System.Nullable<bool> _bThirdPartyRepresentation;
		
		private System.Nullable<int> _OwnerUserID;
		
		private System.Nullable<int> _PropertyManagerUserID;
		
		private System.Nullable<int> _NumberOfUnits;
		
		private int _UnitTypeID;
		
		private int _RentStatusID;
		
		private string _ProvideExplanation;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _PetitionFiledBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<TenantProblemInfo> _TenantProblemInfos;
		
		private EntitySet<TenantLostServiceInfo> _TenantLostServiceInfos;
		
		private EntitySet<TenantPetitionGroundInfo> _TenantPetitionGroundInfos;
		
		private EntitySet<TenantRentalIncrementInfo> _TenantRentalIncrementInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantPetitionIDChanging(int value);
    partial void OnTenantPetitionIDChanged();
    partial void OnThirdPartyUserIDChanging(System.Nullable<int> value);
    partial void OnThirdPartyUserIDChanged();
    partial void OnbThirdPartyRepresentationChanging(System.Nullable<bool> value);
    partial void OnbThirdPartyRepresentationChanged();
    partial void OnOwnerUserIDChanging(System.Nullable<int> value);
    partial void OnOwnerUserIDChanged();
    partial void OnPropertyManagerUserIDChanging(System.Nullable<int> value);
    partial void OnPropertyManagerUserIDChanged();
    partial void OnNumberOfUnitsChanging(System.Nullable<int> value);
    partial void OnNumberOfUnitsChanged();
    partial void OnUnitTypeIDChanging(int value);
    partial void OnUnitTypeIDChanged();
    partial void OnRentStatusIDChanging(int value);
    partial void OnRentStatusIDChanged();
    partial void OnProvideExplanationChanging(string value);
    partial void OnProvideExplanationChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnPetitionFiledByChanging(System.Nullable<int> value);
    partial void OnPetitionFiledByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public TenantPetitionInfo()
		{
			this._TenantProblemInfos = new EntitySet<TenantProblemInfo>(new Action<TenantProblemInfo>(this.attach_TenantProblemInfos), new Action<TenantProblemInfo>(this.detach_TenantProblemInfos));
			this._TenantLostServiceInfos = new EntitySet<TenantLostServiceInfo>(new Action<TenantLostServiceInfo>(this.attach_TenantLostServiceInfos), new Action<TenantLostServiceInfo>(this.detach_TenantLostServiceInfos));
			this._TenantPetitionGroundInfos = new EntitySet<TenantPetitionGroundInfo>(new Action<TenantPetitionGroundInfo>(this.attach_TenantPetitionGroundInfos), new Action<TenantPetitionGroundInfo>(this.detach_TenantPetitionGroundInfos));
			this._TenantRentalIncrementInfos = new EntitySet<TenantRentalIncrementInfo>(new Action<TenantRentalIncrementInfo>(this.attach_TenantRentalIncrementInfos), new Action<TenantRentalIncrementInfo>(this.detach_TenantRentalIncrementInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdPartyUserID", DbType="Int")]
		public System.Nullable<int> ThirdPartyUserID
		{
			get
			{
				return this._ThirdPartyUserID;
			}
			set
			{
				if ((this._ThirdPartyUserID != value))
				{
					this.OnThirdPartyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdPartyUserID = value;
					this.SendPropertyChanged("ThirdPartyUserID");
					this.OnThirdPartyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyRepresentation", DbType="Bit")]
		public System.Nullable<bool> bThirdPartyRepresentation
		{
			get
			{
				return this._bThirdPartyRepresentation;
			}
			set
			{
				if ((this._bThirdPartyRepresentation != value))
				{
					this.OnbThirdPartyRepresentationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyRepresentation = value;
					this.SendPropertyChanged("bThirdPartyRepresentation");
					this.OnbThirdPartyRepresentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserID", DbType="Int")]
		public System.Nullable<int> OwnerUserID
		{
			get
			{
				return this._OwnerUserID;
			}
			set
			{
				if ((this._OwnerUserID != value))
				{
					this.OnOwnerUserIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserID = value;
					this.SendPropertyChanged("OwnerUserID");
					this.OnOwnerUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyManagerUserID", DbType="Int")]
		public System.Nullable<int> PropertyManagerUserID
		{
			get
			{
				return this._PropertyManagerUserID;
			}
			set
			{
				if ((this._PropertyManagerUserID != value))
				{
					this.OnPropertyManagerUserIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyManagerUserID = value;
					this.SendPropertyChanged("PropertyManagerUserID");
					this.OnPropertyManagerUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfUnits", DbType="Int")]
		public System.Nullable<int> NumberOfUnits
		{
			get
			{
				return this._NumberOfUnits;
			}
			set
			{
				if ((this._NumberOfUnits != value))
				{
					this.OnNumberOfUnitsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfUnits = value;
					this.SendPropertyChanged("NumberOfUnits");
					this.OnNumberOfUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitTypeID", DbType="Int NOT NULL")]
		public int UnitTypeID
		{
			get
			{
				return this._UnitTypeID;
			}
			set
			{
				if ((this._UnitTypeID != value))
				{
					this.OnUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UnitTypeID = value;
					this.SendPropertyChanged("UnitTypeID");
					this.OnUnitTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentStatusID", DbType="Int NOT NULL")]
		public int RentStatusID
		{
			get
			{
				return this._RentStatusID;
			}
			set
			{
				if ((this._RentStatusID != value))
				{
					this.OnRentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._RentStatusID = value;
					this.SendPropertyChanged("RentStatusID");
					this.OnRentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvideExplanation", DbType="VarChar(MAX)")]
		public string ProvideExplanation
		{
			get
			{
				return this._ProvideExplanation;
			}
			set
			{
				if ((this._ProvideExplanation != value))
				{
					this.OnProvideExplanationChanging(value);
					this.SendPropertyChanging();
					this._ProvideExplanation = value;
					this.SendPropertyChanged("ProvideExplanation");
					this.OnProvideExplanationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionFiledBy", DbType="Int")]
		public System.Nullable<int> PetitionFiledBy
		{
			get
			{
				return this._PetitionFiledBy;
			}
			set
			{
				if ((this._PetitionFiledBy != value))
				{
					this.OnPetitionFiledByChanging(value);
					this.SendPropertyChanging();
					this._PetitionFiledBy = value;
					this.SendPropertyChanged("PetitionFiledBy");
					this.OnPetitionFiledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantProblemInfo", Storage="_TenantProblemInfos", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID")]
		public EntitySet<TenantProblemInfo> TenantProblemInfos
		{
			get
			{
				return this._TenantProblemInfos;
			}
			set
			{
				this._TenantProblemInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantLostServiceInfo", Storage="_TenantLostServiceInfos", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID")]
		public EntitySet<TenantLostServiceInfo> TenantLostServiceInfos
		{
			get
			{
				return this._TenantLostServiceInfos;
			}
			set
			{
				this._TenantLostServiceInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantPetitionGroundInfo", Storage="_TenantPetitionGroundInfos", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID")]
		public EntitySet<TenantPetitionGroundInfo> TenantPetitionGroundInfos
		{
			get
			{
				return this._TenantPetitionGroundInfos;
			}
			set
			{
				this._TenantPetitionGroundInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantPetitionInfo_TenantRentalIncrementInfo", Storage="_TenantRentalIncrementInfos", ThisKey="TenantPetitionID", OtherKey="TenantPetitionID")]
		public EntitySet<TenantRentalIncrementInfo> TenantRentalIncrementInfos
		{
			get
			{
				return this._TenantRentalIncrementInfos;
			}
			set
			{
				this._TenantRentalIncrementInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TenantProblemInfos(TenantProblemInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = this;
		}
		
		private void detach_TenantProblemInfos(TenantProblemInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = null;
		}
		
		private void attach_TenantLostServiceInfos(TenantLostServiceInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = this;
		}
		
		private void detach_TenantLostServiceInfos(TenantLostServiceInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = null;
		}
		
		private void attach_TenantPetitionGroundInfos(TenantPetitionGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = this;
		}
		
		private void detach_TenantPetitionGroundInfos(TenantPetitionGroundInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = null;
		}
		
		private void attach_TenantRentalIncrementInfos(TenantRentalIncrementInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = this;
		}
		
		private void detach_TenantRentalIncrementInfos(TenantRentalIncrementInfo entity)
		{
			this.SendPropertyChanging();
			entity.TenantPetitionInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionInfo")]
	public partial class OwnerPetitionInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerPetitionID;
		
		private int _OwnerPetitionApplicantInfoID;
		
		private System.Nullable<int> _OwnerPropertyID;
		
		private System.Nullable<bool> _bPetitionFiledByThirdParty;
		
		private System.Nullable<bool> _bAgreeToCityMediation;
		
		private int _PetitionFiledBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _LastModifiedBy;
		
		private System.Nullable<System.DateTime> _LastModifiedDate;
		
		private EntityRef<OwnerPetitionPropertyInfo> _OwnerPetitionPropertyInfo;
		
		private EntityRef<OwnerPetitionApplicantInfo> _OwnerPetitionApplicantInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerPetitionIDChanging(int value);
    partial void OnOwnerPetitionIDChanged();
    partial void OnOwnerPetitionApplicantInfoIDChanging(int value);
    partial void OnOwnerPetitionApplicantInfoIDChanged();
    partial void OnOwnerPropertyIDChanging(System.Nullable<int> value);
    partial void OnOwnerPropertyIDChanged();
    partial void OnbPetitionFiledByThirdPartyChanging(System.Nullable<bool> value);
    partial void OnbPetitionFiledByThirdPartyChanged();
    partial void OnbAgreeToCityMediationChanging(System.Nullable<bool> value);
    partial void OnbAgreeToCityMediationChanged();
    partial void OnPetitionFiledByChanging(int value);
    partial void OnPetitionFiledByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    partial void OnLastModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDateChanged();
    #endregion
		
		public OwnerPetitionInfo()
		{
			this._OwnerPetitionPropertyInfo = default(EntityRef<OwnerPetitionPropertyInfo>);
			this._OwnerPetitionApplicantInfo = default(EntityRef<OwnerPetitionApplicantInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPetitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerPetitionID
		{
			get
			{
				return this._OwnerPetitionID;
			}
			set
			{
				if ((this._OwnerPetitionID != value))
				{
					this.OnOwnerPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPetitionID = value;
					this.SendPropertyChanged("OwnerPetitionID");
					this.OnOwnerPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPetitionApplicantInfoID", DbType="Int NOT NULL")]
		public int OwnerPetitionApplicantInfoID
		{
			get
			{
				return this._OwnerPetitionApplicantInfoID;
			}
			set
			{
				if ((this._OwnerPetitionApplicantInfoID != value))
				{
					if (this._OwnerPetitionApplicantInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPetitionApplicantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPetitionApplicantInfoID = value;
					this.SendPropertyChanged("OwnerPetitionApplicantInfoID");
					this.OnOwnerPetitionApplicantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPropertyID", DbType="Int")]
		public System.Nullable<int> OwnerPropertyID
		{
			get
			{
				return this._OwnerPropertyID;
			}
			set
			{
				if ((this._OwnerPropertyID != value))
				{
					if (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPropertyID = value;
					this.SendPropertyChanged("OwnerPropertyID");
					this.OnOwnerPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPetitionFiledByThirdParty", DbType="Bit")]
		public System.Nullable<bool> bPetitionFiledByThirdParty
		{
			get
			{
				return this._bPetitionFiledByThirdParty;
			}
			set
			{
				if ((this._bPetitionFiledByThirdParty != value))
				{
					this.OnbPetitionFiledByThirdPartyChanging(value);
					this.SendPropertyChanging();
					this._bPetitionFiledByThirdParty = value;
					this.SendPropertyChanged("bPetitionFiledByThirdParty");
					this.OnbPetitionFiledByThirdPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bAgreeToCityMediation", DbType="Bit")]
		public System.Nullable<bool> bAgreeToCityMediation
		{
			get
			{
				return this._bAgreeToCityMediation;
			}
			set
			{
				if ((this._bAgreeToCityMediation != value))
				{
					this.OnbAgreeToCityMediationChanging(value);
					this.SendPropertyChanging();
					this._bAgreeToCityMediation = value;
					this.SendPropertyChanged("bAgreeToCityMediation");
					this.OnbAgreeToCityMediationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionFiledBy", DbType="Int NOT NULL")]
		public int PetitionFiledBy
		{
			get
			{
				return this._PetitionFiledBy;
			}
			set
			{
				if ((this._PetitionFiledBy != value))
				{
					this.OnPetitionFiledByChanging(value);
					this.SendPropertyChanging();
					this._PetitionFiledBy = value;
					this.SendPropertyChanged("PetitionFiledBy");
					this.OnPetitionFiledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(25)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionInfo", Storage="_OwnerPetitionPropertyInfo", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID", IsForeignKey=true)]
		public OwnerPetitionPropertyInfo OwnerPetitionPropertyInfo
		{
			get
			{
				return this._OwnerPetitionPropertyInfo.Entity;
			}
			set
			{
				OwnerPetitionPropertyInfo previousValue = this._OwnerPetitionPropertyInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionPropertyInfo.Entity = null;
						previousValue.OwnerPetitionInfos.Remove(this);
					}
					this._OwnerPetitionPropertyInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionInfos.Add(this);
						this._OwnerPropertyID = value.OwnerPropertyID;
					}
					else
					{
						this._OwnerPropertyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OwnerPetitionPropertyInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionApplicantInfo_OwnerPetitionInfo", Storage="_OwnerPetitionApplicantInfo", ThisKey="OwnerPetitionApplicantInfoID", OtherKey="OwnerPetitionApplicantInfoID", IsForeignKey=true)]
		public OwnerPetitionApplicantInfo OwnerPetitionApplicantInfo
		{
			get
			{
				return this._OwnerPetitionApplicantInfo.Entity;
			}
			set
			{
				OwnerPetitionApplicantInfo previousValue = this._OwnerPetitionApplicantInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionApplicantInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionApplicantInfo.Entity = null;
						previousValue.OwnerPetitionInfos.Remove(this);
					}
					this._OwnerPetitionApplicantInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionInfos.Add(this);
						this._OwnerPetitionApplicantInfoID = value.OwnerPetitionApplicantInfoID;
					}
					else
					{
						this._OwnerPetitionApplicantInfoID = default(int);
					}
					this.SendPropertyChanged("OwnerPetitionApplicantInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionRentalIncrementInfo")]
	public partial class OwnerPetitionRentalIncrementInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentalIncreaseInfoID;
		
		private int _OwnerPropertyID;
		
		private System.Nullable<bool> _bRentIncreaseNoticeGiven;
		
		private System.Nullable<System.DateTime> _RentIncreaseNoticeDate;
		
		private System.Nullable<System.DateTime> _RentIncreaseEffectiveDate;
		
		private System.Nullable<decimal> _RentIncreasedFrom;
		
		private System.Nullable<decimal> _RentIncreasedTo;
		
		private EntityRef<OwnerPetitionPropertyInfo> _OwnerPetitionPropertyInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentalIncreaseInfoIDChanging(int value);
    partial void OnRentalIncreaseInfoIDChanged();
    partial void OnOwnerPropertyIDChanging(int value);
    partial void OnOwnerPropertyIDChanged();
    partial void OnbRentIncreaseNoticeGivenChanging(System.Nullable<bool> value);
    partial void OnbRentIncreaseNoticeGivenChanged();
    partial void OnRentIncreaseNoticeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseNoticeDateChanged();
    partial void OnRentIncreaseEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRentIncreaseEffectiveDateChanged();
    partial void OnRentIncreasedFromChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedFromChanged();
    partial void OnRentIncreasedToChanging(System.Nullable<decimal> value);
    partial void OnRentIncreasedToChanged();
    #endregion
		
		public OwnerPetitionRentalIncrementInfo()
		{
			this._OwnerPetitionPropertyInfo = default(EntityRef<OwnerPetitionPropertyInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalIncreaseInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentalIncreaseInfoID
		{
			get
			{
				return this._RentalIncreaseInfoID;
			}
			set
			{
				if ((this._RentalIncreaseInfoID != value))
				{
					this.OnRentalIncreaseInfoIDChanging(value);
					this.SendPropertyChanging();
					this._RentalIncreaseInfoID = value;
					this.SendPropertyChanged("RentalIncreaseInfoID");
					this.OnRentalIncreaseInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPropertyID", DbType="Int NOT NULL")]
		public int OwnerPropertyID
		{
			get
			{
				return this._OwnerPropertyID;
			}
			set
			{
				if ((this._OwnerPropertyID != value))
				{
					if (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPropertyID = value;
					this.SendPropertyChanged("OwnerPropertyID");
					this.OnOwnerPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentIncreaseNoticeGiven", DbType="Bit")]
		public System.Nullable<bool> bRentIncreaseNoticeGiven
		{
			get
			{
				return this._bRentIncreaseNoticeGiven;
			}
			set
			{
				if ((this._bRentIncreaseNoticeGiven != value))
				{
					this.OnbRentIncreaseNoticeGivenChanging(value);
					this.SendPropertyChanging();
					this._bRentIncreaseNoticeGiven = value;
					this.SendPropertyChanged("bRentIncreaseNoticeGiven");
					this.OnbRentIncreaseNoticeGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseNoticeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseNoticeDate
		{
			get
			{
				return this._RentIncreaseNoticeDate;
			}
			set
			{
				if ((this._RentIncreaseNoticeDate != value))
				{
					this.OnRentIncreaseNoticeDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseNoticeDate = value;
					this.SendPropertyChanged("RentIncreaseNoticeDate");
					this.OnRentIncreaseNoticeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseEffectiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RentIncreaseEffectiveDate
		{
			get
			{
				return this._RentIncreaseEffectiveDate;
			}
			set
			{
				if ((this._RentIncreaseEffectiveDate != value))
				{
					this.OnRentIncreaseEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseEffectiveDate = value;
					this.SendPropertyChanged("RentIncreaseEffectiveDate");
					this.OnRentIncreaseEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedFrom", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedFrom
		{
			get
			{
				return this._RentIncreasedFrom;
			}
			set
			{
				if ((this._RentIncreasedFrom != value))
				{
					this.OnRentIncreasedFromChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedFrom = value;
					this.SendPropertyChanged("RentIncreasedFrom");
					this.OnRentIncreasedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreasedTo", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> RentIncreasedTo
		{
			get
			{
				return this._RentIncreasedTo;
			}
			set
			{
				if ((this._RentIncreasedTo != value))
				{
					this.OnRentIncreasedToChanging(value);
					this.SendPropertyChanging();
					this._RentIncreasedTo = value;
					this.SendPropertyChanged("RentIncreasedTo");
					this.OnRentIncreasedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionRentalIncrementInfo", Storage="_OwnerPetitionPropertyInfo", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID", IsForeignKey=true)]
		public OwnerPetitionPropertyInfo OwnerPetitionPropertyInfo
		{
			get
			{
				return this._OwnerPetitionPropertyInfo.Entity;
			}
			set
			{
				OwnerPetitionPropertyInfo previousValue = this._OwnerPetitionPropertyInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionPropertyInfo.Entity = null;
						previousValue.OwnerPetitionRentalIncrementInfos.Remove(this);
					}
					this._OwnerPetitionPropertyInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionRentalIncrementInfos.Add(this);
						this._OwnerPropertyID = value.OwnerPropertyID;
					}
					else
					{
						this._OwnerPropertyID = default(int);
					}
					this.SendPropertyChanged("OwnerPetitionPropertyInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionTenantInfo")]
	public partial class OwnerPetitionTenantInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantInfoID;
		
		private int _OwnerPropertyID;
		
		private int _TenantUserID;
		
		private EntityRef<OwnerPetitionPropertyInfo> _OwnerPetitionPropertyInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantInfoIDChanging(int value);
    partial void OnTenantInfoIDChanged();
    partial void OnOwnerPropertyIDChanging(int value);
    partial void OnOwnerPropertyIDChanged();
    partial void OnTenantUserIDChanging(int value);
    partial void OnTenantUserIDChanged();
    #endregion
		
		public OwnerPetitionTenantInfo()
		{
			this._OwnerPetitionPropertyInfo = default(EntityRef<OwnerPetitionPropertyInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantInfoID
		{
			get
			{
				return this._TenantInfoID;
			}
			set
			{
				if ((this._TenantInfoID != value))
				{
					this.OnTenantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._TenantInfoID = value;
					this.SendPropertyChanged("TenantInfoID");
					this.OnTenantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPropertyID", DbType="Int NOT NULL")]
		public int OwnerPropertyID
		{
			get
			{
				return this._OwnerPropertyID;
			}
			set
			{
				if ((this._OwnerPropertyID != value))
				{
					if (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPropertyID = value;
					this.SendPropertyChanged("OwnerPropertyID");
					this.OnOwnerPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantUserID", DbType="Int NOT NULL")]
		public int TenantUserID
		{
			get
			{
				return this._TenantUserID;
			}
			set
			{
				if ((this._TenantUserID != value))
				{
					this.OnTenantUserIDChanging(value);
					this.SendPropertyChanging();
					this._TenantUserID = value;
					this.SendPropertyChanged("TenantUserID");
					this.OnTenantUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionTenantInfo", Storage="_OwnerPetitionPropertyInfo", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID", IsForeignKey=true)]
		public OwnerPetitionPropertyInfo OwnerPetitionPropertyInfo
		{
			get
			{
				return this._OwnerPetitionPropertyInfo.Entity;
			}
			set
			{
				OwnerPetitionPropertyInfo previousValue = this._OwnerPetitionPropertyInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionPropertyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionPropertyInfo.Entity = null;
						previousValue.OwnerPetitionTenantInfos.Remove(this);
					}
					this._OwnerPetitionPropertyInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionTenantInfos.Add(this);
						this._OwnerPropertyID = value.OwnerPropertyID;
					}
					else
					{
						this._OwnerPropertyID = default(int);
					}
					this.SendPropertyChanged("OwnerPetitionPropertyInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerRentIncreaseReasons")]
	public partial class OwnerRentIncreaseReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReasonID;
		
		private string _Reason;
		
		private EntitySet<OwnerRentIncreaseReasonInfo> _OwnerRentIncreaseReasonInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReasonIDChanging(int value);
    partial void OnReasonIDChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    #endregion
		
		public OwnerRentIncreaseReason()
		{
			this._OwnerRentIncreaseReasonInfos = new EntitySet<OwnerRentIncreaseReasonInfo>(new Action<OwnerRentIncreaseReasonInfo>(this.attach_OwnerRentIncreaseReasonInfos), new Action<OwnerRentIncreaseReasonInfo>(this.detach_OwnerRentIncreaseReasonInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReasonID
		{
			get
			{
				return this._ReasonID;
			}
			set
			{
				if ((this._ReasonID != value))
				{
					this.OnReasonIDChanging(value);
					this.SendPropertyChanging();
					this._ReasonID = value;
					this.SendPropertyChanged("ReasonID");
					this.OnReasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerRentIncreaseReason_OwnerRentIncreaseReasonInfo", Storage="_OwnerRentIncreaseReasonInfos", ThisKey="ReasonID", OtherKey="ReasonID")]
		public EntitySet<OwnerRentIncreaseReasonInfo> OwnerRentIncreaseReasonInfos
		{
			get
			{
				return this._OwnerRentIncreaseReasonInfos;
			}
			set
			{
				this._OwnerRentIncreaseReasonInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerRentIncreaseReasonInfos(OwnerRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerRentIncreaseReason = this;
		}
		
		private void detach_OwnerRentIncreaseReasonInfos(OwnerRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerRentIncreaseReason = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionPropertyInfo")]
	public partial class OwnerPetitionPropertyInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerPropertyID;
		
		private int _UnitTypeID;
		
		private System.Nullable<System.DateTime> _MovedInDate;
		
		private System.Nullable<decimal> _InitialRent;
		
		private System.Nullable<bool> _bRAPNoticeGiven;
		
		private System.Nullable<System.DateTime> _RAPNoticeGivenDate;
		
		private System.Nullable<int> _RentStatusID;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<bool> _bPetitionFiled;
		
		private EntitySet<OwnerPetitionInfo> _OwnerPetitionInfos;
		
		private EntitySet<OwnerPetitionRentalIncrementInfo> _OwnerPetitionRentalIncrementInfos;
		
		private EntitySet<OwnerPetitionTenantInfo> _OwnerPetitionTenantInfos;
		
		private EntityRef<CurrentOnRentStatus> _CurrentOnRentStatus;
		
		private EntityRef<UnitType> _UnitType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerPropertyIDChanging(int value);
    partial void OnOwnerPropertyIDChanged();
    partial void OnUnitTypeIDChanging(int value);
    partial void OnUnitTypeIDChanged();
    partial void OnMovedInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMovedInDateChanged();
    partial void OnInitialRentChanging(System.Nullable<decimal> value);
    partial void OnInitialRentChanged();
    partial void OnbRAPNoticeGivenChanging(System.Nullable<bool> value);
    partial void OnbRAPNoticeGivenChanged();
    partial void OnRAPNoticeGivenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRAPNoticeGivenDateChanged();
    partial void OnRentStatusIDChanging(System.Nullable<int> value);
    partial void OnRentStatusIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnbPetitionFiledChanging(System.Nullable<bool> value);
    partial void OnbPetitionFiledChanged();
    #endregion
		
		public OwnerPetitionPropertyInfo()
		{
			this._OwnerPetitionInfos = new EntitySet<OwnerPetitionInfo>(new Action<OwnerPetitionInfo>(this.attach_OwnerPetitionInfos), new Action<OwnerPetitionInfo>(this.detach_OwnerPetitionInfos));
			this._OwnerPetitionRentalIncrementInfos = new EntitySet<OwnerPetitionRentalIncrementInfo>(new Action<OwnerPetitionRentalIncrementInfo>(this.attach_OwnerPetitionRentalIncrementInfos), new Action<OwnerPetitionRentalIncrementInfo>(this.detach_OwnerPetitionRentalIncrementInfos));
			this._OwnerPetitionTenantInfos = new EntitySet<OwnerPetitionTenantInfo>(new Action<OwnerPetitionTenantInfo>(this.attach_OwnerPetitionTenantInfos), new Action<OwnerPetitionTenantInfo>(this.detach_OwnerPetitionTenantInfos));
			this._CurrentOnRentStatus = default(EntityRef<CurrentOnRentStatus>);
			this._UnitType = default(EntityRef<UnitType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPropertyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerPropertyID
		{
			get
			{
				return this._OwnerPropertyID;
			}
			set
			{
				if ((this._OwnerPropertyID != value))
				{
					this.OnOwnerPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPropertyID = value;
					this.SendPropertyChanged("OwnerPropertyID");
					this.OnOwnerPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitTypeID", DbType="Int NOT NULL")]
		public int UnitTypeID
		{
			get
			{
				return this._UnitTypeID;
			}
			set
			{
				if ((this._UnitTypeID != value))
				{
					if (this._UnitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UnitTypeID = value;
					this.SendPropertyChanged("UnitTypeID");
					this.OnUnitTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovedInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MovedInDate
		{
			get
			{
				return this._MovedInDate;
			}
			set
			{
				if ((this._MovedInDate != value))
				{
					this.OnMovedInDateChanging(value);
					this.SendPropertyChanging();
					this._MovedInDate = value;
					this.SendPropertyChanged("MovedInDate");
					this.OnMovedInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialRent", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> InitialRent
		{
			get
			{
				return this._InitialRent;
			}
			set
			{
				if ((this._InitialRent != value))
				{
					this.OnInitialRentChanging(value);
					this.SendPropertyChanging();
					this._InitialRent = value;
					this.SendPropertyChanged("InitialRent");
					this.OnInitialRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRAPNoticeGiven", DbType="Bit")]
		public System.Nullable<bool> bRAPNoticeGiven
		{
			get
			{
				return this._bRAPNoticeGiven;
			}
			set
			{
				if ((this._bRAPNoticeGiven != value))
				{
					this.OnbRAPNoticeGivenChanging(value);
					this.SendPropertyChanging();
					this._bRAPNoticeGiven = value;
					this.SendPropertyChanged("bRAPNoticeGiven");
					this.OnbRAPNoticeGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAPNoticeGivenDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RAPNoticeGivenDate
		{
			get
			{
				return this._RAPNoticeGivenDate;
			}
			set
			{
				if ((this._RAPNoticeGivenDate != value))
				{
					this.OnRAPNoticeGivenDateChanging(value);
					this.SendPropertyChanging();
					this._RAPNoticeGivenDate = value;
					this.SendPropertyChanged("RAPNoticeGivenDate");
					this.OnRAPNoticeGivenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentStatusID", DbType="Int")]
		public System.Nullable<int> RentStatusID
		{
			get
			{
				return this._RentStatusID;
			}
			set
			{
				if ((this._RentStatusID != value))
				{
					if (this._CurrentOnRentStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._RentStatusID = value;
					this.SendPropertyChanged("RentStatusID");
					this.OnRentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bPetitionFiled", DbType="Bit")]
		public System.Nullable<bool> bPetitionFiled
		{
			get
			{
				return this._bPetitionFiled;
			}
			set
			{
				if ((this._bPetitionFiled != value))
				{
					this.OnbPetitionFiledChanging(value);
					this.SendPropertyChanging();
					this._bPetitionFiled = value;
					this.SendPropertyChanged("bPetitionFiled");
					this.OnbPetitionFiledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionInfo", Storage="_OwnerPetitionInfos", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID")]
		public EntitySet<OwnerPetitionInfo> OwnerPetitionInfos
		{
			get
			{
				return this._OwnerPetitionInfos;
			}
			set
			{
				this._OwnerPetitionInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionRentalIncrementInfo", Storage="_OwnerPetitionRentalIncrementInfos", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID")]
		public EntitySet<OwnerPetitionRentalIncrementInfo> OwnerPetitionRentalIncrementInfos
		{
			get
			{
				return this._OwnerPetitionRentalIncrementInfos;
			}
			set
			{
				this._OwnerPetitionRentalIncrementInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionPropertyInfo_OwnerPetitionTenantInfo", Storage="_OwnerPetitionTenantInfos", ThisKey="OwnerPropertyID", OtherKey="OwnerPropertyID")]
		public EntitySet<OwnerPetitionTenantInfo> OwnerPetitionTenantInfos
		{
			get
			{
				return this._OwnerPetitionTenantInfos;
			}
			set
			{
				this._OwnerPetitionTenantInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentOnRentStatus_OwnerPetitionPropertyInfo", Storage="_CurrentOnRentStatus", ThisKey="RentStatusID", OtherKey="RentStatusID", IsForeignKey=true)]
		public CurrentOnRentStatus CurrentOnRentStatus
		{
			get
			{
				return this._CurrentOnRentStatus.Entity;
			}
			set
			{
				CurrentOnRentStatus previousValue = this._CurrentOnRentStatus.Entity;
				if (((previousValue != value) 
							|| (this._CurrentOnRentStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentOnRentStatus.Entity = null;
						previousValue.OwnerPetitionPropertyInfos.Remove(this);
					}
					this._CurrentOnRentStatus.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionPropertyInfos.Add(this);
						this._RentStatusID = value.RentStatusID;
					}
					else
					{
						this._RentStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CurrentOnRentStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitType_OwnerPetitionPropertyInfo", Storage="_UnitType", ThisKey="UnitTypeID", OtherKey="UnitTypeID", IsForeignKey=true)]
		public UnitType UnitType
		{
			get
			{
				return this._UnitType.Entity;
			}
			set
			{
				UnitType previousValue = this._UnitType.Entity;
				if (((previousValue != value) 
							|| (this._UnitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitType.Entity = null;
						previousValue.OwnerPetitionPropertyInfos.Remove(this);
					}
					this._UnitType.Entity = value;
					if ((value != null))
					{
						value.OwnerPetitionPropertyInfos.Add(this);
						this._UnitTypeID = value.UnitTypeID;
					}
					else
					{
						this._UnitTypeID = default(int);
					}
					this.SendPropertyChanged("UnitType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerPetitionInfos(OwnerPetitionInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = this;
		}
		
		private void detach_OwnerPetitionInfos(OwnerPetitionInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = null;
		}
		
		private void attach_OwnerPetitionRentalIncrementInfos(OwnerPetitionRentalIncrementInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = this;
		}
		
		private void detach_OwnerPetitionRentalIncrementInfos(OwnerPetitionRentalIncrementInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = null;
		}
		
		private void attach_OwnerPetitionTenantInfos(OwnerPetitionTenantInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = this;
		}
		
		private void detach_OwnerPetitionTenantInfos(OwnerPetitionTenantInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionPropertyInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PetitionDetails")]
	public partial class PetitionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PetitionID;
		
		private System.Nullable<int> _TenantPetitionID;
		
		private System.Nullable<int> _OwnerPetitionID;
		
		private EntitySet<CaseDetail> _CaseDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPetitionIDChanging(int value);
    partial void OnPetitionIDChanged();
    partial void OnTenantPetitionIDChanging(System.Nullable<int> value);
    partial void OnTenantPetitionIDChanged();
    partial void OnOwnerPetitionIDChanging(System.Nullable<int> value);
    partial void OnOwnerPetitionIDChanged();
    #endregion
		
		public PetitionDetail()
		{
			this._CaseDetails = new EntitySet<CaseDetail>(new Action<CaseDetail>(this.attach_CaseDetails), new Action<CaseDetail>(this.detach_CaseDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PetitionID
		{
			get
			{
				return this._PetitionID;
			}
			set
			{
				if ((this._PetitionID != value))
				{
					this.OnPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionID = value;
					this.SendPropertyChanged("PetitionID");
					this.OnPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantPetitionID", DbType="Int")]
		public System.Nullable<int> TenantPetitionID
		{
			get
			{
				return this._TenantPetitionID;
			}
			set
			{
				if ((this._TenantPetitionID != value))
				{
					this.OnTenantPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._TenantPetitionID = value;
					this.SendPropertyChanged("TenantPetitionID");
					this.OnTenantPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPetitionID", DbType="Int")]
		public System.Nullable<int> OwnerPetitionID
		{
			get
			{
				return this._OwnerPetitionID;
			}
			set
			{
				if ((this._OwnerPetitionID != value))
				{
					this.OnOwnerPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPetitionID = value;
					this.SendPropertyChanged("OwnerPetitionID");
					this.OnOwnerPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionDetail_CaseDetail", Storage="_CaseDetails", ThisKey="PetitionID", OtherKey="PetitionID")]
		public EntitySet<CaseDetail> CaseDetails
		{
			get
			{
				return this._CaseDetails;
			}
			set
			{
				this._CaseDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.PetitionDetail = this;
		}
		
		private void detach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.PetitionDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CaseDetails")]
	public partial class CaseDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _C_ID;
		
		private string _CaseID;
		
		private int _PetitionID;
		
		private System.Nullable<int> _TenantAppealID;
		
		private System.Nullable<int> _PetitionCategoryID;
		
		private System.Nullable<int> _CaseFiledBy;
		
		private System.Nullable<bool> _bCaseFiledByThirdParty;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _LastModifiedBy;
		
		private System.Nullable<System.DateTime> _LastModifiedDate;
		
		private System.Nullable<System.DateTime> _HearingDate;
		
		private System.Nullable<System.DateTime> _AppealDate;
		
		private string _HearingOfficer;
		
		private string _CityAnalyst;
		
		private EntityRef<TenantAppealDetail> _TenantAppealDetail;
		
		private EntityRef<PetitionDetail> _PetitionDetail;
		
		private EntityRef<PetitionCategory> _PetitionCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC_IDChanging(int value);
    partial void OnC_IDChanged();
    partial void OnCaseIDChanging(string value);
    partial void OnCaseIDChanged();
    partial void OnPetitionIDChanging(int value);
    partial void OnPetitionIDChanged();
    partial void OnTenantAppealIDChanging(System.Nullable<int> value);
    partial void OnTenantAppealIDChanged();
    partial void OnPetitionCategoryIDChanging(System.Nullable<int> value);
    partial void OnPetitionCategoryIDChanged();
    partial void OnCaseFiledByChanging(System.Nullable<int> value);
    partial void OnCaseFiledByChanged();
    partial void OnbCaseFiledByThirdPartyChanging(System.Nullable<bool> value);
    partial void OnbCaseFiledByThirdPartyChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    partial void OnLastModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDateChanged();
    partial void OnHearingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHearingDateChanged();
    partial void OnAppealDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAppealDateChanged();
    partial void OnHearingOfficerChanging(string value);
    partial void OnHearingOfficerChanged();
    partial void OnCityAnalystChanging(string value);
    partial void OnCityAnalystChanged();
    #endregion
		
		public CaseDetail()
		{
			this._TenantAppealDetail = default(EntityRef<TenantAppealDetail>);
			this._PetitionDetail = default(EntityRef<PetitionDetail>);
			this._PetitionCategory = default(EntityRef<PetitionCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int C_ID
		{
			get
			{
				return this._C_ID;
			}
			set
			{
				if ((this._C_ID != value))
				{
					this.OnC_IDChanging(value);
					this.SendPropertyChanging();
					this._C_ID = value;
					this.SendPropertyChanged("C_ID");
					this.OnC_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseID", AutoSync=AutoSync.Always, DbType="VarChar(8)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string CaseID
		{
			get
			{
				return this._CaseID;
			}
			set
			{
				if ((this._CaseID != value))
				{
					this.OnCaseIDChanging(value);
					this.SendPropertyChanging();
					this._CaseID = value;
					this.SendPropertyChanged("CaseID");
					this.OnCaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionID", DbType="Int NOT NULL")]
		public int PetitionID
		{
			get
			{
				return this._PetitionID;
			}
			set
			{
				if ((this._PetitionID != value))
				{
					if (this._PetitionDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetitionIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionID = value;
					this.SendPropertyChanged("PetitionID");
					this.OnPetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantAppealID", DbType="Int")]
		public System.Nullable<int> TenantAppealID
		{
			get
			{
				return this._TenantAppealID;
			}
			set
			{
				if ((this._TenantAppealID != value))
				{
					if (this._TenantAppealDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantAppealIDChanging(value);
					this.SendPropertyChanging();
					this._TenantAppealID = value;
					this.SendPropertyChanged("TenantAppealID");
					this.OnTenantAppealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionCategoryID", DbType="Int")]
		public System.Nullable<int> PetitionCategoryID
		{
			get
			{
				return this._PetitionCategoryID;
			}
			set
			{
				if ((this._PetitionCategoryID != value))
				{
					if (this._PetitionCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetitionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionCategoryID = value;
					this.SendPropertyChanged("PetitionCategoryID");
					this.OnPetitionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseFiledBy", DbType="Int")]
		public System.Nullable<int> CaseFiledBy
		{
			get
			{
				return this._CaseFiledBy;
			}
			set
			{
				if ((this._CaseFiledBy != value))
				{
					this.OnCaseFiledByChanging(value);
					this.SendPropertyChanging();
					this._CaseFiledBy = value;
					this.SendPropertyChanged("CaseFiledBy");
					this.OnCaseFiledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bCaseFiledByThirdParty", DbType="Bit")]
		public System.Nullable<bool> bCaseFiledByThirdParty
		{
			get
			{
				return this._bCaseFiledByThirdParty;
			}
			set
			{
				if ((this._bCaseFiledByThirdParty != value))
				{
					this.OnbCaseFiledByThirdPartyChanging(value);
					this.SendPropertyChanging();
					this._bCaseFiledByThirdParty = value;
					this.SendPropertyChanged("bCaseFiledByThirdParty");
					this.OnbCaseFiledByThirdPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(25)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> HearingDate
		{
			get
			{
				return this._HearingDate;
			}
			set
			{
				if ((this._HearingDate != value))
				{
					this.OnHearingDateChanging(value);
					this.SendPropertyChanging();
					this._HearingDate = value;
					this.SendPropertyChanged("HearingDate");
					this.OnHearingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppealDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AppealDate
		{
			get
			{
				return this._AppealDate;
			}
			set
			{
				if ((this._AppealDate != value))
				{
					this.OnAppealDateChanging(value);
					this.SendPropertyChanging();
					this._AppealDate = value;
					this.SendPropertyChanged("AppealDate");
					this.OnAppealDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearingOfficer", DbType="VarChar(25)")]
		public string HearingOfficer
		{
			get
			{
				return this._HearingOfficer;
			}
			set
			{
				if ((this._HearingOfficer != value))
				{
					this.OnHearingOfficerChanging(value);
					this.SendPropertyChanging();
					this._HearingOfficer = value;
					this.SendPropertyChanged("HearingOfficer");
					this.OnHearingOfficerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityAnalyst", DbType="VarChar(25)")]
		public string CityAnalyst
		{
			get
			{
				return this._CityAnalyst;
			}
			set
			{
				if ((this._CityAnalyst != value))
				{
					this.OnCityAnalystChanging(value);
					this.SendPropertyChanging();
					this._CityAnalyst = value;
					this.SendPropertyChanged("CityAnalyst");
					this.OnCityAnalystChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TenantAppealDetail_CaseDetail", Storage="_TenantAppealDetail", ThisKey="TenantAppealID", OtherKey="TenantAppealID", IsForeignKey=true)]
		public TenantAppealDetail TenantAppealDetail
		{
			get
			{
				return this._TenantAppealDetail.Entity;
			}
			set
			{
				TenantAppealDetail previousValue = this._TenantAppealDetail.Entity;
				if (((previousValue != value) 
							|| (this._TenantAppealDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TenantAppealDetail.Entity = null;
						previousValue.CaseDetails.Remove(this);
					}
					this._TenantAppealDetail.Entity = value;
					if ((value != null))
					{
						value.CaseDetails.Add(this);
						this._TenantAppealID = value.TenantAppealID;
					}
					else
					{
						this._TenantAppealID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TenantAppealDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionDetail_CaseDetail", Storage="_PetitionDetail", ThisKey="PetitionID", OtherKey="PetitionID", IsForeignKey=true)]
		public PetitionDetail PetitionDetail
		{
			get
			{
				return this._PetitionDetail.Entity;
			}
			set
			{
				PetitionDetail previousValue = this._PetitionDetail.Entity;
				if (((previousValue != value) 
							|| (this._PetitionDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PetitionDetail.Entity = null;
						previousValue.CaseDetails.Remove(this);
					}
					this._PetitionDetail.Entity = value;
					if ((value != null))
					{
						value.CaseDetails.Add(this);
						this._PetitionID = value.PetitionID;
					}
					else
					{
						this._PetitionID = default(int);
					}
					this.SendPropertyChanged("PetitionDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionCategory_CaseDetail", Storage="_PetitionCategory", ThisKey="PetitionCategoryID", OtherKey="PetitionCategoryID", IsForeignKey=true)]
		public PetitionCategory PetitionCategory
		{
			get
			{
				return this._PetitionCategory.Entity;
			}
			set
			{
				PetitionCategory previousValue = this._PetitionCategory.Entity;
				if (((previousValue != value) 
							|| (this._PetitionCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PetitionCategory.Entity = null;
						previousValue.CaseDetails.Remove(this);
					}
					this._PetitionCategory.Entity = value;
					if ((value != null))
					{
						value.CaseDetails.Add(this);
						this._PetitionCategoryID = value.PetitionCategoryID;
					}
					else
					{
						this._PetitionCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PetitionCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PetitionCategory")]
	public partial class PetitionCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PetitionCategoryID;
		
		private string _PetitionCategory1;
		
		private EntitySet<CaseDetail> _CaseDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPetitionCategoryIDChanging(int value);
    partial void OnPetitionCategoryIDChanged();
    partial void OnPetitionCategory1Changing(string value);
    partial void OnPetitionCategory1Changed();
    #endregion
		
		public PetitionCategory()
		{
			this._CaseDetails = new EntitySet<CaseDetail>(new Action<CaseDetail>(this.attach_CaseDetails), new Action<CaseDetail>(this.detach_CaseDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetitionCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PetitionCategoryID
		{
			get
			{
				return this._PetitionCategoryID;
			}
			set
			{
				if ((this._PetitionCategoryID != value))
				{
					this.OnPetitionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PetitionCategoryID = value;
					this.SendPropertyChanged("PetitionCategoryID");
					this.OnPetitionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PetitionCategory", Storage="_PetitionCategory1", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PetitionCategory1
		{
			get
			{
				return this._PetitionCategory1;
			}
			set
			{
				if ((this._PetitionCategory1 != value))
				{
					this.OnPetitionCategory1Changing(value);
					this.SendPropertyChanging();
					this._PetitionCategory1 = value;
					this.SendPropertyChanged("PetitionCategory1");
					this.OnPetitionCategory1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PetitionCategory_CaseDetail", Storage="_CaseDetails", ThisKey="PetitionCategoryID", OtherKey="PetitionCategoryID")]
		public EntitySet<CaseDetail> CaseDetails
		{
			get
			{
				return this._CaseDetails;
			}
			set
			{
				this._CaseDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.PetitionCategory = this;
		}
		
		private void detach_CaseDetails(CaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.PetitionCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerPetitionApplicantInfo")]
	public partial class OwnerPetitionApplicantInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerPetitionApplicantInfoID;
		
		private int _ApplicantUserID;
		
		private System.Nullable<bool> _bThirdPartyRepresentation;
		
		private int _ThirdPartyUserID;
		
		private System.Nullable<bool> _bBusinessLicensePaid;
		
		private string _BusinessLicenseNumber;
		
		private System.Nullable<bool> _bRentAdjustmentProgramFeePaid;
		
		private System.Nullable<System.DateTime> _BuildingAcquiredDate;
		
		private System.Nullable<int> _NumberOfUnits;
		
		private System.Nullable<bool> _bMoreThanOneStreetOnParcel;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private EntitySet<OwnerPetitionInfo> _OwnerPetitionInfos;
		
		private EntitySet<OwnerRentIncreaseReasonInfo> _OwnerRentIncreaseReasonInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerPetitionApplicantInfoIDChanging(int value);
    partial void OnOwnerPetitionApplicantInfoIDChanged();
    partial void OnApplicantUserIDChanging(int value);
    partial void OnApplicantUserIDChanged();
    partial void OnbThirdPartyRepresentationChanging(System.Nullable<bool> value);
    partial void OnbThirdPartyRepresentationChanged();
    partial void OnThirdPartyUserIDChanging(int value);
    partial void OnThirdPartyUserIDChanged();
    partial void OnbBusinessLicensePaidChanging(System.Nullable<bool> value);
    partial void OnbBusinessLicensePaidChanged();
    partial void OnBusinessLicenseNumberChanging(string value);
    partial void OnBusinessLicenseNumberChanged();
    partial void OnbRentAdjustmentProgramFeePaidChanging(System.Nullable<bool> value);
    partial void OnbRentAdjustmentProgramFeePaidChanged();
    partial void OnBuildingAcquiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBuildingAcquiredDateChanged();
    partial void OnNumberOfUnitsChanging(System.Nullable<int> value);
    partial void OnNumberOfUnitsChanged();
    partial void OnbMoreThanOneStreetOnParcelChanging(System.Nullable<bool> value);
    partial void OnbMoreThanOneStreetOnParcelChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public OwnerPetitionApplicantInfo()
		{
			this._OwnerPetitionInfos = new EntitySet<OwnerPetitionInfo>(new Action<OwnerPetitionInfo>(this.attach_OwnerPetitionInfos), new Action<OwnerPetitionInfo>(this.detach_OwnerPetitionInfos));
			this._OwnerRentIncreaseReasonInfos = new EntitySet<OwnerRentIncreaseReasonInfo>(new Action<OwnerRentIncreaseReasonInfo>(this.attach_OwnerRentIncreaseReasonInfos), new Action<OwnerRentIncreaseReasonInfo>(this.detach_OwnerRentIncreaseReasonInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPetitionApplicantInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerPetitionApplicantInfoID
		{
			get
			{
				return this._OwnerPetitionApplicantInfoID;
			}
			set
			{
				if ((this._OwnerPetitionApplicantInfoID != value))
				{
					this.OnOwnerPetitionApplicantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPetitionApplicantInfoID = value;
					this.SendPropertyChanged("OwnerPetitionApplicantInfoID");
					this.OnOwnerPetitionApplicantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantUserID", DbType="Int NOT NULL")]
		public int ApplicantUserID
		{
			get
			{
				return this._ApplicantUserID;
			}
			set
			{
				if ((this._ApplicantUserID != value))
				{
					this.OnApplicantUserIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantUserID = value;
					this.SendPropertyChanged("ApplicantUserID");
					this.OnApplicantUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bThirdPartyRepresentation", DbType="Bit")]
		public System.Nullable<bool> bThirdPartyRepresentation
		{
			get
			{
				return this._bThirdPartyRepresentation;
			}
			set
			{
				if ((this._bThirdPartyRepresentation != value))
				{
					this.OnbThirdPartyRepresentationChanging(value);
					this.SendPropertyChanging();
					this._bThirdPartyRepresentation = value;
					this.SendPropertyChanged("bThirdPartyRepresentation");
					this.OnbThirdPartyRepresentationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdPartyUserID", DbType="Int NOT NULL")]
		public int ThirdPartyUserID
		{
			get
			{
				return this._ThirdPartyUserID;
			}
			set
			{
				if ((this._ThirdPartyUserID != value))
				{
					this.OnThirdPartyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdPartyUserID = value;
					this.SendPropertyChanged("ThirdPartyUserID");
					this.OnThirdPartyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bBusinessLicensePaid", DbType="Bit")]
		public System.Nullable<bool> bBusinessLicensePaid
		{
			get
			{
				return this._bBusinessLicensePaid;
			}
			set
			{
				if ((this._bBusinessLicensePaid != value))
				{
					this.OnbBusinessLicensePaidChanging(value);
					this.SendPropertyChanging();
					this._bBusinessLicensePaid = value;
					this.SendPropertyChanged("bBusinessLicensePaid");
					this.OnbBusinessLicensePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseNumber", DbType="VarChar(30)")]
		public string BusinessLicenseNumber
		{
			get
			{
				return this._BusinessLicenseNumber;
			}
			set
			{
				if ((this._BusinessLicenseNumber != value))
				{
					this.OnBusinessLicenseNumberChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseNumber = value;
					this.SendPropertyChanged("BusinessLicenseNumber");
					this.OnBusinessLicenseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bRentAdjustmentProgramFeePaid", DbType="Bit")]
		public System.Nullable<bool> bRentAdjustmentProgramFeePaid
		{
			get
			{
				return this._bRentAdjustmentProgramFeePaid;
			}
			set
			{
				if ((this._bRentAdjustmentProgramFeePaid != value))
				{
					this.OnbRentAdjustmentProgramFeePaidChanging(value);
					this.SendPropertyChanging();
					this._bRentAdjustmentProgramFeePaid = value;
					this.SendPropertyChanged("bRentAdjustmentProgramFeePaid");
					this.OnbRentAdjustmentProgramFeePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingAcquiredDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BuildingAcquiredDate
		{
			get
			{
				return this._BuildingAcquiredDate;
			}
			set
			{
				if ((this._BuildingAcquiredDate != value))
				{
					this.OnBuildingAcquiredDateChanging(value);
					this.SendPropertyChanging();
					this._BuildingAcquiredDate = value;
					this.SendPropertyChanged("BuildingAcquiredDate");
					this.OnBuildingAcquiredDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfUnits", DbType="Int")]
		public System.Nullable<int> NumberOfUnits
		{
			get
			{
				return this._NumberOfUnits;
			}
			set
			{
				if ((this._NumberOfUnits != value))
				{
					this.OnNumberOfUnitsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfUnits = value;
					this.SendPropertyChanged("NumberOfUnits");
					this.OnNumberOfUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bMoreThanOneStreetOnParcel", DbType="Bit")]
		public System.Nullable<bool> bMoreThanOneStreetOnParcel
		{
			get
			{
				return this._bMoreThanOneStreetOnParcel;
			}
			set
			{
				if ((this._bMoreThanOneStreetOnParcel != value))
				{
					this.OnbMoreThanOneStreetOnParcelChanging(value);
					this.SendPropertyChanging();
					this._bMoreThanOneStreetOnParcel = value;
					this.SendPropertyChanged("bMoreThanOneStreetOnParcel");
					this.OnbMoreThanOneStreetOnParcelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionApplicantInfo_OwnerPetitionInfo", Storage="_OwnerPetitionInfos", ThisKey="OwnerPetitionApplicantInfoID", OtherKey="OwnerPetitionApplicantInfoID")]
		public EntitySet<OwnerPetitionInfo> OwnerPetitionInfos
		{
			get
			{
				return this._OwnerPetitionInfos;
			}
			set
			{
				this._OwnerPetitionInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionApplicantInfo_OwnerRentIncreaseReasonInfo", Storage="_OwnerRentIncreaseReasonInfos", ThisKey="OwnerPetitionApplicantInfoID", OtherKey="OwnerPetitionApplicantInfoID")]
		public EntitySet<OwnerRentIncreaseReasonInfo> OwnerRentIncreaseReasonInfos
		{
			get
			{
				return this._OwnerRentIncreaseReasonInfos;
			}
			set
			{
				this._OwnerRentIncreaseReasonInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerPetitionInfos(OwnerPetitionInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionApplicantInfo = this;
		}
		
		private void detach_OwnerPetitionInfos(OwnerPetitionInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionApplicantInfo = null;
		}
		
		private void attach_OwnerRentIncreaseReasonInfos(OwnerRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionApplicantInfo = this;
		}
		
		private void detach_OwnerRentIncreaseReasonInfos(OwnerRentIncreaseReasonInfo entity)
		{
			this.SendPropertyChanging();
			entity.OwnerPetitionApplicantInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerRentIncreaseReasonInfo")]
	public partial class OwnerRentIncreaseReasonInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentIncreaseReasonInfoID;
		
		private int _OwnerPetitionApplicantInfoID;
		
		private int _ReasonID;
		
		private EntityRef<OwnerPetitionApplicantInfo> _OwnerPetitionApplicantInfo;
		
		private EntityRef<OwnerRentIncreaseReason> _OwnerRentIncreaseReason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentIncreaseReasonInfoIDChanging(int value);
    partial void OnRentIncreaseReasonInfoIDChanged();
    partial void OnOwnerPetitionApplicantInfoIDChanging(int value);
    partial void OnOwnerPetitionApplicantInfoIDChanged();
    partial void OnReasonIDChanging(int value);
    partial void OnReasonIDChanged();
    #endregion
		
		public OwnerRentIncreaseReasonInfo()
		{
			this._OwnerPetitionApplicantInfo = default(EntityRef<OwnerPetitionApplicantInfo>);
			this._OwnerRentIncreaseReason = default(EntityRef<OwnerRentIncreaseReason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentIncreaseReasonInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentIncreaseReasonInfoID
		{
			get
			{
				return this._RentIncreaseReasonInfoID;
			}
			set
			{
				if ((this._RentIncreaseReasonInfoID != value))
				{
					this.OnRentIncreaseReasonInfoIDChanging(value);
					this.SendPropertyChanging();
					this._RentIncreaseReasonInfoID = value;
					this.SendPropertyChanged("RentIncreaseReasonInfoID");
					this.OnRentIncreaseReasonInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPetitionApplicantInfoID", DbType="Int NOT NULL")]
		public int OwnerPetitionApplicantInfoID
		{
			get
			{
				return this._OwnerPetitionApplicantInfoID;
			}
			set
			{
				if ((this._OwnerPetitionApplicantInfoID != value))
				{
					if (this._OwnerPetitionApplicantInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPetitionApplicantInfoIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPetitionApplicantInfoID = value;
					this.SendPropertyChanged("OwnerPetitionApplicantInfoID");
					this.OnOwnerPetitionApplicantInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonID", DbType="Int NOT NULL")]
		public int ReasonID
		{
			get
			{
				return this._ReasonID;
			}
			set
			{
				if ((this._ReasonID != value))
				{
					if (this._OwnerRentIncreaseReason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReasonIDChanging(value);
					this.SendPropertyChanging();
					this._ReasonID = value;
					this.SendPropertyChanged("ReasonID");
					this.OnReasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerPetitionApplicantInfo_OwnerRentIncreaseReasonInfo", Storage="_OwnerPetitionApplicantInfo", ThisKey="OwnerPetitionApplicantInfoID", OtherKey="OwnerPetitionApplicantInfoID", IsForeignKey=true)]
		public OwnerPetitionApplicantInfo OwnerPetitionApplicantInfo
		{
			get
			{
				return this._OwnerPetitionApplicantInfo.Entity;
			}
			set
			{
				OwnerPetitionApplicantInfo previousValue = this._OwnerPetitionApplicantInfo.Entity;
				if (((previousValue != value) 
							|| (this._OwnerPetitionApplicantInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerPetitionApplicantInfo.Entity = null;
						previousValue.OwnerRentIncreaseReasonInfos.Remove(this);
					}
					this._OwnerPetitionApplicantInfo.Entity = value;
					if ((value != null))
					{
						value.OwnerRentIncreaseReasonInfos.Add(this);
						this._OwnerPetitionApplicantInfoID = value.OwnerPetitionApplicantInfoID;
					}
					else
					{
						this._OwnerPetitionApplicantInfoID = default(int);
					}
					this.SendPropertyChanged("OwnerPetitionApplicantInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnerRentIncreaseReason_OwnerRentIncreaseReasonInfo", Storage="_OwnerRentIncreaseReason", ThisKey="ReasonID", OtherKey="ReasonID", IsForeignKey=true)]
		public OwnerRentIncreaseReason OwnerRentIncreaseReason
		{
			get
			{
				return this._OwnerRentIncreaseReason.Entity;
			}
			set
			{
				OwnerRentIncreaseReason previousValue = this._OwnerRentIncreaseReason.Entity;
				if (((previousValue != value) 
							|| (this._OwnerRentIncreaseReason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerRentIncreaseReason.Entity = null;
						previousValue.OwnerRentIncreaseReasonInfos.Remove(this);
					}
					this._OwnerRentIncreaseReason.Entity = value;
					if ((value != null))
					{
						value.OwnerRentIncreaseReasonInfos.Add(this);
						this._ReasonID = value.ReasonID;
					}
					else
					{
						this._ReasonID = default(int);
					}
					this.SendPropertyChanged("OwnerRentIncreaseReason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NumberRangeForUnits")]
	public partial class NumberRangeForUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RangeID;
		
		private string _RangeDesc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRangeIDChanging(int value);
    partial void OnRangeIDChanged();
    partial void OnRangeDescChanging(string value);
    partial void OnRangeDescChanged();
    #endregion
		
		public NumberRangeForUnit()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RangeID
		{
			get
			{
				return this._RangeID;
			}
			set
			{
				if ((this._RangeID != value))
				{
					this.OnRangeIDChanging(value);
					this.SendPropertyChanging();
					this._RangeID = value;
					this.SendPropertyChanged("RangeID");
					this.OnRangeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangeDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RangeDesc
		{
			get
			{
				return this._RangeDesc;
			}
			set
			{
				if ((this._RangeDesc != value))
				{
					this.OnRangeDescChanging(value);
					this.SendPropertyChanging();
					this._RangeDesc = value;
					this.SendPropertyChanged("RangeDesc");
					this.OnRangeDescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
